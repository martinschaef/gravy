{"name":"Gravy","tagline":"Infeasible Code Detection and Gradual Verification of Boogie Programs","body":"##Gravy\r\n\r\nGraVy is a static checker for Boogie programs. Similar to a deductive verifier, such as [Boogie](http://boogie.codeplex.com/), it checks a boogie program one procedure at a time. The difference is that, instead of checking if there exists an execution of the procedure that may violate the postcondition, GraVy collects all (feasible) paths that have normal terminating executions. In a second path, GraVy collects all paths that are only feasible if the postcondition is ignored. Every statement that is not covered by any of these paths is infeasible. \r\n\r\n\r\nGraVy support two modes of checking Boogie files:\r\n- **[Infeasible code detection](http://iist.unu.edu/sites/iist.unu.edu/files/biblio/cav12.pdf)**. Infeasible code detection checks for the existence of statements, that are either not forward or not backward reachable on any feasible path.\r\n\r\n- **[Gradual verification](http://www.csl.sri.com/users/schaef/nfm14.pdf)**. In gradual verification, every assertion of the form *assert(e)* is turned into a conditional choice *if(!e){$AssertionFailure=true;return;}*. This way, GraVy can be used to check if an assertion never fails (the assignment *$AssertionFailure=true* does not occur on any feasible path), if it may fail (both branches of the conditional are reachable), if it must fail, or if it is unreachable.  \r\n\r\n**more details will follow soon**\r\n\r\n####Requirements\r\n- Java >= 7\r\n\r\n####Usage:\r\nFor a quick start, download the all-in-one [jar file](https://github.com/martinschaef/gravy/blob/master/gravy/dist/gravy.jar). For gradual verification of a Boogie file call:\r\n    java -jar gravy.jar [myFile.bpl]\r\nor\r\n    java -jar gravy.jar [myFile.bpl] -checker 0\r\n    \r\nfor infeasible code detection call: \r\n\r\n    java -jar gravy.jar [myFile.bpl] -checker 1\r\n    \r\nif your boogie file was generated by [jar2bpl](https://github.com/martinschaef/jar2bpl) and you prefer error messages that refer to Java source locations, use the -java_report option.\r\n\r\n    java -jar gravy.jar [myFile.bpl] -checker 1 -java_report\r\n\r\nNote that not all infeasible code in Boogie is also infeasible code in Java. E.g., in some Boogie conditionals that distinguish Java types, one of the branches might be infeasible but there is no corresponding infeasible Java statement.\r\n\r\nIt makes sense to provide GraVy with a lot of memory when checking real programs. We use:\r\n\r\n    java -Xmx2g -Xms2g -Xss4m -jar gravy.jar -checker 1 [myFile.bpl]\r\n\r\n#####Loops:\r\nWe have several ways of handling loops. The default mode eliminates all looping code and replaces it by a non-deterministic assignment to all variables that could be modified in the loop body. Alternatively, you can use an experimental version of \"abstract unwinding\", where we first assign non-deterministic values to all variables in the loop and then unwind the loop once:\r\n\r\n    java -Xmx2g -Xms2g -Xss4m -jar gravy.jar -loopmode 1 [myFile.bpl]\r\n\r\nWe also support plain unwinding, however, this causes the analysis to become unsound:\r\n\r\n    java -Xmx2g -Xms2g -Xss4m -jar gravy.jar -unwind 10 [myFile.bpl]\r\n\r\n**For our old googlecode website which has much more information check [here](https://code.google.com/p/jimple2boogie/) and [here](https://code.google.com/p/joogie/)**    \r\n    \r\n","google":"UA-20025374-5","note":"Don't delete this file! It's used internally to help with page regeneration."}