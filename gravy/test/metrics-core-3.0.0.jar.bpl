type ref;
type javaType;
type Field $GenericType__0;
type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;
type boolArrHeap_type = [ref][int]bool;
type refArrHeap_type = [ref][int]ref;
type realArrHeap_type = [ref][int]int;
type intArrHeap_type = [ref][int]int;
const unique $type : Field javaType;
const unique $alloc : Field bool;
const unique $null : ref;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.lang.Object : javaType extends  complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.Metric : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.Gauge : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Metric complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.CachedGauge : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.lang.Comparable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.io.Serializable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.lang.Enum : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.lang.Comparable complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.util.concurrent.TimeUnit : javaType extends  unique java.lang.Enum complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.Clock : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.lang.Number : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } unique java.util.concurrent.atomic.AtomicLong : javaType extends  unique java.io.Serializable, unique java.lang.Number complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique java.lang.System : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique com.codahale.metrics.Clock$UserTimeClock : javaType extends  unique com.codahale.metrics.Clock complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique com.codahale.metrics.Clock$CpuTimeClock : javaType extends  unique com.codahale.metrics.Clock complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique java.lang.management.PlatformManagedObject : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique java.lang.management.ThreadMXBean : javaType extends  unique java.lang.management.PlatformManagedObject, unique java.lang.Object complete;
const { :sourceloc "Clock.java",-1,-1,-1,-1 } unique java.lang.management.ManagementFactory : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ScheduledReporter : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ConsoleReporter : javaType extends  unique com.codahale.metrics.ScheduledReporter complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricSet : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Metric complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry : javaType extends  unique com.codahale.metrics.MetricSet, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ConsoleReporter$Builder : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ConsoleReporter$1 : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.AutoCloseable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.io.Closeable : javaType extends  unique java.lang.Object, unique java.lang.AutoCloseable complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.io.Flushable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.io.OutputStream : javaType extends  unique java.io.Flushable, unique java.lang.Object, unique java.io.Closeable complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.io.FilterOutputStream : javaType extends  unique java.io.OutputStream complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.Appendable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.io.PrintStream : javaType extends  unique java.io.FilterOutputStream, unique java.io.Closeable, unique java.lang.Appendable complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.Cloneable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Locale : javaType extends  unique java.lang.Cloneable, unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.TimeZone : javaType extends  unique java.lang.Cloneable, unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricFilter : javaType extends  unique java.lang.Object complete;
const unique $StringConst0 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.CharSequence : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.String : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.lang.CharSequence, unique java.lang.Comparable complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.text.Format : javaType extends  unique java.lang.Cloneable, unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.text.DateFormat : javaType extends  unique java.text.Format complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Map : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.SortedMap : javaType extends  unique java.util.Map, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Date : javaType extends  unique java.lang.Cloneable, unique java.io.Serializable, unique java.lang.Object, unique java.lang.Comparable complete;
const unique $StringConst1 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.Iterable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Collection : javaType extends  unique java.lang.Object, unique java.lang.Iterable complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Set : javaType extends  unique java.util.Collection, unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Iterator : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.util.Map$Entry : javaType extends  unique java.lang.Object complete;
const unique $StringConst2 : ref extends  complete;
const unique $StringConst3 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Sampling : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Counting : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Histogram : javaType extends  unique com.codahale.metrics.Sampling, unique java.lang.Object, unique com.codahale.metrics.Metric, unique com.codahale.metrics.Counting complete;
const unique $StringConst4 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Metered : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Metric, unique com.codahale.metrics.Counting complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Meter : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Metered complete;
const unique $StringConst5 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Timer : javaType extends  unique com.codahale.metrics.Sampling, unique java.lang.Object, unique com.codahale.metrics.Metered complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.Long : javaType extends  unique java.lang.Number, unique java.lang.Comparable complete;
const unique $StringConst6 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique java.lang.Double : javaType extends  unique java.lang.Number, unique java.lang.Comparable complete;
const unique $StringConst7 : ref extends  complete;
const unique $StringConst8 : ref extends  complete;
const unique $StringConst9 : ref extends  complete;
const unique $StringConst10 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Counter : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Metric, unique com.codahale.metrics.Counting complete;
const unique $StringConst11 : ref extends  complete;
const { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Snapshot : javaType extends  unique java.lang.Object complete;
const unique $StringConst12 : ref extends  complete;
const unique $StringConst13 : ref extends  complete;
const unique $StringConst14 : ref extends  complete;
const unique $StringConst15 : ref extends  complete;
const unique $StringConst16 : ref extends  complete;
const unique $StringConst17 : ref extends  complete;
const unique $StringConst18 : ref extends  complete;
const unique $StringConst19 : ref extends  complete;
const unique $StringConst20 : ref extends  complete;
const unique $StringConst21 : ref extends  complete;
const unique $StringConst22 : ref extends  complete;
const unique $StringConst23 : ref extends  complete;
const unique $StringConst24 : ref extends  complete;
const unique $StringConst25 : ref extends  complete;
const unique $StringConst26 : ref extends  complete;
const unique $StringConst27 : ref extends  complete;
const unique $StringConst28 : ref extends  complete;
const unique $StringConst29 : ref extends  complete;
const unique $StringConst30 : ref extends  complete;
const unique $StringConst31 : ref extends  complete;
const unique $StringConst32 : ref extends  complete;
const unique $StringConst33 : ref extends  complete;
const unique $StringConst34 : ref extends  complete;
const unique $StringConst35 : ref extends  complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.ThreadFactory : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ScheduledReporter$NamedThreadFactory : javaType extends  unique java.lang.Object, unique java.util.concurrent.ThreadFactory complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.Runnable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.ScheduledReporter$1 : javaType extends  unique java.lang.Object, unique java.lang.Runnable complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.Executors : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.Executor : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.ExecutorService : javaType extends  unique java.util.concurrent.Executor, unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.ScheduledExecutorService : javaType extends  unique java.lang.Object, unique java.util.concurrent.ExecutorService complete;
const unique $DoubleConst0 : int extends  complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.Delayed : javaType extends  unique java.lang.Object, unique java.lang.Comparable complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.Future : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.ScheduledFuture : javaType extends  unique java.lang.Object, unique java.util.concurrent.Delayed, unique java.util.concurrent.Future complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.Throwable : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.Exception : javaType extends  unique java.lang.Throwable complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.InterruptedException : javaType extends  unique java.lang.Exception complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.AbstractStringBuilder : javaType extends  unique java.lang.Object, unique java.lang.CharSequence, unique java.lang.Appendable complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.StringBuilder : javaType extends  unique java.io.Serializable, unique java.lang.CharSequence, unique java.lang.AbstractStringBuilder complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.reflect.GenericDeclaration : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.reflect.Type : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.reflect.AnnotatedElement : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.Class : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.lang.reflect.Type, unique java.lang.reflect.AnnotatedElement, unique java.lang.reflect.GenericDeclaration complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.concurrent.ConcurrentMap : javaType extends  unique java.util.Map, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.List : javaType extends  unique java.util.Collection, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.RandomAccess : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.concurrent.CopyOnWriteArrayList : javaType extends  unique java.util.RandomAccess, unique java.lang.Cloneable, unique java.io.Serializable, unique java.lang.Object, unique java.util.List complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.AbstractMap : javaType extends  unique java.util.Map, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.concurrent.ConcurrentHashMap : javaType extends  unique java.io.Serializable, unique java.util.concurrent.ConcurrentMap, unique java.util.AbstractMap complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.RuntimeException : javaType extends  unique java.lang.Exception complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.lang.IllegalArgumentException : javaType extends  unique java.lang.RuntimeException complete;
const unique $StringConst36 : ref extends  complete;
const unique $StringConst37 : ref extends  complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry$MetricBuilder : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.EventListener : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistryListener : javaType extends  unique java.lang.Object, unique java.util.EventListener complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.SortedSet : javaType extends  unique java.util.Set, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.AbstractCollection : javaType extends  unique java.util.Collection, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.AbstractSet : javaType extends  unique java.util.Set, unique java.util.AbstractCollection complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.NavigableSet : javaType extends  unique java.util.SortedSet, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.TreeSet : javaType extends  unique java.util.NavigableSet, unique java.lang.Cloneable, unique java.io.Serializable, unique java.util.AbstractSet complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.Collections : javaType extends  unique java.lang.Object complete;
const unique CC$com$_$codahale$_$metrics$_$Gauge : ref extends  complete;
const unique CC$com$_$codahale$_$metrics$_$Counter : ref extends  complete;
const unique CC$com$_$codahale$_$metrics$_$Histogram : ref extends  complete;
const unique CC$com$_$codahale$_$metrics$_$Meter : ref extends  complete;
const unique CC$com$_$codahale$_$metrics$_$Timer : ref extends  complete;
const unique $StringConst38 : ref extends  complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.NavigableMap : javaType extends  unique java.lang.Object, unique java.util.SortedMap complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique java.util.TreeMap : javaType extends  unique java.lang.Cloneable, unique java.io.Serializable, unique java.util.AbstractMap, unique java.util.NavigableMap complete;
const unique $StringConst39 : ref extends  complete;
const { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricFilter$1 : javaType extends  unique java.lang.Object, unique com.codahale.metrics.MetricFilter complete;
const { :sourceloc "Meter.java",-1,-1,-1,-1 } unique com.codahale.metrics.EWMA : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Meter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Striped64 : javaType extends  unique java.lang.Number complete;
const { :sourceloc "Meter.java",-1,-1,-1,-1 } unique com.codahale.metrics.LongAdder : javaType extends  unique java.io.Serializable, unique com.codahale.metrics.Striped64 complete;
const unique $DoubleConst1 : int extends  complete;
const { :sourceloc "Histogram.java",-1,-1,-1,-1 } unique com.codahale.metrics.Reservoir : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Timer.java",-1,-1,-1,-1 } unique com.codahale.metrics.ExponentiallyDecayingReservoir : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Reservoir complete;
const { :sourceloc "Timer.java",-1,-1,-1,-1 } unique java.util.concurrent.Callable : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Timer.java",-1,-1,-1,-1 } unique com.codahale.metrics.Timer$Context : javaType extends  unique java.lang.Object, unique java.io.Closeable complete;
const { :sourceloc "Timer.java",-1,-1,-1,-1 } unique com.codahale.metrics.Timer$1 : javaType extends  unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry$MetricBuilder$1 : javaType extends  unique com.codahale.metrics.MetricRegistry$MetricBuilder, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry$MetricBuilder$2 : javaType extends  unique com.codahale.metrics.MetricRegistry$MetricBuilder, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry$MetricBuilder$3 : javaType extends  unique com.codahale.metrics.MetricRegistry$MetricBuilder, unique java.lang.Object complete;
const { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistry$MetricBuilder$4 : javaType extends  unique com.codahale.metrics.MetricRegistry$MetricBuilder, unique java.lang.Object complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.util.Arrays : javaType extends  unique java.lang.Object complete;
const unique $StringConst40 : ref extends  complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.lang.Math : javaType extends  unique java.lang.Object complete;
const unique $DoubleConst2 : int extends  complete;
const unique $DoubleConst3 : int extends  complete;
const unique $DoubleConst4 : int extends  complete;
const unique $DoubleConst5 : int extends  complete;
const unique $DoubleConst6 : int extends  complete;
const unique $DoubleConst7 : int extends  complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.io.Writer : javaType extends  unique java.io.Flushable, unique java.lang.Object, unique java.io.Closeable, unique java.lang.Appendable complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.io.PrintWriter : javaType extends  unique java.io.Writer complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.io.OutputStreamWriter : javaType extends  unique java.io.Writer complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.nio.charset.Charset : javaType extends  unique java.lang.Object, unique java.lang.Comparable complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.lang.NullPointerException : javaType extends  unique java.lang.RuntimeException complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.lang.IndexOutOfBoundsException : javaType extends  unique java.lang.RuntimeException complete;
const { :sourceloc "Snapshot.java",-1,-1,-1,-1 } unique java.lang.ArrayIndexOutOfBoundsException : javaType extends  unique java.lang.IndexOutOfBoundsException complete;
const unique $StringConst41 : ref extends  complete;
const unique $StringConst42 : ref extends  complete;
const unique $DoubleConst8 : int extends  complete;
const unique $DoubleConst9 : int extends  complete;
const unique $DoubleConst10 : int extends  complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.lang.ThreadLocal : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique com.codahale.metrics.Striped64$HashCode : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique com.codahale.metrics.Striped64$Cell : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.DataOutput : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.ObjectOutput : javaType extends  unique java.lang.Object, unique java.io.DataOutput, unique java.lang.AutoCloseable complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.ObjectStreamConstants : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.ObjectOutputStream : javaType extends  unique java.io.OutputStream, unique java.io.ObjectOutput, unique java.io.ObjectStreamConstants complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.IOException : javaType extends  unique java.lang.Exception complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.InputStream : javaType extends  unique java.lang.Object, unique java.io.Closeable complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.DataInput : javaType extends  unique java.lang.Object complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.ObjectInput : javaType extends  unique java.lang.Object, unique java.io.DataInput, unique java.lang.AutoCloseable complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.io.ObjectInputStream : javaType extends  unique java.io.InputStream, unique java.io.ObjectInput, unique java.io.ObjectStreamConstants complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.lang.ReflectiveOperationException : javaType extends  unique java.lang.Exception complete;
const { :sourceloc "LongAdder.java",-1,-1,-1,-1 } unique java.lang.ClassNotFoundException : javaType extends  unique java.lang.ReflectiveOperationException complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique sun.misc.Unsafe : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.SecurityException : javaType extends  unique java.lang.RuntimeException complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.security.PrivilegedExceptionAction : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique com.codahale.metrics.Striped64$1 : javaType extends  unique java.lang.Object, unique java.security.PrivilegedExceptionAction complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.security.AccessController : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.security.PrivilegedActionException : javaType extends  unique java.lang.Exception complete;
const unique $StringConst43 : ref extends  complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique com.codahale.metrics.Striped64$ThreadHashCode : javaType extends  unique java.lang.ThreadLocal complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.Runtime : javaType extends  unique java.lang.Object complete;
const unique CC$com$_$codahale$_$metrics$_$Striped64 : ref extends  complete;
const unique $StringConst44 : ref extends  complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.reflect.AccessibleObject : javaType extends  unique java.lang.Object, unique java.lang.reflect.AnnotatedElement complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.reflect.Member : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.reflect.Field : javaType extends  unique java.lang.reflect.AccessibleObject, unique java.lang.reflect.Member complete;
const unique $StringConst45 : ref extends  complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.Error : javaType extends  unique java.lang.Throwable complete;
const unique CC$com$_$codahale$_$metrics$_$Striped64$Cell : ref extends  complete;
const unique $StringConst46 : ref extends  complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.util.Random : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.CsvReporter : javaType extends  unique com.codahale.metrics.ScheduledReporter complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.CsvReporter$Builder : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.CsvReporter$1 : javaType extends  unique java.lang.Object complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique java.io.File : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.lang.Comparable complete;
const unique $StringConst47 : ref extends  complete;
const unique $StringConst48 : ref extends  complete;
const unique $StringConst49 : ref extends  complete;
const unique $StringConst50 : ref extends  complete;
const unique $StringConst51 : ref extends  complete;
const unique $StringConst52 : ref extends  complete;
const unique $StringConst53 : ref extends  complete;
const unique $StringConst54 : ref extends  complete;
const unique $StringConst55 : ref extends  complete;
const unique $StringConst56 : ref extends  complete;
const unique $StringConst57 : ref extends  complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique java.io.FileOutputStream : javaType extends  unique java.io.OutputStream complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique java.io.FileNotFoundException : javaType extends  unique java.io.IOException complete;
const unique $StringConst58 : ref extends  complete;
const unique $StringConst59 : ref extends  complete;
const unique $StringConst60 : ref extends  complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique org.slf4j.Logger : javaType extends  complete;
const unique CC$com$_$codahale$_$metrics$_$CsvReporter : ref extends  complete;
const { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } unique org.slf4j.LoggerFactory : javaType extends  complete;
const { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.DerivativeGauge : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const unique $DoubleConst11 : int extends  complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.ConcurrentNavigableMap : javaType extends  unique java.lang.Object, unique java.util.concurrent.ConcurrentMap, unique java.util.NavigableMap complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.ConcurrentSkipListMap : javaType extends  unique java.lang.Cloneable, unique java.util.concurrent.ConcurrentNavigableMap, unique java.io.Serializable, unique java.util.AbstractMap complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.locks.ReadWriteLock : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.locks.ReentrantReadWriteLock : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.util.concurrent.locks.ReadWriteLock complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique com.codahale.metrics.ThreadLocalRandom : javaType extends  unique java.util.Random complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.lang.ClassCastException : javaType extends  unique java.lang.RuntimeException complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.AbstractList : javaType extends  unique java.util.List, unique java.util.AbstractCollection complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.ArrayList : javaType extends  unique java.util.RandomAccess, unique java.lang.Cloneable, unique java.io.Serializable, unique java.util.AbstractList, unique java.util.List complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.locks.Lock : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.util.concurrent.locks.Lock complete;
const { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock : javaType extends  unique java.io.Serializable, unique java.lang.Object, unique java.util.concurrent.locks.Lock complete;
const { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } unique java.lang.UnsupportedOperationException : javaType extends  unique java.lang.RuntimeException complete;
const unique $LongConst0 : int extends  complete;
const unique $LongConst1 : int extends  complete;
const unique $StringConst61 : ref extends  complete;
const unique $LongConst2 : int extends  complete;
const { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } unique com.codahale.metrics.ThreadLocalRandom$1 : javaType extends  unique java.lang.ThreadLocal complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxAttributeGauge : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.QueryExp : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.ObjectName : javaType extends  unique javax.management.QueryExp, unique java.lang.Object, unique java.lang.Comparable complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.MBeanServerConnection : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.MBeanServer : javaType extends  unique java.lang.Object, unique javax.management.MBeanServerConnection complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.JMException : javaType extends  unique java.lang.Exception complete;
const { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } unique javax.management.ReflectionException : javaType extends  unique javax.management.JMException complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$Builder : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$1 : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$MetricTimeUnits : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxListener : javaType extends  unique java.lang.Object, unique com.codahale.metrics.MetricRegistryListener complete;
const unique CC$com$_$codahale$_$metrics$_$JmxReporter : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.CopyOnWriteArraySet : javaType extends  unique java.io.Serializable, unique java.util.AbstractSet complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.OperationsException : javaType extends  unique javax.management.JMException complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.InstanceAlreadyExistsException : javaType extends  unique javax.management.OperationsException complete;
const unique $StringConst62 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$MetricMBean : javaType extends  unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$AbstractBean : javaType extends  unique com.codahale.metrics.JmxReporter$MetricMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxGaugeMBean : javaType extends  unique com.codahale.metrics.JmxReporter$MetricMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxGauge : javaType extends  unique com.codahale.metrics.JmxReporter$JmxGaugeMBean, unique com.codahale.metrics.JmxReporter$AbstractBean complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.ObjectInstance : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.NotCompliantMBeanException : javaType extends  unique javax.management.OperationsException complete;
const unique $StringConst63 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.MBeanException : javaType extends  unique javax.management.JMException complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.MBeanRegistrationException : javaType extends  unique javax.management.MBeanException complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.InstanceNotFoundException : javaType extends  unique javax.management.OperationsException complete;
const unique $StringConst64 : ref extends  complete;
const unique $StringConst65 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxCounterMBean : javaType extends  unique com.codahale.metrics.JmxReporter$MetricMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxCounter : javaType extends  unique com.codahale.metrics.JmxReporter$JmxCounterMBean, unique com.codahale.metrics.JmxReporter$AbstractBean complete;
const unique $StringConst66 : ref extends  complete;
const unique $StringConst67 : ref extends  complete;
const unique $StringConst68 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxHistogramMBean : javaType extends  unique com.codahale.metrics.JmxReporter$MetricMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxHistogram : javaType extends  unique com.codahale.metrics.JmxReporter$JmxHistogramMBean, unique java.lang.Object complete;
const unique $StringConst69 : ref extends  complete;
const unique $StringConst70 : ref extends  complete;
const unique $StringConst71 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxMeterMBean : javaType extends  unique com.codahale.metrics.JmxReporter$MetricMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxMeter : javaType extends  unique com.codahale.metrics.JmxReporter$JmxMeterMBean, unique com.codahale.metrics.JmxReporter$AbstractBean complete;
const unique $StringConst72 : ref extends  complete;
const unique $StringConst73 : ref extends  complete;
const unique $StringConst74 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxTimerMBean : javaType extends  unique com.codahale.metrics.JmxReporter$JmxMeterMBean, unique java.lang.Object complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.JmxReporter$JmxTimer : javaType extends  unique com.codahale.metrics.JmxReporter$JmxTimerMBean, unique com.codahale.metrics.JmxReporter$JmxMeter complete;
const unique $StringConst75 : ref extends  complete;
const unique $StringConst76 : ref extends  complete;
const unique $StringConst77 : ref extends  complete;
const { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } unique javax.management.MalformedObjectNameException : javaType extends  unique javax.management.OperationsException complete;
const unique $StringConst78 : ref extends  complete;
const unique $StringConst79 : ref extends  complete;
const unique $StringConst80 : ref extends  complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique com.codahale.metrics.JvmAttributeGaugeSet$1 : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique com.codahale.metrics.JvmAttributeGaugeSet : javaType extends  unique com.codahale.metrics.MetricSet, unique java.lang.Object complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique java.lang.management.RuntimeMXBean : javaType extends  unique java.lang.management.PlatformManagedObject, unique java.lang.Object complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique java.util.HashMap : javaType extends  unique java.lang.Cloneable, unique java.util.Map, unique java.io.Serializable, unique java.util.AbstractMap complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique com.codahale.metrics.JvmAttributeGaugeSet$2 : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const unique $StringConst81 : ref extends  complete;
const { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } unique com.codahale.metrics.JvmAttributeGaugeSet$3 : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const unique $StringConst82 : ref extends  complete;
const unique $StringConst83 : ref extends  complete;
const { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } unique com.codahale.metrics.MetricRegistryListener$Base : javaType extends  unique java.lang.Object, unique com.codahale.metrics.MetricRegistryListener complete;
const { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.RatioGauge$Ratio : javaType extends  unique java.lang.Object complete;
const unique $DoubleConst12 : int extends  complete;
const unique $StringConst84 : ref extends  complete;
const { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } unique com.codahale.metrics.RatioGauge : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Gauge complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.util.concurrent.atomic.AtomicInteger : javaType extends  unique java.io.Serializable, unique java.lang.Number complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.SecurityManager : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.Thread$UncaughtExceptionHandler : javaType extends  unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.ThreadGroup : javaType extends  unique java.lang.Thread$UncaughtExceptionHandler, unique java.lang.Object complete;
const { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } unique java.lang.Thread : javaType extends  unique java.lang.Object, unique java.lang.Runnable complete;
const unique $StringConst85 : ref extends  complete;
const unique $StringConst86 : ref extends  complete;
const { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } unique com.codahale.metrics.SharedMetricRegistries : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Slf4jReporter : javaType extends  unique com.codahale.metrics.ScheduledReporter complete;
const { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Slf4jReporter$Builder : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } unique com.codahale.metrics.Slf4jReporter$1 : javaType extends  unique java.lang.Object complete;
const { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } unique org.slf4j.Marker : javaType extends  complete;
const unique $StringConst87 : ref extends  complete;
const unique $StringConst88 : ref extends  complete;
const unique $StringConst89 : ref extends  complete;
const unique $StringConst90 : ref extends  complete;
const unique $StringConst91 : ref extends  complete;
const unique $StringConst92 : ref extends  complete;
const unique $StringConst93 : ref extends  complete;
const { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } unique com.codahale.metrics.SlidingTimeWindowReservoir : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Reservoir complete;
const { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } unique com.codahale.metrics.SlidingWindowReservoir : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Reservoir complete;
const unique CC$sun$_$misc$_$Unsafe : ref extends  complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.IllegalAccessException : javaType extends  unique java.lang.ReflectiveOperationException complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.LinkageError : javaType extends  unique java.lang.Error complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.IncompatibleClassChangeError : javaType extends  unique java.lang.LinkageError complete;
const { :sourceloc "Striped64.java",-1,-1,-1,-1 } unique java.lang.NoSuchFieldError : javaType extends  unique java.lang.IncompatibleClassChangeError complete;
const unique $StringConst94 : ref extends  complete;
const { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } unique com.codahale.metrics.UniformReservoir : javaType extends  unique java.lang.Object, unique com.codahale.metrics.Reservoir complete;
const { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } unique java.util.concurrent.atomic.AtomicLongArray : javaType extends  unique java.io.Serializable, unique java.lang.Object complete;
const unique $LongConst3 : int extends  complete;
var $heap : $heap_type;
var $intArrayType : javaType;
var $charArrayType : javaType;
var $boolArrayType : javaType;
var $byteArrayType : javaType;
var $longArrayType : javaType;
var $arrSizeHeap : [ref]int;
var $stringSizeHeap : [ref]int;
var $boolArrHeap : boolArrHeap_type;
var $refArrHeap : refArrHeap_type;
var $realArrHeap : realArrHeap_type;
var $intArrHeap : intArrHeap_type;
var com.codahale.metrics.Clock$com.codahale.metrics.CachedGauge$clock234 : Field ref;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.CachedGauge$reloadAt235 : Field ref;
var long$com.codahale.metrics.CachedGauge$timeoutNS0 : Field int;
var java.lang.Object$com.codahale.metrics.CachedGauge$value236 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.Clock$DEFAULT237 : ref;
var java.lang.management.ThreadMXBean$com.codahale.metrics.Clock$CpuTimeClock$THREAD_MX_BEAN249 : ref;
var java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303 : Field ref;
var java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$clock305 : Field ref;
var java.text.DateFormat$com.codahale.metrics.ConsoleReporter$dateFormat306 : Field ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309 : Field ref;
var java.util.concurrent.ScheduledExecutorService$com.codahale.metrics.ScheduledReporter$executor308 : Field ref;
var double$com.codahale.metrics.ScheduledReporter$rateFactor0 : Field int;
var java.lang.String$com.codahale.metrics.ScheduledReporter$rateUnit311 : Field ref;
var double$com.codahale.metrics.ScheduledReporter$durationFactor0 : Field int;
var java.util.Locale$java.util.Locale$US331 : ref;
var java.lang.String$com.codahale.metrics.ScheduledReporter$durationUnit310 : Field ref;
var java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242 : ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.ConsoleReporter$Builder$registry345 : Field ref;
var java.io.PrintStream$java.lang.System$out282 : ref;
var java.io.PrintStream$com.codahale.metrics.ConsoleReporter$Builder$output346 : Field ref;
var java.util.Locale$com.codahale.metrics.ConsoleReporter$Builder$locale347 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$Builder$clock348 : Field ref;
var java.util.TimeZone$com.codahale.metrics.ConsoleReporter$Builder$timeZone349 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$rateUnit350 : Field ref;
var java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241 : ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$durationUnit351 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360 : ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.ConsoleReporter$Builder$filter352 : Field ref;
var java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353 : Field ref;
var java.util.List$com.codahale.metrics.MetricRegistry$listeners354 : Field ref;
var com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$COUNTERS378 : ref;
var com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$HISTOGRAMS379 : ref;
var com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$METERS380 : ref;
var com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$TIMERS381 : ref;
var com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m1Rate361 : Field ref;
var com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m5Rate362 : Field ref;
var com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m15Rate363 : Field ref;
var com.codahale.metrics.LongAdder$com.codahale.metrics.Meter$count364 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.Meter$clock366 : Field ref;
var long$com.codahale.metrics.Meter$startTime0 : Field int;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.Meter$lastTick365 : Field ref;
var long$com.codahale.metrics.Meter$TICK_INTERVAL0 : int;
var com.codahale.metrics.Reservoir$com.codahale.metrics.Histogram$reservoir367 : Field ref;
var com.codahale.metrics.LongAdder$com.codahale.metrics.Histogram$count368 : Field ref;
var com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371 : Field ref;
var com.codahale.metrics.Histogram$com.codahale.metrics.Timer$histogram370 : Field ref;
var com.codahale.metrics.LongAdder$com.codahale.metrics.Counter$count377 : Field ref;
var long$lp$$rp$$com.codahale.metrics.Snapshot$values449 : Field ref;
var java.nio.charset.Charset$com.codahale.metrics.Snapshot$UTF_8448 : ref;
var com.codahale.metrics.Timer$com.codahale.metrics.Timer$Context$timer450 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.Timer$Context$clock451 : Field ref;
var long$com.codahale.metrics.Timer$Context$startTime0 : Field int;
var java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$NANOSECONDS239 : ref;
var double$com.codahale.metrics.EWMA$M1_ALPHA0 : int;
var double$com.codahale.metrics.EWMA$M5_ALPHA0 : int;
var double$com.codahale.metrics.EWMA$M15_ALPHA0 : int;
var boolean$com.codahale.metrics.EWMA$initialized0 : Field int;
var double$com.codahale.metrics.EWMA$rate0 : Field int;
var com.codahale.metrics.LongAdder$com.codahale.metrics.EWMA$uncounted460 : Field ref;
var double$com.codahale.metrics.EWMA$interval0 : Field int;
var double$com.codahale.metrics.EWMA$alpha0 : Field int;
var com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471 : Field ref;
var long$com.codahale.metrics.Striped64$base0 : Field int;
var com.codahale.metrics.Striped64$ThreadHashCode$com.codahale.metrics.Striped64$threadHashCode470 : ref;
var int$com.codahale.metrics.Striped64$HashCode$code0 : Field int;
var long$com.codahale.metrics.Striped64$Cell$value0 : Field int;
var int$com.codahale.metrics.Striped64$busy0 : Field int;
var sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472 : ref;
var long$com.codahale.metrics.Striped64$baseOffset0 : int;
var long$com.codahale.metrics.Striped64$busyOffset0 : int;
var int$com.codahale.metrics.Striped64$NCPU0 : int;
var sun.misc.Unsafe$com.codahale.metrics.Striped64$Cell$UNSAFE482 : ref;
var long$com.codahale.metrics.Striped64$Cell$valueOffset0 : int;
var java.util.Random$com.codahale.metrics.Striped64$HashCode$rng483 : ref;
var java.io.File$com.codahale.metrics.CsvReporter$directory487 : Field ref;
var java.util.Locale$com.codahale.metrics.CsvReporter$locale488 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$clock489 : Field ref;
var java.nio.charset.Charset$com.codahale.metrics.CsvReporter$UTF_8486 : ref;
var org.slf4j.Logger$com.codahale.metrics.CsvReporter$LOGGER485 : ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.CsvReporter$Builder$registry490 : Field ref;
var java.util.Locale$com.codahale.metrics.CsvReporter$Builder$locale491 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$rateUnit492 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$durationUnit493 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$Builder$clock494 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.CsvReporter$Builder$filter495 : Field ref;
var com.codahale.metrics.Gauge$com.codahale.metrics.DerivativeGauge$base547 : Field ref;
var java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553 : Field ref;
var java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554 : Field ref;
var double$com.codahale.metrics.ExponentiallyDecayingReservoir$alpha0 : Field int;
var int$com.codahale.metrics.ExponentiallyDecayingReservoir$size0 : Field int;
var com.codahale.metrics.Clock$com.codahale.metrics.ExponentiallyDecayingReservoir$clock557 : Field ref;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$count555 : Field ref;
var long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0 : Field int;
var long$com.codahale.metrics.ExponentiallyDecayingReservoir$RESCALE_THRESHOLD0 : int;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$nextScaleTime556 : Field ref;
var java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$HOURS244 : ref;
var boolean$com.codahale.metrics.ThreadLocalRandom$initialized0 : Field int;
var java.lang.ThreadLocal$com.codahale.metrics.ThreadLocalRandom$localRandom573 : ref;
var long$com.codahale.metrics.ThreadLocalRandom$rnd0 : Field int;
var javax.management.MBeanServer$com.codahale.metrics.JmxAttributeGauge$mBeanServer595 : Field ref;
var javax.management.ObjectName$com.codahale.metrics.JmxAttributeGauge$objectName596 : Field ref;
var java.lang.String$com.codahale.metrics.JmxAttributeGauge$attributeName597 : Field ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$registry617 : Field ref;
var com.codahale.metrics.JmxReporter$JmxListener$com.codahale.metrics.JmxReporter$listener618 : Field ref;
var org.slf4j.Logger$com.codahale.metrics.JmxReporter$LOGGER616 : ref;
var javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620 : Field ref;
var java.lang.String$com.codahale.metrics.JmxReporter$JmxListener$name619 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621 : Field ref;
var com.codahale.metrics.JmxReporter$MetricTimeUnits$com.codahale.metrics.JmxReporter$JmxListener$timeUnits622 : Field ref;
var java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623 : Field ref;
var javax.management.MBeanServer$com.codahale.metrics.JmxReporter$Builder$mBeanServer625 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$Builder$filter628 : Field ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$Builder$registry624 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$rateUnit626 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$durationUnit627 : Field ref;
var java.lang.String$com.codahale.metrics.JmxReporter$Builder$domain629 : Field ref;
var java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits630 : Field ref;
var java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificRateUnits631 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultRate632 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultDuration633 : Field ref;
var java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateOverrides634 : Field ref;
var java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationOverrides635 : Field ref;
var javax.management.ObjectName$com.codahale.metrics.JmxReporter$AbstractBean$objectName636 : Field ref;
var com.codahale.metrics.Counter$com.codahale.metrics.JmxReporter$JmxCounter$metric641 : Field ref;
var com.codahale.metrics.Gauge$com.codahale.metrics.JmxReporter$JmxGauge$metric642 : Field ref;
var com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644 : Field ref;
var javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxHistogram$objectName643 : Field ref;
var com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645 : Field ref;
var double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0 : Field int;
var java.lang.String$com.codahale.metrics.JmxReporter$JmxTimer$durationUnit646 : Field ref;
var com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648 : Field ref;
var double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0 : Field int;
var java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$rateUnit649 : Field ref;
var com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$1$this$0653 : Field ref;
var java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$runtime654 : Field ref;
var com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655 : Field ref;
var com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$3$this$0656 : Field ref;
var double$com.codahale.metrics.RatioGauge$Ratio$numerator0 : Field int;
var double$com.codahale.metrics.RatioGauge$Ratio$denominator0 : Field int;
var com.codahale.metrics.ScheduledReporter$com.codahale.metrics.ScheduledReporter$1$this$0743 : Field ref;
var java.util.concurrent.atomic.AtomicInteger$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$threadNumber745 : Field ref;
var java.lang.ThreadGroup$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$group744 : Field ref;
var java.lang.String$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$namePrefix746 : Field ref;
var java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778 : ref;
var org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779 : Field ref;
var org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780 : Field ref;
var com.codahale.metrics.MetricRegistry$com.codahale.metrics.Slf4jReporter$Builder$registry781 : Field ref;
var org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$Builder$logger782 : Field ref;
var org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$Builder$marker783 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$rateUnit784 : Field ref;
var java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$durationUnit785 : Field ref;
var com.codahale.metrics.MetricFilter$com.codahale.metrics.Slf4jReporter$Builder$filter786 : Field ref;
var com.codahale.metrics.Clock$com.codahale.metrics.SlidingTimeWindowReservoir$clock787 : Field ref;
var java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788 : Field ref;
var long$com.codahale.metrics.SlidingTimeWindowReservoir$window0 : Field int;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$lastTick789 : Field ref;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$count790 : Field ref;
var long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791 : Field ref;
var long$com.codahale.metrics.SlidingWindowReservoir$count0 : Field int;
var java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.UniformReservoir$count796 : Field ref;
var java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797 : Field ref;
function $arrayType(t:javaType) returns ($ret:javaType);
function $intToReal(x:int) returns ($ret:real);
function $intToBool(x:int) returns ($ret:bool) { (if x == 0 then false else true) }
function $refToBool(x:ref) returns ($ret:bool) { (if x == $null then false else true) }
function $boolToInt(x:bool) returns ($ret:int) { (if x == true then 1 else 0) }
function $cmpBool(x:bool, y:bool) returns ($ret:int);
function $cmpRef(x:ref, y:ref) returns ($ret:int);
function $cmpReal(x:real, y:real) returns ($ret:int) { (if x > y then 1 else (if x < y then -1 else 0)) }
function $cmpInt(x:int, y:int) returns ($ret:int) { (if x > y then 1 else (if x < y then -1 else 0)) }
function $bitOr(x:int, y:int) returns ($ret:int);
function $bitAnd(x:int, y:int) returns ($ret:int);
function $xorInt(x:int, y:int) returns ($ret:int);
function $shlInt(x:int, y:int) returns ($ret:int);
function $ushrInt(x:int, y:int) returns ($ret:int);
function $shrInt(x:int, y:int) returns ($ret:int);
function $realOp32241(x:int, y:int) returns ($ret:int);
function $realOp32086(x:int, y:int) returns ($ret:int);
function $realOp32179(x:int, y:int) returns ($ret:int);
function $realOp32117(x:int, y:int) returns ($ret:int);
axiom (forall t : javaType :: $heap[$null,$type] <: t);
procedure $new(obj_type:javaType) returns ($obj:ref);        ensures $obj != $null;    ensures $heap[$obj,$type] == obj_type;    ensures $heap[$obj,$alloc] == true;    requires $heap[$obj,$alloc] == false;

procedure java.lang.Object$java.lang.Object$clone$43($this:ref) returns ($other:ref);    ensures $heap[$other,$alloc] == true;        ensures $other != $null;    ensures $heap[$other,$type] == $heap[$this,$type];

procedure int$java.lang.String$compareTo$87($this:ref, $other:ref) returns ($return:int);    

procedure void$com.codahale.metrics.CachedGauge$$la$init$ra$$1889($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.CachedGauge$$la$init$ra$$1890($this:ref, $in_parameter__0:ref, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.lang.Object$$la$init$ra$$38($this:ref) returns ($exception:ref);    

procedure void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1901($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure long$java.util.concurrent.TimeUnit$toNanos$1926($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.Object$com.codahale.metrics.CachedGauge$getValue$1892($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.CachedGauge$shouldLoad$1893($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.CachedGauge$loadValue$1891($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Clock$getTick$1896($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$java.util.concurrent.atomic.AtomicLong$get$1903($this:ref) returns ($return:int, $exception:ref);    

procedure boolean$java.util.concurrent.atomic.AtomicLong$compareAndSet$1907($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Clock$$la$init$ra$$1895($this:ref) returns ($exception:ref);    

procedure long$com.codahale.metrics.Clock$getTime$1897($this:ref) returns ($return:int, $exception:ref);    

procedure long$java.lang.System$currentTimeMillis$2305() returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Clock$$la$clinit$ra$$1899() returns ($exception:ref);    modifies com.codahale.metrics.Clock$com.codahale.metrics.Clock$DEFAULT237;

procedure void$com.codahale.metrics.Clock$UserTimeClock$$la$init$ra$$2289($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Clock$CpuTimeClock$$la$init$ra$$2074($this:ref) returns ($exception:ref);    

procedure long$com.codahale.metrics.Clock$CpuTimeClock$getTick$2075($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$java.lang.management.ThreadMXBean$getCurrentThreadCpuTime$2089($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Clock$CpuTimeClock$$la$clinit$ra$$2076() returns ($exception:ref);    modifies java.lang.management.ThreadMXBean$com.codahale.metrics.Clock$CpuTimeClock$THREAD_MX_BEAN249;

procedure java.lang.management.ThreadMXBean$java.lang.management.ManagementFactory$getThreadMXBean$2108() returns ($return:ref, $exception:ref);    

procedure long$com.codahale.metrics.Clock$UserTimeClock$getTick$2290($this:ref) returns ($return:int, $exception:ref);    

procedure long$java.lang.System$nanoTime$2306() returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$forRegistry$2430($in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2551($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2431($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$$la$init$ra$$2440($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $heap;

procedure java.text.DateFormat$java.text.DateFormat$getDateTimeInstance$2526($in_parameter__0:int, $in_parameter__1:int, $in_parameter__2:ref) returns ($return:ref, $exception:ref);    

procedure void$java.text.DateFormat$setTimeZone$2533($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.ConsoleReporter$report$2432($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$java.util.Date$$la$init$ra$$2702($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure java.lang.String$java.text.DateFormat$format$2514($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438($this:ref, $in_parameter__0:ref, $in_parameter__1:int) returns ($exception:ref);    

procedure void$java.io.PrintStream$println$209($this:ref) returns ($exception:ref);    

procedure boolean$java.util.Map$isEmpty$1157($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.util.Set$java.util.SortedMap$entrySet$2630($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.Iterator$java.util.Set$iterator$236($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$java.util.Iterator$hasNext$1051($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.lang.Object$java.util.Iterator$next$1052($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$java.util.Map$Entry$getKey$2642($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$java.io.PrintStream$println$217($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.ConsoleReporter$printGauge$2435($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.ConsoleReporter$printCounter$2434($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure java.lang.Object$java.util.Map$Entry$getValue$2643($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ConsoleReporter$printHistogram$2436($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.ConsoleReporter$printMeter$2433($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.ConsoleReporter$printTimer$2437($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$java.io.PrintStream$flush$190($this:ref) returns ($exception:ref);    

procedure long$com.codahale.metrics.Meter$getCount$2636($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.Long$java.lang.Long$valueOf$878($in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure java.io.PrintStream$java.io.PrintStream$printf$220($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($return:ref, $exception:ref);    

procedure double$com.codahale.metrics.Meter$getMeanRate$2639($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.ScheduledReporter$convertRate$2448($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.Double$java.lang.Double$valueOf$1057($in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445($this:ref) returns ($return:ref, $exception:ref);    

procedure double$com.codahale.metrics.Meter$getOneMinuteRate$2640($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Meter$getFiveMinuteRate$2638($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Counter$getCount$2847($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.Object$com.codahale.metrics.Gauge$getValue$1894($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Histogram$getCount$2650($this:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Snapshot$getMin$3162($this:ref) returns ($return:int, $exception:ref);    

procedure long$com.codahale.metrics.Snapshot$getMax$3161($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$getMean$3163($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$getStdDev$3164($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$getMedian$3154($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$get75thPercentile$3155($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$get95thPercentile$3156($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$get98thPercentile$3157($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$get99thPercentile$3158($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$get999thPercentile$3159($this:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Timer$getCount$2658($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.Timer$getMeanRate$2661($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Timer$getOneMinuteRate$2662($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Timer$getFiveMinuteRate$2660($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Timer$getFifteenMinuteRate$2659($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.ScheduledReporter$convertDuration$2447($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.io.PrintStream$print$207($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$java.io.PrintStream$print$201($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2439($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref, $in_parameter__8:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5619($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.concurrent.ScheduledExecutorService$java.util.concurrent.Executors$newSingleThreadScheduledExecutor$5750($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure long$java.util.concurrent.TimeUnit$toSeconds$1929($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.String$com.codahale.metrics.ScheduledReporter$calculateRateUnit$2449($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$java.lang.Enum$toString$1942($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$java.lang.String$toLowerCase$119($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.ScheduledReporter$start$2441($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$1$$la$init$ra$$5615($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.concurrent.ScheduledFuture$java.util.concurrent.ScheduledExecutorService$scheduleAtFixedRate$2667($this:ref, $in_parameter__0:ref, $in_parameter__1:int, $in_parameter__2:int, $in_parameter__3:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$stop$2442($this:ref) returns ($exception:ref);    modifies $heap, java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;

procedure void$java.util.concurrent.ExecutorService$shutdown$2688($this:ref) returns ($exception:ref);    modifies $heap;

procedure boolean$java.util.concurrent.ExecutorService$awaitTermination$2692($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$report$2443($this:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2569($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2571($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2573($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2575($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2577($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$report$2444($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.String$java.lang.String$substring$108($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2542($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.Locale$java.util.Locale$getDefault$2458() returns ($return:ref, $exception:ref);    

procedure java.util.TimeZone$java.util.TimeZone$getDefault$2609() returns ($return:ref, $exception:ref);    

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$outputTo$2543($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$formattedFor$2544($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$withClock$2545($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$formattedFor$2546($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$convertRatesTo$2547($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$convertDurationsTo$2548($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$filter$2549($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.ConsoleReporter$com.codahale.metrics.ConsoleReporter$Builder$build$2550($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.MetricRegistry$name$2552($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure void$java.lang.StringBuilder$$la$init$ra$$2752($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$append$2554($in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure java.lang.String$java.lang.StringBuilder$toString$2791($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$com.codahale.metrics.MetricRegistry$name$2553($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$java.lang.Class$getName$458($this:ref) returns ($return:ref, $exception:ref);    

procedure boolean$java.lang.String$isEmpty$71($this:ref) returns ($return:int, $exception:ref);    

procedure int$java.lang.StringBuilder$length$2838($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2765($this:ref, $in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2757($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$$la$init$ra$$2555($this:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$buildMap$2556($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.util.concurrent.CopyOnWriteArrayList$$la$init$ra$$4930($this:ref) returns ($exception:ref);    

procedure void$java.util.concurrent.ConcurrentHashMap$$la$init$ra$$5501($this:ref) returns ($exception:ref);    

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$register$2557($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.MetricRegistry$registerAll$2584($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure java.lang.Object$java.util.concurrent.ConcurrentMap$putIfAbsent$2748($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$onMetricAdded$2580($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.lang.IllegalArgumentException$$la$init$ra$$919($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$registerAll$2558($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure com.codahale.metrics.Counter$com.codahale.metrics.MetricRegistry$counter$2559($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure com.codahale.metrics.Histogram$com.codahale.metrics.MetricRegistry$histogram$2560($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure com.codahale.metrics.Meter$com.codahale.metrics.MetricRegistry$meter$2561($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure com.codahale.metrics.Timer$com.codahale.metrics.MetricRegistry$timer$2562($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure boolean$com.codahale.metrics.MetricRegistry$remove$2563($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.lang.Object$java.util.Map$remove$1162($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$onMetricRemoved$2582($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$removeMatching$2564($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.Set$java.util.Map$entrySet$1167($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricFilter$matches$2620($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$addListener$2565($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure boolean$java.util.List$add$158($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$notifyListenerOfAddedMetric$2581($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistry$removeListener$2566($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure boolean$java.util.List$remove$159($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.util.SortedSet$com.codahale.metrics.MetricRegistry$getNames$2567($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.Set$java.util.Map$keySet$1165($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$java.util.TreeSet$$la$init$ra$$5380($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure java.util.SortedSet$java.util.Collections$unmodifiableSortedSet$4758($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2568($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2570($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2572($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2574($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2576($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$java.util.Map$get$1160($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$isInstance$2865($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$newMetric$2864($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$java.util.TreeMap$$la$init$ra$$5411($this:ref) returns ($exception:ref);    

procedure boolean$java.lang.Class$isInstance$451($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure java.lang.Object$java.util.TreeMap$put$5429($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure java.util.SortedMap$java.util.Collections$unmodifiableSortedMap$4761($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.util.Iterator$java.util.List$iterator$155($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onGaugeAdded$2848($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onCounterAdded$2850($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onHistogramAdded$2852($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onMeterAdded$2854($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onTimerAdded$2856($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.Class$java.lang.Object$getClass$40($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2756($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$notifyListenerOfRemovedMetric$2583($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onGaugeRemoved$2849($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onCounterRemoved$2851($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onHistogramRemoved$2853($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onMeterRemoved$2855($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$onTimerRemoved$2857($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.Map$com.codahale.metrics.MetricSet$getMetrics$2680($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.util.Map$com.codahale.metrics.MetricRegistry$getMetrics$2585($this:ref) returns ($return:ref, $exception:ref);    

procedure java.util.Map$java.util.Collections$unmodifiableMap$4760($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.MetricFilter$$la$clinit$ra$$2621() returns ($exception:ref);    modifies com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;

procedure void$com.codahale.metrics.MetricFilter$1$$la$init$ra$$5359($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Meter$$la$init$ra$$2631($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Meter$$la$init$ra$$2632($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$oneMinuteEWMA$3331() returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fiveMinuteEWMA$3332() returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fifteenMinuteEWMA$3333() returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Meter$mark$2633($this:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Meter$mark$2634($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.Meter$tickIfNecessary$2635($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.LongAdder$add$3341($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.EWMA$update$3335($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.EWMA$tick$3336($this:ref) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.LongAdder$sum$3344($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.EWMA$getRate$3337($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Meter$$la$clinit$ra$$2641() returns ($exception:ref);    modifies long$com.codahale.metrics.Meter$TICK_INTERVAL0;

procedure void$com.codahale.metrics.Histogram$$la$init$ra$$2647($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Histogram$update$2648($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Histogram$update$2649($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.LongAdder$increment$3342($this:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Reservoir$update$3170($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.Reservoir$getSnapshot$3171($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Timer$$la$init$ra$$2652($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4116($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Timer$$la$init$ra$$2653($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Timer$$la$init$ra$$2654($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Timer$update$2655($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Timer$update$2664($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure java.lang.Object$com.codahale.metrics.Timer$time$2656($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure java.lang.Object$java.util.concurrent.Callable$call$3172($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Timer$Context$com.codahale.metrics.Timer$time$2657($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Timer$Context$$la$init$ra$$3176($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Counter$$la$init$ra$$2842($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Counter$inc$2843($this:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.Counter$inc$2844($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Counter$dec$2845($this:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.Counter$dec$2846($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.MetricRegistry$MetricBuilder$$la$clinit$ra$$2866() returns ($exception:ref);    modifies com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$TIMERS381, com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$HISTOGRAMS379, com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$METERS380, com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$COUNTERS378;

procedure void$com.codahale.metrics.MetricRegistry$MetricBuilder$1$$la$init$ra$$5361($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$MetricBuilder$2$$la$init$ra$$5365($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$MetricBuilder$3$$la$init$ra$$5369($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistry$MetricBuilder$4$$la$init$ra$$5373($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Snapshot$$la$init$ra$$3150($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $arrSizeHeap, $intArrHeap;

procedure java.lang.Object$lp$$rp$$java.util.Collection$toArray$573($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$java.lang.Long$longValue$885($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.util.Arrays$sort$5817($in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Snapshot$$la$init$ra$$3151($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure long$lp$$rp$$java.util.Arrays$copyOf$5900($in_parameter__0:ref, $in_parameter__1:int) returns ($return:ref, $exception:ref);    

procedure double$com.codahale.metrics.Snapshot$getValue$3152($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2769($this:ref, $in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure double$java.lang.Math$floor$4057($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure int$com.codahale.metrics.Snapshot$size$3153($this:ref) returns ($return:int, $exception:ref);    

procedure long$lp$$rp$$com.codahale.metrics.Snapshot$getValues$3160($this:ref) returns ($return:ref, $exception:ref);    

procedure double$java.lang.Math$sqrt$4053($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Snapshot$dump$3165($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $refArrHeap, $arrSizeHeap;

procedure void$java.io.OutputStreamWriter$$la$init$ra$$2997($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$java.io.PrintWriter$$la$init$ra$$249($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure java.io.PrintWriter$java.io.PrintWriter$printf$289($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure void$java.io.PrintWriter$close$260($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Snapshot$$la$clinit$ra$$3166() returns ($exception:ref);    modifies java.nio.charset.Charset$com.codahale.metrics.Snapshot$UTF_8448;

procedure java.nio.charset.Charset$java.nio.charset.Charset$forName$3016($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.Timer$Context$$la$init$ra$$3173($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Timer$Context$stop$3174($this:ref) returns ($return:int, $exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.Timer$Context$close$3175($this:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.EWMA$$la$init$ra$$3334($this:ref, $in_parameter__0:int, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.LongAdder$sumThenReset$3346($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.EWMA$$la$clinit$ra$$3338() returns ($exception:ref);    modifies double$com.codahale.metrics.EWMA$M1_ALPHA0, double$com.codahale.metrics.EWMA$M5_ALPHA0, double$com.codahale.metrics.EWMA$M15_ALPHA0;

procedure double$java.lang.Math$exp$4050($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure long$com.codahale.metrics.LongAdder$fn$3339($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$$la$init$ra$$3400($this:ref) returns ($exception:ref);    

procedure boolean$com.codahale.metrics.Striped64$casBase$3401($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure java.lang.Object$java.lang.ThreadLocal$get$3529($this:ref) returns ($return:ref, $exception:ref);    

procedure boolean$com.codahale.metrics.Striped64$Cell$cas$3522($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$retryUpdate$3404($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:int) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.LongAdder$decrement$3343($this:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.LongAdder$reset$3345($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Striped64$internalReset$3405($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.LongAdder$toString$3347($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$java.lang.Long$toString$871($in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure long$com.codahale.metrics.LongAdder$longValue$3348($this:ref) returns ($return:int, $exception:ref);    

procedure int$com.codahale.metrics.LongAdder$intValue$3349($this:ref) returns ($return:int, $exception:ref);    

procedure float$com.codahale.metrics.LongAdder$floatValue$3350($this:ref) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.LongAdder$doubleValue$3351($this:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.LongAdder$writeObject$3352($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$java.io.ObjectOutputStream$defaultWriteObject$387($this:ref) returns ($exception:ref);    

procedure void$java.io.ObjectOutputStream$writeLong$408($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure void$com.codahale.metrics.LongAdder$readObject$3353($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.io.ObjectInputStream$defaultReadObject$307($this:ref) returns ($exception:ref);    

procedure long$java.io.ObjectInputStream$readLong$327($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.lang.Number$$la$init$ra$$908($this:ref) returns ($exception:ref);    

procedure boolean$sun.misc.Unsafe$compareAndSwapLong$2046($this:ref, $in_parameter__0:ref, $in_parameter__1:int, $in_parameter__2:int, $in_parameter__3:int) returns ($return:int, $exception:ref);    

procedure boolean$com.codahale.metrics.Striped64$casBusy$3402($this:ref) returns ($return:int, $exception:ref);    

procedure boolean$sun.misc.Unsafe$compareAndSwapInt$2045($this:ref, $in_parameter__0:ref, $in_parameter__1:int, $in_parameter__2:int, $in_parameter__3:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$Cell$$la$init$ra$$3521($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Striped64$fn$3403($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    modifies $heap;

procedure sun.misc.Unsafe$com.codahale.metrics.Striped64$getUnsafe$3406() returns ($return:ref, $exception:ref);    

procedure sun.misc.Unsafe$sun.misc.Unsafe$getUnsafe$1965() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$1$$la$init$ra$$5940($this:ref) returns ($exception:ref);    

procedure java.lang.Object$java.security.AccessController$doPrivileged$5999($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Throwable$java.security.PrivilegedActionException$getCause$6009($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.lang.RuntimeException$$la$init$ra$$924($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure sun.misc.Unsafe$com.codahale.metrics.Striped64$access$000$3407() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$$la$clinit$ra$$3408() returns ($exception:ref);    modifies long$com.codahale.metrics.Striped64$baseOffset0, long$com.codahale.metrics.Striped64$busyOffset0, sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472, com.codahale.metrics.Striped64$ThreadHashCode$com.codahale.metrics.Striped64$threadHashCode470, int$com.codahale.metrics.Striped64$NCPU0;

procedure void$com.codahale.metrics.Striped64$ThreadHashCode$$la$init$ra$$3518($this:ref) returns ($exception:ref);    

procedure java.lang.Runtime$java.lang.Runtime$getRuntime$5966() returns ($return:ref, $exception:ref);    

procedure int$java.lang.Runtime$availableProcessors$5979($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.reflect.Field$java.lang.Class$getDeclaredField$499($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure long$sun.misc.Unsafe$objectFieldOffset$2028($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure void$java.lang.Error$$la$init$ra$$9($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$java.lang.ThreadLocal$$la$init$ra$$3528($this:ref) returns ($exception:ref);    

procedure com.codahale.metrics.Striped64$HashCode$com.codahale.metrics.Striped64$ThreadHashCode$initialValue$3519($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Striped64$HashCode$$la$init$ra$$3524($this:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.Striped64$ThreadHashCode$initialValue$3520($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Striped64$Cell$$la$clinit$ra$$3523() returns ($exception:ref);    modifies sun.misc.Unsafe$com.codahale.metrics.Striped64$Cell$UNSAFE482, long$com.codahale.metrics.Striped64$Cell$valueOffset0;

procedure int$java.util.Random$nextInt$4105($this:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.Striped64$HashCode$$la$clinit$ra$$3525() returns ($exception:ref);    modifies java.util.Random$com.codahale.metrics.Striped64$HashCode$rng483;

procedure void$java.util.Random$$la$init$ra$$4098($this:ref) returns ($exception:ref);    

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$forRegistry$3539($in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3558($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.CsvReporter$$la$init$ra$$3540($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.CsvReporter$report$3541($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$reportGauge$3546($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$reportCounter$3545($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$reportHistogram$3544($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$reportMeter$3543($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$reportTimer$3542($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.CsvReporter$report$3547($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $refArrHeap, $arrSizeHeap;

procedure java.lang.String$com.codahale.metrics.CsvReporter$sanitize$3548($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$java.io.File$$la$init$ra$$3054($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure boolean$java.io.File$exists$3070($this:ref) returns ($return:int, $exception:ref);    

procedure boolean$java.io.File$createNewFile$3076($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.io.FileOutputStream$$la$init$ra$$3742($this:ref, $in_parameter__0:ref, $in_parameter__1:int) returns ($exception:ref);    

procedure void$java.io.PrintWriter$println$287($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure java.lang.String$java.lang.String$format$127($in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($return:ref, $exception:ref);    

procedure java.io.PrintWriter$java.io.PrintWriter$printf$290($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($return:ref, $exception:ref);    

procedure void$org.slf4j.Logger$warn$6056($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.CsvReporter$$la$init$ra$$3549($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.CsvReporter$$la$clinit$ra$$3550() returns ($exception:ref);    modifies java.nio.charset.Charset$com.codahale.metrics.CsvReporter$UTF_8486, org.slf4j.Logger$com.codahale.metrics.CsvReporter$LOGGER485;

procedure org.slf4j.Logger$org.slf4j.LoggerFactory$getLogger$6057($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3551($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$formatFor$3552($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$convertRatesTo$3553($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$convertDurationsTo$3554($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$withClock$3555($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$filter$3556($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.CsvReporter$com.codahale.metrics.CsvReporter$Builder$build$3557($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.DerivativeGauge$$la$init$ra$$4038($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.DerivativeGauge$getValue$4039($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.DerivativeGauge$transform$4040($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4117($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4118($this:ref, $in_parameter__0:int, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.util.concurrent.ConcurrentSkipListMap$$la$init$ra$$4155($this:ref) returns ($exception:ref);    

procedure void$java.util.concurrent.locks.ReentrantReadWriteLock$$la$init$ra$$4218($this:ref) returns ($exception:ref);    

procedure long$com.codahale.metrics.ExponentiallyDecayingReservoir$currentTimeInSeconds$4124($this:ref) returns ($return:int, $exception:ref);    

procedure int$com.codahale.metrics.ExponentiallyDecayingReservoir$size$4119($this:ref) returns ($return:int, $exception:ref);    

procedure long$java.lang.Math$min$4074($in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$update$4120($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$update$4121($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescaleIfNeeded$4122($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRegularUsage$4129($this:ref) returns ($exception:ref);    

procedure double$com.codahale.metrics.ExponentiallyDecayingReservoir$weight$4125($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$current$4345() returns ($return:ref, $exception:ref);    

procedure double$java.util.Random$nextDouble$4110($this:ref) returns ($return:int, $exception:ref);    

procedure long$java.util.concurrent.atomic.AtomicLong$incrementAndGet$1912($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$put$4165($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$firstKey$4183($this:ref) returns ($return:ref, $exception:ref);    

procedure double$java.lang.Double$doubleValue$1071($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$putIfAbsent$4178($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$remove$4166($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescale$4126($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.ExponentiallyDecayingReservoir$getSnapshot$4123($this:ref) returns ($return:ref, $exception:ref);    modifies $heap, $arrSizeHeap, $intArrHeap;

procedure java.util.Collection$java.util.concurrent.ConcurrentSkipListMap$values$4173($this:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRescale$4128($this:ref) returns ($exception:ref);    

procedure java.util.NavigableSet$java.util.concurrent.ConcurrentSkipListMap$keySet$4171($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.util.ArrayList$$la$init$ra$$4276($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure java.util.Iterator$java.util.ArrayList$iterator$4313($this:ref) returns ($return:ref, $exception:ref);    

procedure int$java.util.concurrent.ConcurrentSkipListMap$size$4168($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.util.concurrent.atomic.AtomicLong$set$1904($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRescale$4127($this:ref) returns ($exception:ref);    

procedure java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$java.util.concurrent.locks.ReentrantReadWriteLock$writeLock$4220($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$unlock$4339($this:ref) returns ($exception:ref);    

procedure void$java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$lock$4335($this:ref) returns ($exception:ref);    

procedure java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$java.util.concurrent.locks.ReentrantReadWriteLock$readLock$4221($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$lock$4355($this:ref) returns ($exception:ref);    

procedure void$java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$unlock$4359($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$clinit$ra$$4131() returns ($exception:ref);    modifies long$com.codahale.metrics.ExponentiallyDecayingReservoir$RESCALE_THRESHOLD0;

procedure void$com.codahale.metrics.ThreadLocalRandom$$la$init$ra$$4344($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ThreadLocalRandom$setSeed$4346($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure void$java.lang.UnsupportedOperationException$$la$init$ra$$6025($this:ref) returns ($exception:ref);    

procedure int$com.codahale.metrics.ThreadLocalRandom$next$4347($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    modifies $heap;

procedure int$com.codahale.metrics.ThreadLocalRandom$nextInt$4348($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$java.lang.IllegalArgumentException$$la$init$ra$$918($this:ref) returns ($exception:ref);    

procedure int$java.util.Random$nextInt$4106($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure long$com.codahale.metrics.ThreadLocalRandom$nextLong$4349($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.ThreadLocalRandom$nextLong$4350($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.ThreadLocalRandom$nextDouble$4351($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure double$com.codahale.metrics.ThreadLocalRandom$nextDouble$4352($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.ThreadLocalRandom$$la$clinit$ra$$4353() returns ($exception:ref);    modifies java.lang.ThreadLocal$com.codahale.metrics.ThreadLocalRandom$localRandom573;

procedure void$com.codahale.metrics.ThreadLocalRandom$1$$la$init$ra$$6022($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.JmxAttributeGauge$$la$init$ra$$4583($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure javax.management.MBeanServer$java.lang.management.ManagementFactory$getPlatformMBeanServer$2115() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JmxAttributeGauge$$la$init$ra$$4584($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.JmxAttributeGauge$getValue$4585($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$javax.management.MBeanServer$getAttribute$2157($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$forRegistry$4692($in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap, $stringSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4722($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $stringSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$$la$init$ra$$4693($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4712($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$start$4694($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$stop$4695($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$unregisterAll$4711($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$$la$init$ra$$4696($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref) returns ($exception:ref);    modifies $heap;

procedure org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$$la$clinit$ra$$4698() returns ($exception:ref);    modifies org.slf4j.Logger$com.codahale.metrics.JmxReporter$LOGGER616;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4699($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.util.concurrent.CopyOnWriteArraySet$$la$init$ra$$4884($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onGaugeAdded$4700($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4841($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$java.util.Set$add$239($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$org.slf4j.Logger$debug$6058($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$org.slf4j.Logger$warn$6059($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onGaugeRemoved$4701($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$javax.management.MBeanServer$unregisterMBean$2151($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure boolean$java.util.Set$remove$240($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onCounterAdded$4702($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4837($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onCounterRemoved$4703($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onHistogramAdded$4704($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4857($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onHistogramRemoved$4705($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onMeterAdded$4706($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateFor$4725($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4909($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onMeterRemoved$4707($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onTimerAdded$4708($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationFor$4724($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4883($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxListener$onTimerRemoved$4709($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$javax.management.ObjectName$$la$init$ra$$2258($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    

procedure java.lang.String$javax.management.ObjectName$quote$2278($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$org.slf4j.Logger$warn$6060($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$java.lang.RuntimeException$$la$init$ra$$925($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$java.util.Set$clear$245($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4713($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap, $stringSizeHeap;

procedure java.util.Map$java.util.Collections$emptyMap$4783() returns ($return:ref, $exception:ref);    

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$registerWith$4714($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$convertRatesTo$4715($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$convertDurationsTo$4716($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$filter$4717($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$inDomain$4718($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits$4719($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$specificRateUnits$4720($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.JmxReporter$com.codahale.metrics.JmxReporter$Builder$build$4721($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$MetricTimeUnits$$la$init$ra$$4723($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref);    modifies $heap;

procedure boolean$java.util.Map$containsKey$1158($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$AbstractBean$$la$init$ra$$4726($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure javax.management.ObjectName$com.codahale.metrics.JmxReporter$AbstractBean$objectName$4727($this:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4835($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.JmxReporter$JmxCounter$getCount$4836($this:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4839($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.JmxReporter$JmxGauge$getValue$4840($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4843($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxHistogram$objectName$4844($this:ref) returns ($return:ref, $exception:ref);    

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get50thPercentile$4845($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.JmxReporter$JmxHistogram$getCount$4846($this:ref) returns ($return:int, $exception:ref);    

procedure long$com.codahale.metrics.JmxReporter$JmxHistogram$getMin$4847($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.JmxReporter$JmxHistogram$getMax$4848($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$getMean$4849($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$getStdDev$4850($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get75thPercentile$4851($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get95thPercentile$4852($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get98thPercentile$4853($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get99thPercentile$4854($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxHistogram$get999thPercentile$4855($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$lp$$rp$$com.codahale.metrics.JmxReporter$JmxHistogram$values$4856($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4870($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get50thPercentile$4871($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$getMin$4872($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$getMax$4873($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$getMean$4874($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$getStdDev$4875($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get75thPercentile$4876($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get95thPercentile$4877($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get98thPercentile$4878($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get99thPercentile$4879($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxTimer$get999thPercentile$4880($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$lp$$rp$$com.codahale.metrics.JmxReporter$JmxTimer$values$4881($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.JmxReporter$JmxTimer$getDurationUnit$4882($this:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4901($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$calculateRateUnit$4908($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure long$com.codahale.metrics.JmxReporter$JmxMeter$getCount$4902($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.Metered$getCount$2681($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxMeter$getMeanRate$4903($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Metered$getMeanRate$2684($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxMeter$getOneMinuteRate$4904($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Metered$getOneMinuteRate$2685($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxMeter$getFiveMinuteRate$4905($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Metered$getFiveMinuteRate$2683($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.JmxReporter$JmxMeter$getFifteenMinuteRate$4906($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.Metered$getFifteenMinuteRate$2682($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$getRateUnit$4907($this:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JvmAttributeGaugeSet$1$$la$init$ra$$4974($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$1$getValue$4975($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.String$java.lang.management.RuntimeMXBean$getName$2193($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$1$getValue$4976($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JvmAttributeGaugeSet$$la$init$ra$$4977($this:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.management.RuntimeMXBean$java.lang.management.ManagementFactory$getRuntimeMXBean$2109() returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.JvmAttributeGaugeSet$$la$init$ra$$4978($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.Map$com.codahale.metrics.JvmAttributeGaugeSet$getMetrics$4979($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$java.util.HashMap$$la$init$ra$$4989($this:ref) returns ($exception:ref);    

procedure java.lang.Object$java.util.Map$put$1161($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JvmAttributeGaugeSet$2$$la$init$ra$$4981($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.JvmAttributeGaugeSet$3$$la$init$ra$$4984($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$2$getValue$4982($this:ref) returns ($return:ref, $exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure java.lang.String$java.lang.management.RuntimeMXBean$getVmVendor$2195($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.String$java.lang.management.RuntimeMXBean$getVmName$2194($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.String$java.lang.management.RuntimeMXBean$getVmVersion$2196($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.String$java.lang.management.RuntimeMXBean$getSpecVersion$2199($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$2$getValue$4983($this:ref) returns ($return:ref, $exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure java.lang.Long$com.codahale.metrics.JvmAttributeGaugeSet$3$getValue$4985($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure long$java.lang.management.RuntimeMXBean$getUptime$2206($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$3$getValue$4986($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricFilter$1$matches$5360($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Counter$com.codahale.metrics.MetricRegistry$MetricBuilder$1$newMetric$5362($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$1$isInstance$5363($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$1$newMetric$5364($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Histogram$com.codahale.metrics.MetricRegistry$MetricBuilder$2$newMetric$5366($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$2$isInstance$5367($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$2$newMetric$5368($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Meter$com.codahale.metrics.MetricRegistry$MetricBuilder$3$newMetric$5370($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$3$isInstance$5371($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$3$newMetric$5372($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Timer$com.codahale.metrics.MetricRegistry$MetricBuilder$4$newMetric$5374($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$4$isInstance$5375($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$4$newMetric$5376($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.MetricRegistryListener$Base$$la$init$ra$$5596($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onGaugeAdded$5597($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onGaugeRemoved$5598($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onCounterAdded$5599($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onCounterRemoved$5600($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onHistogramAdded$5601($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onHistogramRemoved$5602($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onMeterAdded$5603($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onMeterRemoved$5604($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onTimerAdded$5605($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.MetricRegistryListener$Base$onTimerRemoved$5606($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure com.codahale.metrics.RatioGauge$Ratio$com.codahale.metrics.RatioGauge$Ratio$of$5607($in_parameter__0:int, $in_parameter__1:int) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.RatioGauge$Ratio$$la$init$ra$$5608($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref);    modifies $heap;

procedure double$com.codahale.metrics.RatioGauge$Ratio$getValue$5609($this:ref) returns ($return:int, $exception:ref);    

procedure boolean$java.lang.Double$isNaN$1059($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure boolean$java.lang.Double$isInfinite$1060($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure java.lang.String$com.codahale.metrics.RatioGauge$Ratio$toString$5610($this:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.RatioGauge$$la$init$ra$$5611($this:ref) returns ($exception:ref);    

procedure java.lang.Double$com.codahale.metrics.RatioGauge$getValue$5613($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.RatioGauge$Ratio$com.codahale.metrics.RatioGauge$getRatio$5612($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.RatioGauge$getValue$5614($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$1$run$5616($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5617($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.util.concurrent.atomic.AtomicInteger$$la$init$ra$$5300($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure java.lang.SecurityManager$java.lang.System$getSecurityManager$2304() returns ($return:ref, $exception:ref);    

procedure java.lang.ThreadGroup$java.lang.SecurityManager$getThreadGroup$1488($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Thread$java.lang.Thread$currentThread$1785() returns ($return:ref, $exception:ref);    

procedure java.lang.ThreadGroup$java.lang.Thread$getThreadGroup$1819($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Thread$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$newThread$5618($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure int$java.util.concurrent.atomic.AtomicInteger$getAndIncrement$5308($this:ref) returns ($return:int, $exception:ref);    

procedure java.lang.StringBuilder$java.lang.StringBuilder$append$2766($this:ref, $in_parameter__0:int) returns ($return:ref, $exception:ref);    

procedure void$java.lang.Thread$$la$init$ra$$1800($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:int) returns ($exception:ref);    

procedure void$java.lang.Thread$setDaemon$1827($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure int$java.lang.Thread$getPriority$1816($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.lang.Thread$setPriority$1815($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure void$com.codahale.metrics.SharedMetricRegistries$$la$init$ra$$5778($this:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.SharedMetricRegistries$clear$5779() returns ($exception:ref);    modifies $heap;

procedure void$java.util.Map$clear$1164($this:ref) returns ($exception:ref);    modifies $heap;

procedure java.util.Set$com.codahale.metrics.SharedMetricRegistries$names$5780() returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SharedMetricRegistries$remove$5781($in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure com.codahale.metrics.MetricRegistry$com.codahale.metrics.SharedMetricRegistries$add$5782($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.MetricRegistry$com.codahale.metrics.SharedMetricRegistries$getOrCreate$5783($in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SharedMetricRegistries$$la$clinit$ra$$5784() returns ($exception:ref);    modifies java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$forRegistry$5785($in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5802($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5786($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Slf4jReporter$report$5787($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref);    modifies $refArrHeap, $heap, $arrSizeHeap;

procedure void$com.codahale.metrics.Slf4jReporter$logGauge$5792($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Slf4jReporter$logCounter$5791($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Slf4jReporter$logHistogram$5790($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Slf4jReporter$logMeter$5789($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure void$com.codahale.metrics.Slf4jReporter$logTimer$5788($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap, $refArrHeap, $arrSizeHeap;

procedure java.lang.String$com.codahale.metrics.Slf4jReporter$getRateUnit$5793($this:ref) returns ($return:ref, $exception:ref);    

procedure void$org.slf4j.Logger$info$6061($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    

procedure void$org.slf4j.Logger$info$6062($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref);    

procedure void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5794($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5795($this:ref, $in_parameter__0:ref) returns ($exception:ref);    modifies $heap;

procedure org.slf4j.Logger$org.slf4j.LoggerFactory$getLogger$6063($in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$outputTo$5796($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$markWith$5797($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$convertRatesTo$5798($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$convertDurationsTo$5799($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$filter$5800($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Slf4jReporter$com.codahale.metrics.Slf4jReporter$Builder$build$5801($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SlidingTimeWindowReservoir$$la$init$ra$$5803($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SlidingTimeWindowReservoir$$la$init$ra$$5804($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref);    modifies $heap;

procedure void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1902($this:ref) returns ($exception:ref);    

procedure int$com.codahale.metrics.SlidingTimeWindowReservoir$size$5805($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SlidingTimeWindowReservoir$trim$5809($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.SlidingTimeWindowReservoir$update$5806($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure long$com.codahale.metrics.SlidingTimeWindowReservoir$getTick$5808($this:ref) returns ($return:int, $exception:ref);    modifies $heap;

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.SlidingTimeWindowReservoir$getSnapshot$5807($this:ref) returns ($return:ref, $exception:ref);    modifies $heap, $arrSizeHeap, $intArrHeap;

procedure java.util.concurrent.ConcurrentNavigableMap$java.util.concurrent.ConcurrentSkipListMap$headMap$4189($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$com.codahale.metrics.SlidingWindowReservoir$$la$init$ra$$5810($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $arrSizeHeap;

procedure int$com.codahale.metrics.SlidingWindowReservoir$size$5811($this:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.SlidingWindowReservoir$update$5812($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap, $intArrHeap;

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.SlidingWindowReservoir$getSnapshot$5813($this:ref) returns ($return:ref, $exception:ref);    modifies $heap, $arrSizeHeap, $intArrHeap;

procedure sun.misc.Unsafe$com.codahale.metrics.Striped64$1$run$5941($this:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.reflect.Field$lp$$rp$$java.lang.Class$getDeclaredFields$496($this:ref) returns ($return:ref, $exception:ref);    

procedure void$java.lang.reflect.AccessibleObject$setAccessible$1540($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure java.lang.Object$java.lang.reflect.Field$get$1371($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure java.lang.Object$java.lang.Class$cast$546($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref);    

procedure void$java.lang.NoSuchFieldError$$la$init$ra$$1776($this:ref, $in_parameter__0:ref) returns ($exception:ref);    

procedure java.lang.Object$com.codahale.metrics.Striped64$1$run$5942($this:ref) returns ($return:ref, $exception:ref);    

procedure com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$1$initialValue$6023($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure java.lang.Object$com.codahale.metrics.ThreadLocalRandom$1$initialValue$6024($this:ref) returns ($return:ref, $exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.UniformReservoir$$la$init$ra$$6029($this:ref) returns ($exception:ref);    modifies $heap;

procedure void$com.codahale.metrics.UniformReservoir$$la$init$ra$$6030($this:ref, $in_parameter__0:int) returns ($exception:ref);    modifies $heap;

procedure void$java.util.concurrent.atomic.AtomicLongArray$$la$init$ra$$6037($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure int$java.util.concurrent.atomic.AtomicLongArray$length$6039($this:ref) returns ($return:int, $exception:ref);    

procedure void$java.util.concurrent.atomic.AtomicLongArray$set$6042($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref);    

procedure int$com.codahale.metrics.UniformReservoir$size$6031($this:ref) returns ($return:int, $exception:ref);    

procedure void$com.codahale.metrics.UniformReservoir$update$6032($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure long$com.codahale.metrics.UniformReservoir$nextLong$6033($in_parameter__0:int) returns ($return:int, $exception:ref);    

procedure long$java.util.Random$nextLong$4107($this:ref) returns ($return:int, $exception:ref);    

procedure com.codahale.metrics.Snapshot$com.codahale.metrics.UniformReservoir$getSnapshot$6034($this:ref) returns ($return:ref, $exception:ref);    modifies $heap, $arrSizeHeap, $intArrHeap;

procedure void$java.util.ArrayList$$la$init$ra$$4274($this:ref, $in_parameter__0:int) returns ($exception:ref);    

procedure long$java.util.concurrent.atomic.AtomicLongArray$get$6040($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref);    

implementation void$com.codahale.metrics.CachedGauge$$la$init$ra$$1889($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref){
    
var r14 : ref;    
var l03 : int;    
var $r22 : ref;    
var r01 : ref;
    assume { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r01 := $this;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    l03 := $in_parameter__0;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r14 := $in_parameter__1;
    assert { :sourceloc "CachedGauge.java",25,-1,-1,-1 } true;
    call $r22, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",25,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CachedGauge$$la$init$ra$$1890(r01, $r22, l03, r14);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",26,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CachedGauge$$la$init$ra$$1890($this:ref, $in_parameter__0:ref, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r05 : ref;    
var r28 : ref;    
var $l110 : int;    
var l09 : int;    
var r16 : ref;    
var $r37 : ref;
    assume { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r05 := $this;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r16 := $in_parameter__0;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    l09 := $in_parameter__1;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r28 := $in_parameter__2;
    assert { :sourceloc "CachedGauge.java",35,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r05);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",36,-1,-1,-1 } true;
    $heap := $heap[r05,com.codahale.metrics.Clock$com.codahale.metrics.CachedGauge$clock234 := r16];
    assert { :sourceloc "CachedGauge.java",37,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.atomic.AtomicLong);
    $r37 := $fakelocal_0;
    assert { :sourceloc "CachedGauge.java",37,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1901($r37, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",37,-1,-1,-1 } true;
    $heap := $heap[r05,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.CachedGauge$reloadAt235 := $r37];
    assert { :sourceloc "CachedGauge.java",38,-1,-1,-1 } true;
    assert { :sourceloc "CachedGauge.java",38,-1,-1,-1 } r28 != $null;
    call $l110, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r28, l09);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",38,-1,-1,-1 } true;
    $heap := $heap[r05,long$com.codahale.metrics.CachedGauge$timeoutNS0 := $l110];
    assert { :sourceloc "CachedGauge.java",39,-1,-1,-1 } true;
    return;
}


implementation java.lang.Object$com.codahale.metrics.CachedGauge$getValue$1892($this:ref) returns ($return:ref, $exception:ref){
    
var $z012 : int;    
var $r214 : ref;    
var $r113 : ref;    
var r011 : ref;
    assume { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r011 := $this;
    assert { :sourceloc "CachedGauge.java",50,-1,-1,-1 } true;
    call $z012, $exception := boolean$com.codahale.metrics.CachedGauge$shouldLoad$1893(r011);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",50,-1,-1,-1 } true;
    if ($z012 == 0) {
        assert { :sourceloc "CachedGauge.java",50,-1,-1,-1 } { :comment "thenblock" } true;
        goto block1;
    } else {
        assert { :sourceloc "CachedGauge.java",50,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CachedGauge.java",51,-1,-1,-1 } true;
    call $r214, $exception := java.lang.Object$com.codahale.metrics.CachedGauge$loadValue$1891(r011);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",51,-1,-1,-1 } true;
    $heap := $heap[r011,java.lang.Object$com.codahale.metrics.CachedGauge$value236 := $r214];
  block1:
    assert { :sourceloc "CachedGauge.java",53,-1,-1,-1 } true;
    $r113 := $heap[r011,java.lang.Object$com.codahale.metrics.CachedGauge$value236];
    assert { :sourceloc "CachedGauge.java",53,-1,-1,-1 } true;
    $return := $r113;
    return;
}


implementation boolean$com.codahale.metrics.CachedGauge$shouldLoad$1893($this:ref) returns ($return:int, $exception:ref){
    
var $b222 : int;    
var $l323 : int;    
var r015 : ref;    
var $r219 : ref;    
var $r116 : ref;    
var $l424 : int;    
var $z026 : int;    
var $r325 : ref;    
var l121 : int;    
var l018 : int;
    assume { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "CachedGauge.java",-1,-1,-1,-1 } true;
    r015 := $this;
  block2:
    assert { :sourceloc "CachedGauge.java",58,-1,-1,-1 } true;
    $r116 := $heap[r015,com.codahale.metrics.Clock$com.codahale.metrics.CachedGauge$clock234];
    assert { :sourceloc "CachedGauge.java",58,-1,-1,-1 } true;
    assert { :sourceloc "CachedGauge.java",58,-1,-1,-1 } $r116 != $null;
    call l018, $exception := long$com.codahale.metrics.Clock$getTick$1896($r116);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",59,-1,-1,-1 } true;
    $r219 := $heap[r015,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.CachedGauge$reloadAt235];
    assert { :sourceloc "CachedGauge.java",59,-1,-1,-1 } true;
    assert { :sourceloc "CachedGauge.java",59,-1,-1,-1 } $r219 != $null;
    call l121, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r219);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",60,-1,-1,-1 } true;
    $b222 := $cmpInt(l121, l018);
    assert { :sourceloc "CachedGauge.java",60,-1,-1,-1 } true;
    if ($b222 <= 0) {
        assert { :sourceloc "CachedGauge.java",60,-1,-1,-1 } { :comment "thenblock" } true;
        goto block3;
    } else {
        assert { :sourceloc "CachedGauge.java",60,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CachedGauge.java",61,-1,-1,-1 } true;
    $return := 0;
    return;
  block3:
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } true;
    $r325 := $heap[r015,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.CachedGauge$reloadAt235];
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } true;
    $l323 := $heap[r015,long$com.codahale.metrics.CachedGauge$timeoutNS0];
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } true;
    $l424 := l018 + $l323;
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } true;
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } $r325 != $null;
    call $z026, $exception := boolean$java.util.concurrent.atomic.AtomicLong$compareAndSet$1907($r325, l121, $l424);
    if ($exception != $null) {
    }
    assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } true;
    if ($z026 == 0) {
        assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } { :comment "thenblock" } true;
        goto block4;
    } else {
        assert { :sourceloc "CachedGauge.java",63,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CachedGauge.java",64,-1,-1,-1 } true;
    $return := 1;
    return;
  block4:
    assert { :sourceloc "CachedGauge.java",66,-1,-1,-1 } true;
    goto block2;
}


implementation void$com.codahale.metrics.Clock$$la$init$ra$$1895($this:ref) returns ($exception:ref){
    
var r027 : ref;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r027 := $this;
    assert { :sourceloc "Clock.java",9,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r027);
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",52,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Clock$getTime$1897($this:ref) returns ($return:int, $exception:ref){
    
var r029 : ref;    
var $l028 : int;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r029 := $this;
    assert { :sourceloc "Clock.java",23,-1,-1,-1 } true;
    call $l028, $exception := long$java.lang.System$currentTimeMillis$2305();
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",23,-1,-1,-1 } true;
    $return := $l028;
    return;
}


implementation com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898() returns ($return:ref, $exception:ref){
    
var $r030 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "Clock.java",36,-1,-1,-1 } true;
    $r030 := com.codahale.metrics.Clock$com.codahale.metrics.Clock$DEFAULT237;
    assert { :sourceloc "Clock.java",36,-1,-1,-1 } true;
    $return := $r030;
    return;
}


implementation void$com.codahale.metrics.Clock$$la$clinit$ra$$1899() returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r031 : ref;
    assert { :sourceloc "Clock.java",26,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Clock$UserTimeClock);
    $r031 := $fakelocal_0;
    assert { :sourceloc "Clock.java",26,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Clock$UserTimeClock$$la$init$ra$$2289($r031);
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",26,-1,-1,-1 } true;
    com.codahale.metrics.Clock$com.codahale.metrics.Clock$DEFAULT237 := $r031;
    assert { :sourceloc "Clock.java",26,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Clock$CpuTimeClock$$la$init$ra$$2074($this:ref) returns ($exception:ref){
    
var r032 : ref;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r032 := $this;
    assert { :sourceloc "Clock.java",52,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Clock$$la$init$ra$$1895(r032);
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",52,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Clock$CpuTimeClock$getTick$2075($this:ref) returns ($return:int, $exception:ref){
    
var $r133 : ref;    
var r035 : ref;    
var $l034 : int;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r035 := $this;
    assert { :sourceloc "Clock.java",57,-1,-1,-1 } true;
    $r133 := java.lang.management.ThreadMXBean$com.codahale.metrics.Clock$CpuTimeClock$THREAD_MX_BEAN249;
    assert { :sourceloc "Clock.java",57,-1,-1,-1 } true;
    assert { :sourceloc "Clock.java",57,-1,-1,-1 } $r133 != $null;
    call $l034, $exception := long$java.lang.management.ThreadMXBean$getCurrentThreadCpuTime$2089($r133);
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",57,-1,-1,-1 } true;
    $return := $l034;
    return;
}


implementation void$com.codahale.metrics.Clock$CpuTimeClock$$la$clinit$ra$$2076() returns ($exception:ref){
    
var $r036 : ref;
    assert { :sourceloc "Clock.java",53,-1,-1,-1 } true;
    call $r036, $exception := java.lang.management.ThreadMXBean$java.lang.management.ManagementFactory$getThreadMXBean$2108();
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",53,-1,-1,-1 } true;
    java.lang.management.ThreadMXBean$com.codahale.metrics.Clock$CpuTimeClock$THREAD_MX_BEAN249 := $r036;
    assert { :sourceloc "Clock.java",53,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Clock$UserTimeClock$$la$init$ra$$2289($this:ref) returns ($exception:ref){
    
var r037 : ref;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r037 := $this;
    assert { :sourceloc "Clock.java",42,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Clock$$la$init$ra$$1895(r037);
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",42,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Clock$UserTimeClock$getTick$2290($this:ref) returns ($return:int, $exception:ref){
    
var $l038 : int;    
var r039 : ref;
    assume { :sourceloc "Clock.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Clock.java",-1,-1,-1,-1 } true;
    r039 := $this;
    assert { :sourceloc "Clock.java",45,-1,-1,-1 } true;
    call $l038, $exception := long$java.lang.System$nanoTime$2306();
    if ($exception != $null) {
    }
    assert { :sourceloc "Clock.java",45,-1,-1,-1 } true;
    $return := $l038;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$forRegistry$2430($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r041 : ref;    
var $r140 : ref;    
var $fakelocal_0 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r041 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",19,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ConsoleReporter$Builder);
    $r140 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",19,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2551($r140, r041, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",19,-1,-1,-1 } true;
    $return := $r140;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2431($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref) returns ($exception:ref){
    
var $r950 : ref;    
var r746 : ref;    
var r143 : ref;    
var $r1052 : ref;    
var r348 : ref;    
var r551 : ref;    
var r449 : ref;    
var r844 : ref;    
var r042 : ref;    
var r645 : ref;    
var r247 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: java.util.Locale;
    assume $heap[$in_parameter__6,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__5,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__4,$type] <: java.util.TimeZone;
    assume $heap[$in_parameter__1,$type] <: java.io.PrintStream;
    assume $heap[$in_parameter__7,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r042 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r143 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r247 := $in_parameter__1;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r348 := $in_parameter__2;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r449 := $in_parameter__3;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r551 := $in_parameter__4;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r645 := $in_parameter__5;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r746 := $in_parameter__6;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r844 := $in_parameter__7;
    assert { :sourceloc "ConsoleReporter.java",157,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$$la$init$ra$$2440(r042, r143, $StringConst0, r844, r645, r746);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",158,-1,-1,-1 } true;
    $heap := $heap[r042,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303 := r247];
    assert { :sourceloc "ConsoleReporter.java",159,-1,-1,-1 } true;
    $heap := $heap[r042,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304 := r348];
    assert { :sourceloc "ConsoleReporter.java",160,-1,-1,-1 } true;
    $heap := $heap[r042,com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$clock305 := r449];
    assert { :sourceloc "ConsoleReporter.java",161,-1,-1,-1 } true;
    call $r950, $exception := java.text.DateFormat$java.text.DateFormat$getDateTimeInstance$2526(3, 2, r348);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",161,-1,-1,-1 } true;
    $heap := $heap[r042,java.text.DateFormat$com.codahale.metrics.ConsoleReporter$dateFormat306 := $r950];
    assert { :sourceloc "ConsoleReporter.java",164,-1,-1,-1 } true;
    $r1052 := $heap[r042,java.text.DateFormat$com.codahale.metrics.ConsoleReporter$dateFormat306];
    assert { :sourceloc "ConsoleReporter.java",164,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",164,-1,-1,-1 } $r1052 != $null;
    call $exception := void$java.text.DateFormat$setTimeZone$2533($r1052, r551);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",165,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$report$2432($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var r659 : ref;    
var $r48118 : ref;    
var $r2081 : ref;    
var $l057 : int;    
var $r45116 : ref;    
var r52122 : ref;    
var r053 : ref;    
var $r40105 : ref;    
var $z576 : int;    
var $z264 : int;    
var r51121 : ref;    
var $r2388 : ref;    
var $r35104 : ref;    
var $r1780 : ref;    
var $r39108 : ref;    
var $r37102 : ref;    
var r161 : ref;    
var $r46113 : ref;    
var $r1878 : ref;    
var $r1260 : ref;    
var $r3093 : ref;    
var r54124 : ref;    
var $r1156 : ref;    
var $z9115 : int;    
var $z797 : int;    
var $r3194 : ref;    
var $r954 : ref;    
var $z687 : int;    
var $fakelocal_0 : ref;    
var $r49119 : ref;    
var r263 : ref;    
var $r1471 : ref;    
var $r1982 : ref;    
var $r50120 : ref;    
var $r1573 : ref;    
var r55125 : ref;    
var $r38101 : ref;    
var $z166 : int;    
var r57127 : ref;    
var r879 : ref;    
var $r1677 : ref;    
var $r41112 : ref;    
var r467 : ref;    
var $r3299 : ref;    
var $r2184 : ref;    
var $r2692 : ref;    
var $r2591 : ref;    
var $r44109 : ref;    
var $r2890 : ref;    
var $r43110 : ref;    
var r58128 : ref;    
var $r2995 : ref;    
var $z468 : int;    
var $r1372 : ref;    
var $z062 : int;    
var $z8107 : int;    
var $r36103 : ref;    
var r775 : ref;    
var $r3498 : ref;    
var r569 : ref;    
var r53123 : ref;    
var $r2485 : ref;    
var r56126 : ref;    
var $r47117 : ref;    
var $r42111 : ref;    
var r365 : ref;    
var $r1055 : ref;    
var $r2789 : ref;    
var $r2283 : ref;    
var $r33100 : ref;    
var $z370 : int;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__2,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__4,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__0,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__3,$type] <: java.util.SortedMap;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r053 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r161 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r263 := $in_parameter__1;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r365 := $in_parameter__2;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r467 := $in_parameter__3;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r569 := $in_parameter__4;
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    $r1156 := $heap[r053,java.text.DateFormat$com.codahale.metrics.ConsoleReporter$dateFormat306];
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.Date);
    $r954 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    $r1055 := $heap[r053,com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$clock305];
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } $r1055 != $null;
    call $l057, $exception := long$com.codahale.metrics.Clock$getTime$1897($r1055);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    call $exception := void$java.util.Date$$la$init$ra$$2702($r954, $l057);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",173,-1,-1,-1 } $r1156 != $null;
    call r659, $exception := java.lang.String$java.text.DateFormat$format$2514($r1156, $r954);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",174,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, r659, 61);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",175,-1,-1,-1 } true;
    $r1260 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",175,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",175,-1,-1,-1 } $r1260 != $null;
    call $exception := void$java.io.PrintStream$println$209($r1260);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",177,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",177,-1,-1,-1 } r161 != $null;
    call $z062, $exception := boolean$java.util.Map$isEmpty$1157(r161);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",177,-1,-1,-1 } true;
    if ($z062 != 0) {
        assert { :sourceloc "ConsoleReporter.java",177,-1,-1,-1 } { :comment "thenblock" } true;
        goto block5;
    } else {
        assert { :sourceloc "ConsoleReporter.java",177,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",178,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, $StringConst1, 45);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } true;
    call $r46113, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r161);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } $r46113 != $null;
    call r775, $exception := java.util.Iterator$java.util.Set$iterator$236($r46113);
    if ($exception != $null) {
    }
  block6:
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } r775 != $null;
    call $z9115, $exception := boolean$java.util.Iterator$hasNext$1051(r775);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } true;
    if ($z9115 == 0) {
        assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } { :comment "thenblock" } true;
        goto block7;
    } else {
        assert { :sourceloc "ConsoleReporter.java",179,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } true;
    call $r47117, $exception := java.lang.Object$java.util.Iterator$next$1052(r775);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } $heap[$r47117,$type] <: java.util.Map$Entry;
    r879 := $r47117;
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } true;
    $r48118 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } r879 != $null;
    call $r49119, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r879);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } $heap[$r49119,$type] <: java.lang.String;
    $r50120 := $r49119;
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",180,-1,-1,-1 } $r48118 != $null;
    call $exception := void$java.io.PrintStream$println$217($r48118, $r50120);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",181,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printGauge$2435(r053, r879);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",182,-1,-1,-1 } true;
    goto block6;
  block7:
    assert { :sourceloc "ConsoleReporter.java",183,-1,-1,-1 } true;
    $r45116 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",183,-1,-1,-1 } $r45116 != $null;
    call $exception := void$java.io.PrintStream$println$209($r45116);
    if ($exception != $null) {
    }
  block5:
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } r263 != $null;
    call $z264, $exception := boolean$java.util.Map$isEmpty$1157(r263);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } true;
    if ($z264 != 0) {
        assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } { :comment "thenblock" } true;
        goto block8;
    } else {
        assert { :sourceloc "ConsoleReporter.java",186,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",187,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, $StringConst2, 45);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } true;
    call $r40105, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r263);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } $r40105 != $null;
    call r51121, $exception := java.util.Iterator$java.util.Set$iterator$236($r40105);
    if ($exception != $null) {
    }
  block9:
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } r51121 != $null;
    call $z8107, $exception := boolean$java.util.Iterator$hasNext$1051(r51121);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } true;
    if ($z8107 == 0) {
        assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } { :comment "thenblock" } true;
        goto block10;
    } else {
        assert { :sourceloc "ConsoleReporter.java",188,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } true;
    call $r44109, $exception := java.lang.Object$java.util.Iterator$next$1052(r51121);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } $heap[$r44109,$type] <: java.util.Map$Entry;
    r52122 := $r44109;
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } true;
    $r43110 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } r52122 != $null;
    call $r42111, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r52122);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } $heap[$r42111,$type] <: java.lang.String;
    $r41112 := $r42111;
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",189,-1,-1,-1 } $r43110 != $null;
    call $exception := void$java.io.PrintStream$println$217($r43110, $r41112);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",190,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printCounter$2434(r053, r52122);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",191,-1,-1,-1 } true;
    goto block9;
  block10:
    assert { :sourceloc "ConsoleReporter.java",192,-1,-1,-1 } true;
    $r39108 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",192,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",192,-1,-1,-1 } $r39108 != $null;
    call $exception := void$java.io.PrintStream$println$209($r39108);
    if ($exception != $null) {
    }
  block8:
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } r365 != $null;
    call $z166, $exception := boolean$java.util.Map$isEmpty$1157(r365);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } true;
    if ($z166 != 0) {
        assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } { :comment "thenblock" } true;
        goto block11;
    } else {
        assert { :sourceloc "ConsoleReporter.java",195,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",196,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, $StringConst3, 45);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } true;
    call $r2995, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r365);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } $r2995 != $null;
    call r53123, $exception := java.util.Iterator$java.util.Set$iterator$236($r2995);
    if ($exception != $null) {
    }
  block12:
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } r53123 != $null;
    call $z797, $exception := boolean$java.util.Iterator$hasNext$1051(r53123);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } true;
    if ($z797 == 0) {
        assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } { :comment "thenblock" } true;
        goto block13;
    } else {
        assert { :sourceloc "ConsoleReporter.java",197,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } true;
    call $r3299, $exception := java.lang.Object$java.util.Iterator$next$1052(r53123);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } $heap[$r3299,$type] <: java.util.Map$Entry;
    r54124 := $r3299;
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } true;
    $r33100 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } r54124 != $null;
    call $r38101, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r54124);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } $heap[$r38101,$type] <: java.lang.String;
    $r37102 := $r38101;
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",198,-1,-1,-1 } $r33100 != $null;
    call $exception := void$java.io.PrintStream$println$217($r33100, $r37102);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",199,-1,-1,-1 } true;
    call $r36103, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r54124);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",199,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",199,-1,-1,-1 } $heap[$r36103,$type] <: com.codahale.metrics.Histogram;
    $r35104 := $r36103;
    assert { :sourceloc "ConsoleReporter.java",199,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printHistogram$2436(r053, $r35104);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",200,-1,-1,-1 } true;
    goto block12;
  block13:
    assert { :sourceloc "ConsoleReporter.java",201,-1,-1,-1 } true;
    $r3498 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",201,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",201,-1,-1,-1 } $r3498 != $null;
    call $exception := void$java.io.PrintStream$println$209($r3498);
    if ($exception != $null) {
    }
  block11:
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } r467 != $null;
    call $z468, $exception := boolean$java.util.Map$isEmpty$1157(r467);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } true;
    if ($z468 != 0) {
        assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } { :comment "thenblock" } true;
        goto block14;
    } else {
        assert { :sourceloc "ConsoleReporter.java",204,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",205,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, $StringConst4, 45);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } true;
    call $r2485, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r467);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } $r2485 != $null;
    call r55125, $exception := java.util.Iterator$java.util.Set$iterator$236($r2485);
    if ($exception != $null) {
    }
  block15:
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } r55125 != $null;
    call $z687, $exception := boolean$java.util.Iterator$hasNext$1051(r55125);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } true;
    if ($z687 == 0) {
        assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } { :comment "thenblock" } true;
        goto block16;
    } else {
        assert { :sourceloc "ConsoleReporter.java",206,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } true;
    call $r2789, $exception := java.lang.Object$java.util.Iterator$next$1052(r55125);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } $heap[$r2789,$type] <: java.util.Map$Entry;
    r56126 := $r2789;
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } true;
    $r2890 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } r56126 != $null;
    call $r2591, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r56126);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } $heap[$r2591,$type] <: java.lang.String;
    $r2692 := $r2591;
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",207,-1,-1,-1 } $r2890 != $null;
    call $exception := void$java.io.PrintStream$println$217($r2890, $r2692);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",208,-1,-1,-1 } true;
    call $r3093, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r56126);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",208,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",208,-1,-1,-1 } $heap[$r3093,$type] <: com.codahale.metrics.Meter;
    $r3194 := $r3093;
    assert { :sourceloc "ConsoleReporter.java",208,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printMeter$2433(r053, $r3194);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",209,-1,-1,-1 } true;
    goto block15;
  block16:
    assert { :sourceloc "ConsoleReporter.java",210,-1,-1,-1 } true;
    $r2388 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",210,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",210,-1,-1,-1 } $r2388 != $null;
    call $exception := void$java.io.PrintStream$println$209($r2388);
    if ($exception != $null) {
    }
  block14:
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } r569 != $null;
    call $z370, $exception := boolean$java.util.Map$isEmpty$1157(r569);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } true;
    if ($z370 != 0) {
        assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } { :comment "thenblock" } true;
        goto block17;
    } else {
        assert { :sourceloc "ConsoleReporter.java",213,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",214,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438(r053, $StringConst5, 45);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } true;
    call $r1573, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r569);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } $r1573 != $null;
    call r57127, $exception := java.util.Iterator$java.util.Set$iterator$236($r1573);
    if ($exception != $null) {
    }
  block18:
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } r57127 != $null;
    call $z576, $exception := boolean$java.util.Iterator$hasNext$1051(r57127);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } true;
    if ($z576 == 0) {
        assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } { :comment "thenblock" } true;
        goto block19;
    } else {
        assert { :sourceloc "ConsoleReporter.java",215,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",224,-1,-1,-1 } true;
    call $r1878, $exception := java.lang.Object$java.util.Iterator$next$1052(r57127);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",224,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",224,-1,-1,-1 } $heap[$r1878,$type] <: java.util.Map$Entry;
    r58128 := $r1878;
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } true;
    $r1780 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } r58128 != $null;
    call $r2081, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r58128);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } $heap[$r2081,$type] <: java.lang.String;
    $r1982 := $r2081;
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",216,-1,-1,-1 } $r1780 != $null;
    call $exception := void$java.io.PrintStream$println$217($r1780, $r1982);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",217,-1,-1,-1 } true;
    call $r2283, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r58128);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",217,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",217,-1,-1,-1 } $heap[$r2283,$type] <: com.codahale.metrics.Timer;
    $r2184 := $r2283;
    assert { :sourceloc "ConsoleReporter.java",217,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$printTimer$2437(r053, $r2184);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",218,-1,-1,-1 } true;
    goto block18;
  block19:
    assert { :sourceloc "ConsoleReporter.java",219,-1,-1,-1 } true;
    $r1677 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",219,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",219,-1,-1,-1 } $r1677 != $null;
    call $exception := void$java.io.PrintStream$println$209($r1677);
    if ($exception != $null) {
    }
  block17:
    assert { :sourceloc "ConsoleReporter.java",222,-1,-1,-1 } true;
    $r1471 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",222,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",222,-1,-1,-1 } $r1471 != $null;
    call $exception := void$java.io.PrintStream$println$209($r1471);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",223,-1,-1,-1 } true;
    $r1372 := $heap[r053,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",223,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",223,-1,-1,-1 } $r1372 != $null;
    call $exception := void$java.io.PrintStream$flush$190($r1372);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",224,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printMeter$2433($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r14152 : ref;    
var $r21162 : ref;    
var $d5166 : int;    
var $r8140 : ref;    
var $d2156 : int;    
var $r27174 : ref;    
var $fakelocal_6 : ref;    
var $r7139 : ref;    
var $r12150 : ref;    
var $r25170 : ref;    
var $fakelocal_0 : ref;    
var $r30181 : ref;    
var $fakelocal_7 : ref;    
var $r28179 : ref;    
var $r4133 : ref;    
var $fakelocal_8 : ref;    
var $d7177 : int;    
var $r5137 : ref;    
var $r20161 : ref;    
var $fakelocal_5 : ref;    
var $r15151 : ref;    
var $d0144 : int;    
var $r24172 : ref;    
var $l0136 : int;    
var $r26173 : ref;    
var $r18159 : ref;    
var $r11148 : ref;    
var $r10146 : ref;    
var r1131 : ref;    
var $r22168 : ref;    
var $fakelocal_2 : ref;    
var $fakelocal_4 : ref;    
var $fakelocal_1 : ref;    
var $r9141 : ref;    
var $d6178 : int;    
var r0129 : ref;    
var $d3155 : int;    
var $fakelocal_3 : ref;    
var $fakelocal_9 : ref;    
var $r19163 : ref;    
var $r2130 : ref;    
var $d1145 : int;    
var $r3132 : ref;    
var $d4167 : int;    
var $r16157 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Meter;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0129 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1131 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    $r3132 := $heap[r0129,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    $r4133 := $heap[r0129,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r2130 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } r1131 != $null;
    call $l0136, $exception := long$com.codahale.metrics.Meter$getCount$2636(r1131);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    call $r5137, $exception := java.lang.Long$java.lang.Long$valueOf$878($l0136);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } 0 < $arrSizeHeap[$r2130] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r2130 := $refArrHeap[$r2130][0 := $r5137]];
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",227,-1,-1,-1 } $r3132 != $null;
    call $fakelocal_1, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r3132, $r4133, $StringConst6, $r2130);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    $r8140 := $heap[r0129,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    $r9141 := $heap[r0129,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 2];
    $r7139 := $fakelocal_2;
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    call $d0144, $exception := double$com.codahale.metrics.Meter$getMeanRate$2639(r1131);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    call $d1145, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0129, $d0144);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    call $r10146, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d1145);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } 0 < $arrSizeHeap[$r7139] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r7139 := $refArrHeap[$r7139][0 := $r10146]];
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    call $r11148, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0129);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } 1 < $arrSizeHeap[$r7139] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r7139 := $refArrHeap[$r7139][1 := $r11148]];
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",228,-1,-1,-1 } $r8140 != $null;
    call $fakelocal_3, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r8140, $r9141, $StringConst7, $r7139);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    $r15151 := $heap[r0129,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    $r14152 := $heap[r0129,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    call $fakelocal_4 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_4 := 2];
    $r12150 := $fakelocal_4;
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    call $d3155, $exception := double$com.codahale.metrics.Meter$getOneMinuteRate$2640(r1131);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    call $d2156, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0129, $d3155);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    call $r16157, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d2156);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } 0 < $arrSizeHeap[$r12150] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r12150 := $refArrHeap[$r12150][0 := $r16157]];
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    call $r18159, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0129);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } 1 < $arrSizeHeap[$r12150] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r12150 := $refArrHeap[$r12150][1 := $r18159]];
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",229,-1,-1,-1 } $r15151 != $null;
    call $fakelocal_5, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r15151, $r14152, $StringConst8, $r12150);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    $r21162 := $heap[r0129,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    $r19163 := $heap[r0129,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    call $fakelocal_6 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_6 := 2];
    $r20161 := $fakelocal_6;
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    call $d5166, $exception := double$com.codahale.metrics.Meter$getFiveMinuteRate$2638(r1131);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    call $d4167, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0129, $d5166);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    call $r22168, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d4167);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } 0 < $arrSizeHeap[$r20161] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r20161 := $refArrHeap[$r20161][0 := $r22168]];
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    call $r25170, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0129);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } 1 < $arrSizeHeap[$r20161] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r20161 := $refArrHeap[$r20161][1 := $r25170]];
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",230,-1,-1,-1 } $r21162 != $null;
    call $fakelocal_7, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r21162, $r19163, $StringConst9, $r20161);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    $r26173 := $heap[r0129,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    $r27174 := $heap[r0129,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    call $fakelocal_8 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_8 := 2];
    $r24172 := $fakelocal_8;
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    call $d7177, $exception := double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637(r1131);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    call $d6178, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0129, $d7177);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    call $r28179, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d6178);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } 0 < $arrSizeHeap[$r24172] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r24172 := $refArrHeap[$r24172][0 := $r28179]];
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    call $r30181, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0129);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } 1 < $arrSizeHeap[$r24172] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r24172 := $refArrHeap[$r24172][1 := $r30181]];
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",231,-1,-1,-1 } $r26173 != $null;
    call $fakelocal_9, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r26173, $r27174, $StringConst10, $r24172);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",232,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printCounter$2434($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r6191 : ref;    
var r0183 : ref;    
var r1185 : ref;    
var $r2184 : ref;    
var $r7193 : ref;    
var $fakelocal_0 : ref;    
var $l0192 : int;    
var $r3186 : ref;    
var $fakelocal_1 : ref;    
var $r5190 : ref;    
var $r4187 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.Map$Entry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0183 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1185 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    $r3186 := $heap[r0183,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    $r4187 := $heap[r0183,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r2184 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } r1185 != $null;
    call $r5190, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r1185);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } $heap[$r5190,$type] <: com.codahale.metrics.Counter;
    $r6191 := $r5190;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } $r6191 != $null;
    call $l0192, $exception := long$com.codahale.metrics.Counter$getCount$2847($r6191);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    call $r7193, $exception := java.lang.Long$java.lang.Long$valueOf$878($l0192);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } 0 < $arrSizeHeap[$r2184] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r2184 := $refArrHeap[$r2184][0 := $r7193]];
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",235,-1,-1,-1 } $r3186 != $null;
    call $fakelocal_1, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r3186, $r4187, $StringConst6, $r2184);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",236,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printGauge$2435($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r6203 : ref;    
var $r2196 : ref;    
var $fakelocal_0 : ref;    
var $fakelocal_1 : ref;    
var $r5202 : ref;    
var $r4199 : ref;    
var $r7204 : ref;    
var $r3198 : ref;    
var r0195 : ref;    
var r1197 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.Map$Entry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0195 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1197 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    $r3198 := $heap[r0195,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    $r4199 := $heap[r0195,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r2196 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } r1197 != $null;
    call $r5202, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r1197);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } $heap[$r5202,$type] <: com.codahale.metrics.Gauge;
    $r6203 := $r5202;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } $r6203 != $null;
    call $r7204, $exception := java.lang.Object$com.codahale.metrics.Gauge$getValue$1894($r6203);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } 0 < $arrSizeHeap[$r2196] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r2196 := $refArrHeap[$r2196][0 := $r7204]];
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",239,-1,-1,-1 } $r3198 != $null;
    call $fakelocal_1, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r3198, $r4199, $StringConst11, $r2196);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",240,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printHistogram$2436($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $d0239 : int;    
var $r15228 : ref;    
var $r35258 : ref;    
var $r38268 : ref;    
var $fakelocal_3 : ref;    
var $fakelocal_21 : ref;    
var $r24242 : ref;    
var $r3207 : ref;    
var $fakelocal_5 : ref;    
var $fakelocal_13 : ref;    
var $r28252 : ref;    
var $r47283 : ref;    
var $r49280 : ref;    
var $r13227 : ref;    
var $r19234 : ref;    
var $fakelocal_4 : ref;    
var $r5210 : ref;    
var $l2231 : int;    
var $l1223 : int;    
var $r32256 : ref;    
var $r46282 : ref;    
var $r9219 : ref;    
var $fakelocal_12 : ref;    
var $r12224 : ref;    
var $fakelocal_8 : ref;    
var $r30251 : ref;    
var $r14226 : ref;    
var $d3263 : int;    
var r0206 : ref;    
var $r48284 : ref;    
var $d1247 : int;    
var $fakelocal_9 : ref;    
var $fakelocal_1 : ref;    
var $d2255 : int;    
var $r39267 : ref;    
var $r53292 : ref;    
var $r41274 : ref;    
var $fakelocal_17 : ref;    
var $r57296 : ref;    
var $r44272 : ref;    
var $r34259 : ref;    
var $r8218 : ref;    
var $r4209 : ref;    
var $r21240 : ref;    
var $r33260 : ref;    
var $fakelocal_16 : ref;    
var $r51291 : ref;    
var $d5279 : int;    
var $fakelocal_14 : ref;    
var $fakelocal_6 : ref;    
var $r40266 : ref;    
var $fakelocal_10 : ref;    
var $r6214 : ref;    
var $fakelocal_0 : ref;    
var $r29250 : ref;    
var $d6287 : int;    
var $r43276 : ref;    
var r1208 : ref;    
var $r23244 : ref;    
var $fakelocal_15 : ref;    
var r2217 : ref;    
var $r52290 : ref;    
var $r10220 : ref;    
var $r42275 : ref;    
var $fakelocal_7 : ref;    
var $d7295 : int;    
var $r20236 : ref;    
var $r26248 : ref;    
var $r18235 : ref;    
var $r55288 : ref;    
var $r37264 : ref;    
var $l0213 : int;    
var $fakelocal_19 : ref;    
var $d4271 : int;    
var $r17232 : ref;    
var $fakelocal_18 : ref;    
var $fakelocal_20 : ref;    
var $r25243 : ref;    
var $fakelocal_11 : ref;    
var $fakelocal_2 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Histogram;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0206 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1208 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    $r4209 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    $r5210 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r3207 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } r1208 != $null;
    call $l0213, $exception := long$com.codahale.metrics.Histogram$getCount$2650(r1208);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    call $r6214, $exception := java.lang.Long$java.lang.Long$valueOf$878($l0213);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } 0 < $arrSizeHeap[$r3207] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r3207 := $refArrHeap[$r3207][0 := $r6214]];
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",243,-1,-1,-1 } $r4209 != $null;
    call $fakelocal_1, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r4209, $r5210, $StringConst6, $r3207);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",244,-1,-1,-1 } true;
    call r2217, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651(r1208);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    $r9219 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    $r10220 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 1];
    $r8218 := $fakelocal_2;
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } r2217 != $null;
    call $l1223, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    call $r12224, $exception := java.lang.Long$java.lang.Long$valueOf$878($l1223);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } 0 < $arrSizeHeap[$r8218] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r8218 := $refArrHeap[$r8218][0 := $r12224]];
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",245,-1,-1,-1 } $r9219 != $null;
    call $fakelocal_3, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r9219, $r10220, $StringConst12, $r8218);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    $r13227 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    $r15228 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    call $fakelocal_4 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_4 := 1];
    $r14226 := $fakelocal_4;
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    call $l2231, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    call $r17232, $exception := java.lang.Long$java.lang.Long$valueOf$878($l2231);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } 0 < $arrSizeHeap[$r14226] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r14226 := $refArrHeap[$r14226][0 := $r17232]];
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",246,-1,-1,-1 } $r13227 != $null;
    call $fakelocal_5, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r13227, $r15228, $StringConst13, $r14226);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    $r18235 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    $r20236 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    call $fakelocal_6 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_6 := 1];
    $r19234 := $fakelocal_6;
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    call $d0239, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    call $r21240, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d0239);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } 0 < $arrSizeHeap[$r19234] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r19234 := $refArrHeap[$r19234][0 := $r21240]];
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",247,-1,-1,-1 } $r18235 != $null;
    call $fakelocal_7, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r18235, $r20236, $StringConst14, $r19234);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    $r25243 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    $r23244 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    call $fakelocal_8 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_8 := 1];
    $r24242 := $fakelocal_8;
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    call $d1247, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    call $r26248, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d1247);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } 0 < $arrSizeHeap[$r24242] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r24242 := $refArrHeap[$r24242][0 := $r26248]];
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",248,-1,-1,-1 } $r25243 != $null;
    call $fakelocal_9, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r25243, $r23244, $StringConst15, $r24242);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    $r30251 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    $r28252 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    call $fakelocal_10 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_10 := 1];
    $r29250 := $fakelocal_10;
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    call $d2255, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    call $r32256, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d2255);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } 0 < $arrSizeHeap[$r29250] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r29250 := $refArrHeap[$r29250][0 := $r32256]];
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",249,-1,-1,-1 } $r30251 != $null;
    call $fakelocal_11, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r30251, $r28252, $StringConst16, $r29250);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    $r34259 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    $r33260 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    call $fakelocal_12 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_12 := 1];
    $r35258 := $fakelocal_12;
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    call $d3263, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    call $r37264, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d3263);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } 0 < $arrSizeHeap[$r35258] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r35258 := $refArrHeap[$r35258][0 := $r37264]];
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",250,-1,-1,-1 } $r34259 != $null;
    call $fakelocal_13, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r34259, $r33260, $StringConst17, $r35258);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    $r39267 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    $r38268 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    call $fakelocal_14 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_14 := 1];
    $r40266 := $fakelocal_14;
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    call $d4271, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    call $r44272, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d4271);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } 0 < $arrSizeHeap[$r40266] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r40266 := $refArrHeap[$r40266][0 := $r44272]];
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",251,-1,-1,-1 } $r39267 != $null;
    call $fakelocal_15, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r39267, $r38268, $StringConst18, $r40266);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    $r42275 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    $r43276 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    call $fakelocal_16 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_16 := 1];
    $r41274 := $fakelocal_16;
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    call $d5279, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    call $r49280, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d5279);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } 0 < $arrSizeHeap[$r41274] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r41274 := $refArrHeap[$r41274][0 := $r49280]];
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",252,-1,-1,-1 } $r42275 != $null;
    call $fakelocal_17, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r42275, $r43276, $StringConst19, $r41274);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    $r47283 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    $r48284 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    call $fakelocal_18 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_18 := 1];
    $r46282 := $fakelocal_18;
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    call $d6287, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    call $r55288, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d6287);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } 0 < $arrSizeHeap[$r46282] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r46282 := $refArrHeap[$r46282][0 := $r55288]];
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",253,-1,-1,-1 } $r47283 != $null;
    call $fakelocal_19, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r47283, $r48284, $StringConst20, $r46282);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    $r51291 := $heap[r0206,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    $r53292 := $heap[r0206,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    call $fakelocal_20 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_20 := 1];
    $r52290 := $fakelocal_20;
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    call $d7295, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r2217);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    call $r57296, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d7295);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } 0 < $arrSizeHeap[$r52290] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r52290 := $refArrHeap[$r52290][0 := $r57296]];
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",254,-1,-1,-1 } $r51291 != $null;
    call $fakelocal_21, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r51291, $r53292, $StringConst21, $r52290);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",255,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printTimer$2437($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r55398 : ref;    
var $r12319 : ref;    
var $fakelocal_17 : ref;    
var $r35366 : ref;    
var $fakelocal_24 : ref;    
var $r81455 : ref;    
var $r87445 : ref;    
var $r13321 : ref;    
var $d7348 : int;    
var $r26345 : ref;    
var $r54401 : ref;    
var $r63411 : ref;    
var $d8361 : int;    
var $d5338 : int;    
var $d22427 : int;    
var $d2327 : int;    
var $fakelocal_0 : ref;    
var $r66423 : ref;    
var $r19333 : ref;    
var $r53400 : ref;    
var $d21438 : int;    
var $d19416 : int;    
var $r69420 : ref;    
var $r88446 : ref;    
var $r49390 : ref;    
var $d24450 : int;    
var $r79453 : ref;    
var $r38362 : ref;    
var $d11373 : int;    
var $r57396 : ref;    
var $r24339 : ref;    
var $fakelocal_25 : ref;    
var $fakelocal_2 : ref;    
var $fakelocal_20 : ref;    
var $d27460 : int;    
var $r44385 : ref;    
var $r28343 : ref;    
var $r11317 : ref;    
var $d6349 : int;    
var $fakelocal_21 : ref;    
var $r67422 : ref;    
var $d23428 : int;    
var $r82456 : ref;    
var $r6308 : ref;    
var $d18417 : int;    
var $d3326 : int;    
var $r90464 : ref;    
var $d16406 : int;    
var $r34354 : ref;    
var $fakelocal_14 : ref;    
var $r10312 : ref;    
var $r17328 : ref;    
var $r84442 : ref;    
var $d1316 : int;    
var $r65424 : ref;    
var $r25344 : ref;    
var $fakelocal_5 : ref;    
var $d15395 : int;    
var $r42376 : ref;    
var $fakelocal_26 : ref;    
var $fakelocal_10 : ref;    
var $d0315 : int;    
var $fakelocal_22 : ref;    
var $d14394 : int;    
var $d20439 : int;    
var $r51389 : ref;    
var $d26461 : int;    
var $r37368 : ref;    
var $l2371 : int;    
var $d17405 : int;    
var $fakelocal_27 : ref;    
var r0301 : ref;    
var $r45379 : ref;    
var $r9311 : ref;    
var $r47380 : ref;    
var $r58409 : ref;    
var $r23341 : ref;    
var $r36367 : ref;    
var $r83457 : ref;    
var $r22334 : ref;    
var $r61413 : ref;    
var $d9360 : int;    
var $r48391 : ref;    
var $r41374 : ref;    
var $fakelocal_19 : ref;    
var $r3302 : ref;    
var $r39364 : ref;    
var $r70418 : ref;    
var $d25449 : int;    
var $r74429 : ref;    
var $fakelocal_16 : ref;    
var $fakelocal_12 : ref;    
var $r75431 : ref;    
var $r8310 : ref;    
var $fakelocal_15 : ref;    
var $r18332 : ref;    
var $fakelocal_28 : ref;    
var $d12383 : int;    
var $r73440 : ref;    
var $d4337 : int;    
var $r15323 : ref;    
var $fakelocal_18 : ref;    
var $r33355 : ref;    
var $fakelocal_9 : ref;    
var $r5304 : ref;    
var $l1359 : int;    
var $r72434 : ref;    
var $r4303 : ref;    
var $r20330 : ref;    
var $r60402 : ref;    
var $r76433 : ref;    
var $r16322 : ref;    
var $fakelocal_1 : ref;    
var $r86444 : ref;    
var $fakelocal_7 : ref;    
var $r78451 : ref;    
var $fakelocal_4 : ref;    
var $fakelocal_11 : ref;    
var $r62412 : ref;    
var $d13384 : int;    
var $fakelocal_8 : ref;    
var r2300 : ref;    
var $l0307 : int;    
var r1298 : ref;    
var $fakelocal_29 : ref;    
var $r46378 : ref;    
var $r71435 : ref;    
var $fakelocal_3 : ref;    
var $fakelocal_6 : ref;    
var $r50387 : ref;    
var $fakelocal_23 : ref;    
var $r31350 : ref;    
var $r59407 : ref;    
var $d10372 : int;    
var $r30352 : ref;    
var $fakelocal_13 : ref;    
var $r91462 : ref;    
var $r32356 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Timer;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0301 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1298 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",258,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",258,-1,-1,-1 } r1298 != $null;
    call r2300, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    $r4303 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    $r5304 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r3302 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    call $l0307, $exception := long$com.codahale.metrics.Timer$getCount$2658(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    call $r6308, $exception := java.lang.Long$java.lang.Long$valueOf$878($l0307);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } 0 < $arrSizeHeap[$r3302] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r3302 := $refArrHeap[$r3302][0 := $r6308]];
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",259,-1,-1,-1 } $r4303 != $null;
    call $fakelocal_1, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r4303, $r5304, $StringConst6, $r3302);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    $r9311 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    $r10312 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 2];
    $r8310 := $fakelocal_2;
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    call $d0315, $exception := double$com.codahale.metrics.Timer$getMeanRate$2661(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    call $d1316, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0301, $d0315);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    call $r11317, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d1316);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } 0 < $arrSizeHeap[$r8310] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r8310 := $refArrHeap[$r8310][0 := $r11317]];
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    call $r12319, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } 1 < $arrSizeHeap[$r8310] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r8310 := $refArrHeap[$r8310][1 := $r12319]];
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",260,-1,-1,-1 } $r9311 != $null;
    call $fakelocal_3, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r9311, $r10312, $StringConst22, $r8310);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    $r16322 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    $r15323 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    call $fakelocal_4 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_4 := 2];
    $r13321 := $fakelocal_4;
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    call $d3326, $exception := double$com.codahale.metrics.Timer$getOneMinuteRate$2662(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    call $d2327, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0301, $d3326);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    call $r17328, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d2327);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } 0 < $arrSizeHeap[$r13321] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r13321 := $refArrHeap[$r13321][0 := $r17328]];
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    call $r20330, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } 1 < $arrSizeHeap[$r13321] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r13321 := $refArrHeap[$r13321][1 := $r20330]];
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",261,-1,-1,-1 } $r16322 != $null;
    call $fakelocal_5, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r16322, $r15323, $StringConst23, $r13321);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    $r19333 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    $r22334 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    call $fakelocal_6 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_6 := 2];
    $r18332 := $fakelocal_6;
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    call $d4337, $exception := double$com.codahale.metrics.Timer$getFiveMinuteRate$2660(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    call $d5338, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0301, $d4337);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    call $r24339, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d5338);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } 0 < $arrSizeHeap[$r18332] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r18332 := $refArrHeap[$r18332][0 := $r24339]];
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    call $r23341, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } 1 < $arrSizeHeap[$r18332] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r18332 := $refArrHeap[$r18332][1 := $r23341]];
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",262,-1,-1,-1 } $r19333 != $null;
    call $fakelocal_7, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r19333, $r22334, $StringConst24, $r18332);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    $r25344 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    $r26345 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    call $fakelocal_8 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_8 := 2];
    $r28343 := $fakelocal_8;
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    call $d7348, $exception := double$com.codahale.metrics.Timer$getFifteenMinuteRate$2659(r1298);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    call $d6349, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r0301, $d7348);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    call $r31350, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d6349);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } 0 < $arrSizeHeap[$r28343] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r28343 := $refArrHeap[$r28343][0 := $r31350]];
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    call $r30352, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } 1 < $arrSizeHeap[$r28343] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r28343 := $refArrHeap[$r28343][1 := $r30352]];
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",263,-1,-1,-1 } $r25344 != $null;
    call $fakelocal_9, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r25344, $r26345, $StringConst25, $r28343);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    $r33355 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    $r32356 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    call $fakelocal_10 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_10 := 2];
    $r34354 := $fakelocal_10;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } r2300 != $null;
    call $l1359, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    $d9360 := $l1359;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    call $d8361, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d9360);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    call $r38362, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d8361);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } 0 < $arrSizeHeap[$r34354] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r34354 := $refArrHeap[$r34354][0 := $r38362]];
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    call $r39364, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } 1 < $arrSizeHeap[$r34354] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r34354 := $refArrHeap[$r34354][1 := $r39364]];
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",265,-1,-1,-1 } $r33355 != $null;
    call $fakelocal_11, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r33355, $r32356, $StringConst26, $r34354);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    $r36367 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    $r37368 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    call $fakelocal_12 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_12 := 2];
    $r35366 := $fakelocal_12;
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    call $l2371, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    $d10372 := $l2371;
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    call $d11373, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d10372);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    call $r41374, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d11373);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } 0 < $arrSizeHeap[$r35366] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r35366 := $refArrHeap[$r35366][0 := $r41374]];
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    call $r42376, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } 1 < $arrSizeHeap[$r35366] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r35366 := $refArrHeap[$r35366][1 := $r42376]];
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",266,-1,-1,-1 } $r36367 != $null;
    call $fakelocal_13, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r36367, $r37368, $StringConst27, $r35366);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    $r45379 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    $r47380 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    call $fakelocal_14 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_14 := 2];
    $r46378 := $fakelocal_14;
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    call $d12383, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    call $d13384, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d12383);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    call $r44385, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d13384);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } 0 < $arrSizeHeap[$r46378] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r46378 := $refArrHeap[$r46378][0 := $r44385]];
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    call $r50387, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } 1 < $arrSizeHeap[$r46378] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r46378 := $refArrHeap[$r46378][1 := $r50387]];
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",267,-1,-1,-1 } $r45379 != $null;
    call $fakelocal_15, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r45379, $r47380, $StringConst28, $r46378);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    $r49390 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    $r48391 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    call $fakelocal_16 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_16 := 2];
    $r51389 := $fakelocal_16;
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    call $d14394, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    call $d15395, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d14394);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    call $r57396, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d15395);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } 0 < $arrSizeHeap[$r51389] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r51389 := $refArrHeap[$r51389][0 := $r57396]];
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    call $r55398, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } 1 < $arrSizeHeap[$r51389] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r51389 := $refArrHeap[$r51389][1 := $r55398]];
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",268,-1,-1,-1 } $r49390 != $null;
    call $fakelocal_17, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r49390, $r48391, $StringConst29, $r51389);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    $r54401 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    $r60402 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    call $fakelocal_18 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_18 := 2];
    $r53400 := $fakelocal_18;
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    call $d17405, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    call $d16406, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d17405);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    call $r59407, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d16406);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } 0 < $arrSizeHeap[$r53400] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r53400 := $refArrHeap[$r53400][0 := $r59407]];
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    call $r58409, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } 1 < $arrSizeHeap[$r53400] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r53400 := $refArrHeap[$r53400][1 := $r58409]];
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",269,-1,-1,-1 } $r54401 != $null;
    call $fakelocal_19, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r54401, $r60402, $StringConst30, $r53400);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    $r62412 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    $r61413 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    call $fakelocal_20 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_20 := 2];
    $r63411 := $fakelocal_20;
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    call $d19416, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    call $d18417, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d19416);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    call $r70418, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d18417);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } 0 < $arrSizeHeap[$r63411] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r63411 := $refArrHeap[$r63411][0 := $r70418]];
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    call $r69420, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } 1 < $arrSizeHeap[$r63411] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r63411 := $refArrHeap[$r63411][1 := $r69420]];
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",270,-1,-1,-1 } $r62412 != $null;
    call $fakelocal_21, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r62412, $r61413, $StringConst31, $r63411);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    $r66423 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    $r65424 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    call $fakelocal_22 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_22 := 2];
    $r67422 := $fakelocal_22;
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    call $d22427, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    call $d23428, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d22427);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    call $r74429, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d23428);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } 0 < $arrSizeHeap[$r67422] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r67422 := $refArrHeap[$r67422][0 := $r74429]];
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    call $r75431, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } 1 < $arrSizeHeap[$r67422] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r67422 := $refArrHeap[$r67422][1 := $r75431]];
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",271,-1,-1,-1 } $r66423 != $null;
    call $fakelocal_23, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r66423, $r65424, $StringConst32, $r67422);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    $r72434 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    $r71435 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    call $fakelocal_24 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_24 := 2];
    $r76433 := $fakelocal_24;
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    call $d21438, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    call $d20439, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d21438);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    call $r73440, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d20439);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } 0 < $arrSizeHeap[$r76433] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r76433 := $refArrHeap[$r76433][0 := $r73440]];
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    call $r84442, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } 1 < $arrSizeHeap[$r76433] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r76433 := $refArrHeap[$r76433][1 := $r84442]];
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",272,-1,-1,-1 } $r72434 != $null;
    call $fakelocal_25, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r72434, $r71435, $StringConst33, $r76433);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    $r87445 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    $r88446 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    call $fakelocal_26 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_26 := 2];
    $r86444 := $fakelocal_26;
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    call $d25449, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    call $d24450, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d25449);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    call $r78451, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d24450);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } 0 < $arrSizeHeap[$r86444] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r86444 := $refArrHeap[$r86444][0 := $r78451]];
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    call $r79453, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } 1 < $arrSizeHeap[$r86444] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r86444 := $refArrHeap[$r86444][1 := $r79453]];
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",273,-1,-1,-1 } $r87445 != $null;
    call $fakelocal_27, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r87445, $r88446, $StringConst34, $r86444);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    $r82456 := $heap[r0301,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    $r83457 := $heap[r0301,java.util.Locale$com.codahale.metrics.ConsoleReporter$locale304];
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    call $fakelocal_28 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_28 := 2];
    $r81455 := $fakelocal_28;
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    call $d27460, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r2300);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    call $d26461, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r0301, $d27460);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    call $r91462, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d26461);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } 0 < $arrSizeHeap[$r81455] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r81455 := $refArrHeap[$r81455][0 := $r91462]];
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    call $r90464, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r0301);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } 1 < $arrSizeHeap[$r81455] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r81455 := $refArrHeap[$r81455][1 := $r90464]];
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",274,-1,-1,-1 } $r82456 != $null;
    call $fakelocal_29, $exception := java.io.PrintStream$java.io.PrintStream$printf$220($r82456, $r83457, $StringConst35, $r81455);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",275,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$printWithBanner$2438($this:ref, $in_parameter__0:ref, $in_parameter__1:int) returns ($exception:ref){
    
var $i2472 : int;    
var i1470 : int;    
var r1467 : ref;    
var $r2468 : ref;    
var $i4474 : int;    
var r0466 : ref;    
var $r5477 : ref;    
var $r3469 : ref;    
var $r4475 : ref;    
var c0476 : int;    
var $i3473 : int;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0466 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1467 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    c0476 := $in_parameter__1;
    assert { :sourceloc "ConsoleReporter.java",278,-1,-1,-1 } true;
    $r2468 := $heap[r0466,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",278,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",278,-1,-1,-1 } $r2468 != $null;
    call $exception := void$java.io.PrintStream$print$207($r2468, r1467);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",279,-1,-1,-1 } true;
    $r3469 := $heap[r0466,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",279,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",279,-1,-1,-1 } $r3469 != $null;
    call $exception := void$java.io.PrintStream$print$201($r3469, 32);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    i1470 := 0;
  block20:
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    $i2472 := $stringSizeHeap[r1467];
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    $i3473 := 80 - $i2472;
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    $i4474 := $i3473 - 1;
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    if (i1470 >= $i4474) {
        assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } { :comment "thenblock" } true;
        goto block21;
    } else {
        assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ConsoleReporter.java",281,-1,-1,-1 } true;
    $r5477 := $heap[r0466,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",281,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",281,-1,-1,-1 } $r5477 != $null;
    call $exception := void$java.io.PrintStream$print$201($r5477, c0476);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    i1470 := i1470 + 1;
    assert { :sourceloc "ConsoleReporter.java",280,-1,-1,-1 } true;
    goto block20;
  block21:
    assert { :sourceloc "ConsoleReporter.java",283,-1,-1,-1 } true;
    $r4475 := $heap[r0466,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$output303];
    assert { :sourceloc "ConsoleReporter.java",283,-1,-1,-1 } true;
    assert { :sourceloc "ConsoleReporter.java",283,-1,-1,-1 } $r4475 != $null;
    call $exception := void$java.io.PrintStream$println$209($r4475);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",284,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2439($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref, $in_parameter__8:ref) returns ($exception:ref){
    
var r0478 : ref;    
var r3481 : ref;    
var r4482 : ref;    
var r7485 : ref;    
var r5483 : ref;    
var r9487 : ref;    
var r1479 : ref;    
var r8486 : ref;    
var r6484 : ref;    
var r2480 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__7,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__1,$type] <: java.io.PrintStream;
    assume $heap[$in_parameter__6,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__2,$type] <: java.util.Locale;
    assume $heap[$in_parameter__8,$type] <: com.codahale.metrics.ConsoleReporter$1;
    assume $heap[$in_parameter__4,$type] <: java.util.TimeZone;
    assume $heap[$in_parameter__5,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0478 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1479 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r2480 := $in_parameter__1;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r3481 := $in_parameter__2;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r4482 := $in_parameter__3;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r5483 := $in_parameter__4;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r6484 := $in_parameter__5;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r7485 := $in_parameter__6;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r8486 := $in_parameter__7;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r9487 := $in_parameter__8;
    assert { :sourceloc "ConsoleReporter.java",11,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2431(r0478, r1479, r2480, r3481, r4482, r5483, r6484, r7485, r8486);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",11,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$$la$init$ra$$2440($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var $r10505 : ref;    
var $fakelocal_0 : ref;    
var r1489 : ref;    
var r5498 : ref;    
var r2492 : ref;    
var $r8497 : ref;    
var $r9503 : ref;    
var $d0496 : int;    
var r4494 : ref;    
var $r6491 : ref;    
var r0488 : ref;    
var $d2502 : int;    
var $r11504 : ref;    
var r3490 : ref;    
var $l1500 : int;    
var $l0495 : int;    
var $r7493 : ref;    
var $d1501 : int;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__4,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0488 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r1489 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r2492 := $in_parameter__1;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r3490 := $in_parameter__2;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r4494 := $in_parameter__3;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r5498 := $in_parameter__4;
    assert { :sourceloc "ScheduledReporter.java",66,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0488);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",67,-1,-1,-1 } true;
    $heap := $heap[r0488,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307 := r1489];
    assert { :sourceloc "ScheduledReporter.java",68,-1,-1,-1 } true;
    $heap := $heap[r0488,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309 := r3490];
    assert { :sourceloc "ScheduledReporter.java",69,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ScheduledReporter$NamedThreadFactory);
    $r6491 := $fakelocal_0;
    assert { :sourceloc "ScheduledReporter.java",69,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5619($r6491, r2492, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",69,-1,-1,-1 } true;
    call $r7493, $exception := java.util.concurrent.ScheduledExecutorService$java.util.concurrent.Executors$newSingleThreadScheduledExecutor$5750($r6491);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",69,-1,-1,-1 } true;
    $heap := $heap[r0488,java.util.concurrent.ScheduledExecutorService$com.codahale.metrics.ScheduledReporter$executor308 := $r7493];
    assert { :sourceloc "ScheduledReporter.java",70,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",70,-1,-1,-1 } r4494 != $null;
    call $l0495, $exception := long$java.util.concurrent.TimeUnit$toSeconds$1929(r4494, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",70,-1,-1,-1 } true;
    $d0496 := $l0495;
    assert { :sourceloc "ScheduledReporter.java",70,-1,-1,-1 } true;
    $heap := $heap[r0488,double$com.codahale.metrics.ScheduledReporter$rateFactor0 := $d0496];
    assert { :sourceloc "ScheduledReporter.java",71,-1,-1,-1 } true;
    call $r8497, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$calculateRateUnit$2449(r0488, r4494);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",71,-1,-1,-1 } true;
    $heap := $heap[r0488,java.lang.String$com.codahale.metrics.ScheduledReporter$rateUnit311 := $r8497];
    assert { :sourceloc "ScheduledReporter.java",72,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",72,-1,-1,-1 } r5498 != $null;
    call $l1500, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r5498, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",72,-1,-1,-1 } true;
    $d1501 := $l1500;
    assert { :sourceloc "ScheduledReporter.java",72,-1,-1,-1 } true;
    $d2502 := $realOp32241($DoubleConst0, $d1501);
    assert { :sourceloc "ScheduledReporter.java",72,-1,-1,-1 } true;
    $heap := $heap[r0488,double$com.codahale.metrics.ScheduledReporter$durationFactor0 := $d2502];
    assert { :sourceloc "ScheduledReporter.java",73,-1,-1,-1 } true;
    call $r9503, $exception := java.lang.String$java.lang.Enum$toString$1942(r5498);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",73,-1,-1,-1 } true;
    $r11504 := java.util.Locale$java.util.Locale$US331;
    assert { :sourceloc "ScheduledReporter.java",73,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",73,-1,-1,-1 } $r9503 != $null;
    call $r10505, $exception := java.lang.String$java.lang.String$toLowerCase$119($r9503, $r11504);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",73,-1,-1,-1 } true;
    $heap := $heap[r0488,java.lang.String$com.codahale.metrics.ScheduledReporter$durationUnit310 := $r10505];
    assert { :sourceloc "ScheduledReporter.java",74,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$start$2441($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref){
    
var r0506 : ref;    
var l0509 : int;    
var $fakelocal_1 : ref;    
var $r2507 : ref;    
var $fakelocal_0 : ref;    
var $r3508 : ref;    
var r1510 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0506 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    l0509 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r1510 := $in_parameter__1;
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    $r3508 := $heap[r0506,java.util.concurrent.ScheduledExecutorService$com.codahale.metrics.ScheduledReporter$executor308];
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ScheduledReporter$1);
    $r2507 := $fakelocal_0;
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$1$$la$init$ra$$5615($r2507, r0506);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } $r3508 != $null;
    call $fakelocal_1, $exception := java.util.concurrent.ScheduledFuture$java.util.concurrent.ScheduledExecutorService$scheduleAtFixedRate$2667($r3508, $r2507, l0509, l0509, r1510);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",89,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$stop$2442($this:ref) returns ($exception:ref){
    
var r0512 : ref;    
var $fakelocal_0 : int;    
var $r4515 : ref;    
var $r3514 : ref;    
var $r5517 : ref;    
var $r2513 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0512 := $this;
    assert { :sourceloc "ScheduledReporter.java",95,-1,-1,-1 } true;
    $r2513 := $heap[r0512,java.util.concurrent.ScheduledExecutorService$com.codahale.metrics.ScheduledReporter$executor308];
    assert { :sourceloc "ScheduledReporter.java",95,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",95,-1,-1,-1 } $r2513 != $null;
    call $exception := void$java.util.concurrent.ExecutorService$shutdown$2688($r2513);
    if ($exception != $null) {
    }
  block22:
    assert { :sourceloc "ScheduledReporter.java",97,-1,-1,-1 } true;
    $r4515 := $heap[r0512,java.util.concurrent.ScheduledExecutorService$com.codahale.metrics.ScheduledReporter$executor308];
    assert { :sourceloc "ScheduledReporter.java",97,-1,-1,-1 } true;
    $r3514 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "ScheduledReporter.java",97,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",97,-1,-1,-1 } $r4515 != $null;
    call $fakelocal_0, $exception := boolean$java.util.concurrent.ExecutorService$awaitTermination$2692($r4515, 1, $r3514);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.InterruptedException) {
            havoc r0512, $fakelocal_0, $r4515, $r3514, $r2513, $exception, java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242, $heap;
            goto block23;
        } else {
            assert { :clone } true;
        }
    }
  block24:
    assert { :sourceloc "ScheduledReporter.java",100,-1,-1,-1 } true;
    goto block25;
  block23:
    assert { :sourceloc "ScheduledReporter.java",101,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r5517 := $exception;
  block25:
    assert { :sourceloc "ScheduledReporter.java",101,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$report$2443($this:ref) returns ($exception:ref){
    
var $r15534 : ref;    
var $r12531 : ref;    
var $r7526 : ref;    
var $r9528 : ref;    
var r0519 : ref;    
var $r8527 : ref;    
var $r4523 : ref;    
var $r11530 : ref;    
var $r6525 : ref;    
var $r3522 : ref;    
var $r2521 : ref;    
var $r1520 : ref;    
var $r10529 : ref;    
var $r14533 : ref;    
var $r13532 : ref;    
var $r5524 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0519 := $this;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r2521 := $heap[r0519,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r1520 := $heap[r0519,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } $r2521 != $null;
    call $r3522, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2569($r2521, $r1520);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r5524 := $heap[r0519,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r4523 := $heap[r0519,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } $r5524 != $null;
    call $r6525, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2571($r5524, $r4523);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r8527 := $heap[r0519,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r7526 := $heap[r0519,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } $r8527 != $null;
    call $r9528, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2573($r8527, $r7526);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r11530 := $heap[r0519,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r10529 := $heap[r0519,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } $r11530 != $null;
    call $r12531, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2575($r11530, $r10529);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r14533 := $heap[r0519,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ScheduledReporter$registry307];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    $r13532 := $heap[r0519,com.codahale.metrics.MetricFilter$com.codahale.metrics.ScheduledReporter$filter309];
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } $r14533 != $null;
    call $r15534, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2577($r14533, $r13532);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",107,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$report$2444(r0519, $r3522, $r6525, $r9528, $r12531, $r15534);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",112,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445($this:ref) returns ($return:ref, $exception:ref){
    
var $r1536 : ref;    
var r0535 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0535 := $this;
    assert { :sourceloc "ScheduledReporter.java",130,-1,-1,-1 } true;
    $r1536 := $heap[r0535,java.lang.String$com.codahale.metrics.ScheduledReporter$rateUnit311];
    assert { :sourceloc "ScheduledReporter.java",130,-1,-1,-1 } true;
    $return := $r1536;
    return;
}


implementation java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446($this:ref) returns ($return:ref, $exception:ref){
    
var $r1538 : ref;    
var r0537 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0537 := $this;
    assert { :sourceloc "ScheduledReporter.java",134,-1,-1,-1 } true;
    $r1538 := $heap[r0537,java.lang.String$com.codahale.metrics.ScheduledReporter$durationUnit310];
    assert { :sourceloc "ScheduledReporter.java",134,-1,-1,-1 } true;
    $return := $r1538;
    return;
}


implementation double$com.codahale.metrics.ScheduledReporter$convertDuration$2447($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var r0540 : ref;    
var $d2542 : int;    
var $d1541 : int;    
var d0539 : int;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0540 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    d0539 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",138,-1,-1,-1 } true;
    $d1541 := $heap[r0540,double$com.codahale.metrics.ScheduledReporter$durationFactor0];
    assert { :sourceloc "ScheduledReporter.java",138,-1,-1,-1 } true;
    $d2542 := $realOp32086(d0539, $d1541);
    assert { :sourceloc "ScheduledReporter.java",138,-1,-1,-1 } true;
    $return := $d2542;
    return;
}


implementation double$com.codahale.metrics.ScheduledReporter$convertRate$2448($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $d2546 : int;    
var $d1545 : int;    
var d0543 : int;    
var r0544 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0544 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    d0543 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",142,-1,-1,-1 } true;
    $d1545 := $heap[r0544,double$com.codahale.metrics.ScheduledReporter$rateFactor0];
    assert { :sourceloc "ScheduledReporter.java",142,-1,-1,-1 } true;
    $d2546 := $realOp32086(d0543, $d1545);
    assert { :sourceloc "ScheduledReporter.java",142,-1,-1,-1 } true;
    $return := $d2546;
    return;
}


implementation java.lang.String$com.codahale.metrics.ScheduledReporter$calculateRateUnit$2449($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $i1554 : int;    
var $r5555 : ref;    
var r1547 : ref;    
var r2551 : ref;    
var $r4549 : ref;    
var $r3548 : ref;    
var r0556 : ref;    
var $i0553 : int;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r0556 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r1547 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",146,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",146,-1,-1,-1 } r1547 != $null;
    call $r3548, $exception := java.lang.String$java.lang.Enum$toString$1942(r1547);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",146,-1,-1,-1 } true;
    $r4549 := java.util.Locale$java.util.Locale$US331;
    assert { :sourceloc "ScheduledReporter.java",146,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",146,-1,-1,-1 } $r3548 != $null;
    call r2551, $exception := java.lang.String$java.lang.String$toLowerCase$119($r3548, $r4549);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",147,-1,-1,-1 } true;
    $i0553 := $stringSizeHeap[r2551];
    assert { :sourceloc "ScheduledReporter.java",147,-1,-1,-1 } true;
    $i1554 := $i0553 - 1;
    assert { :sourceloc "ScheduledReporter.java",147,-1,-1,-1 } true;
    call $r5555, $exception := java.lang.String$java.lang.String$substring$108(r2551, 0, $i1554);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",147,-1,-1,-1 } true;
    $return := $r5555;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2542($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r2559 : ref;    
var r0557 : ref;    
var r1558 : ref;    
var $r4561 : ref;    
var $r3560 : ref;    
var $r8565 : ref;    
var $r6563 : ref;    
var $r5562 : ref;    
var $r7564 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0557 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1558 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",37,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0557);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",38,-1,-1,-1 } true;
    $heap := $heap[r0557,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ConsoleReporter$Builder$registry345 := r1558];
    assert { :sourceloc "ConsoleReporter.java",39,-1,-1,-1 } true;
    $r2559 := java.io.PrintStream$java.lang.System$out282;
    assert { :sourceloc "ConsoleReporter.java",39,-1,-1,-1 } true;
    $heap := $heap[r0557,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$Builder$output346 := $r2559];
    assert { :sourceloc "ConsoleReporter.java",40,-1,-1,-1 } true;
    call $r3560, $exception := java.util.Locale$java.util.Locale$getDefault$2458();
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",40,-1,-1,-1 } true;
    $heap := $heap[r0557,java.util.Locale$com.codahale.metrics.ConsoleReporter$Builder$locale347 := $r3560];
    assert { :sourceloc "ConsoleReporter.java",41,-1,-1,-1 } true;
    call $r4561, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",41,-1,-1,-1 } true;
    $heap := $heap[r0557,com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$Builder$clock348 := $r4561];
    assert { :sourceloc "ConsoleReporter.java",42,-1,-1,-1 } true;
    call $r5562, $exception := java.util.TimeZone$java.util.TimeZone$getDefault$2609();
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",42,-1,-1,-1 } true;
    $heap := $heap[r0557,java.util.TimeZone$com.codahale.metrics.ConsoleReporter$Builder$timeZone349 := $r5562];
    assert { :sourceloc "ConsoleReporter.java",43,-1,-1,-1 } true;
    $r6563 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "ConsoleReporter.java",43,-1,-1,-1 } true;
    $heap := $heap[r0557,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$rateUnit350 := $r6563];
    assert { :sourceloc "ConsoleReporter.java",44,-1,-1,-1 } true;
    $r7564 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "ConsoleReporter.java",44,-1,-1,-1 } true;
    $heap := $heap[r0557,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$durationUnit351 := $r7564];
    assert { :sourceloc "ConsoleReporter.java",45,-1,-1,-1 } true;
    $r8565 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "ConsoleReporter.java",45,-1,-1,-1 } true;
    $heap := $heap[r0557,com.codahale.metrics.MetricFilter$com.codahale.metrics.ConsoleReporter$Builder$filter352 := $r8565];
    assert { :sourceloc "ConsoleReporter.java",46,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$outputTo$2543($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1567 : ref;    
var r0566 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.io.PrintStream;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0566 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1567 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",55,-1,-1,-1 } true;
    $heap := $heap[r0566,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$Builder$output346 := r1567];
    assert { :sourceloc "ConsoleReporter.java",56,-1,-1,-1 } true;
    $return := r0566;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$formattedFor$2544($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1569 : ref;    
var r0568 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.Locale;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0568 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1569 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",66,-1,-1,-1 } true;
    $heap := $heap[r0568,java.util.Locale$com.codahale.metrics.ConsoleReporter$Builder$locale347 := r1569];
    assert { :sourceloc "ConsoleReporter.java",67,-1,-1,-1 } true;
    $return := r0568;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$withClock$2545($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r0570 : ref;    
var r1571 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Clock;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0570 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1571 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",77,-1,-1,-1 } true;
    $heap := $heap[r0570,com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$Builder$clock348 := r1571];
    assert { :sourceloc "ConsoleReporter.java",78,-1,-1,-1 } true;
    $return := r0570;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$formattedFor$2546($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r0572 : ref;    
var r1573 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.TimeZone;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0572 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1573 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",88,-1,-1,-1 } true;
    $heap := $heap[r0572,java.util.TimeZone$com.codahale.metrics.ConsoleReporter$Builder$timeZone349 := r1573];
    assert { :sourceloc "ConsoleReporter.java",89,-1,-1,-1 } true;
    $return := r0572;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$convertRatesTo$2547($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1575 : ref;    
var r0574 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0574 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1575 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",99,-1,-1,-1 } true;
    $heap := $heap[r0574,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$rateUnit350 := r1575];
    assert { :sourceloc "ConsoleReporter.java",100,-1,-1,-1 } true;
    $return := r0574;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$convertDurationsTo$2548($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r0576 : ref;    
var r1577 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0576 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1577 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",110,-1,-1,-1 } true;
    $heap := $heap[r0576,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$durationUnit351 := r1577];
    assert { :sourceloc "ConsoleReporter.java",111,-1,-1,-1 } true;
    $return := r0576;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$Builder$com.codahale.metrics.ConsoleReporter$Builder$filter$2549($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1579 : ref;    
var r0578 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0578 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1579 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",121,-1,-1,-1 } true;
    $heap := $heap[r0578,com.codahale.metrics.MetricFilter$com.codahale.metrics.ConsoleReporter$Builder$filter352 := r1579];
    assert { :sourceloc "ConsoleReporter.java",122,-1,-1,-1 } true;
    $return := r0578;
    return;
}


implementation com.codahale.metrics.ConsoleReporter$com.codahale.metrics.ConsoleReporter$Builder$build$2550($this:ref) returns ($return:ref, $exception:ref){
    
var $r3583 : ref;    
var $r4584 : ref;    
var $r1580 : ref;    
var r0581 : ref;    
var $r6586 : ref;    
var $r7587 : ref;    
var $r5585 : ref;    
var $r2582 : ref;    
var $fakelocal_0 : ref;    
var $r9589 : ref;    
var $r8588 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.ConsoleReporter;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0581 := $this;
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ConsoleReporter);
    $r1580 := $fakelocal_0;
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r9589 := $heap[r0581,com.codahale.metrics.MetricRegistry$com.codahale.metrics.ConsoleReporter$Builder$registry345];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r8588 := $heap[r0581,java.io.PrintStream$com.codahale.metrics.ConsoleReporter$Builder$output346];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r7587 := $heap[r0581,java.util.Locale$com.codahale.metrics.ConsoleReporter$Builder$locale347];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r6586 := $heap[r0581,com.codahale.metrics.Clock$com.codahale.metrics.ConsoleReporter$Builder$clock348];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r5585 := $heap[r0581,java.util.TimeZone$com.codahale.metrics.ConsoleReporter$Builder$timeZone349];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r4584 := $heap[r0581,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$rateUnit350];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r3583 := $heap[r0581,java.util.concurrent.TimeUnit$com.codahale.metrics.ConsoleReporter$Builder$durationUnit351];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $r2582 := $heap[r0581,com.codahale.metrics.MetricFilter$com.codahale.metrics.ConsoleReporter$Builder$filter352];
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$$la$init$ra$$2439($r1580, $r9589, $r8588, $r7587, $r6586, $r5585, $r4584, $r3583, $r2582, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",131,-1,-1,-1 } true;
    $return := $r1580;
    return;
}


implementation void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2551($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r1591 : ref;    
var r2592 : ref;    
var r0590 : ref;
    assume { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.ConsoleReporter$1;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r0590 := $this;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r1591 := $in_parameter__0;
    assert { :sourceloc "ConsoleReporter.java",-1,-1,-1,-1 } true;
    r2592 := $in_parameter__1;
    assert { :sourceloc "ConsoleReporter.java",27,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ConsoleReporter$Builder$$la$init$ra$$2542(r0590, r1591);
    if ($exception != $null) {
    }
    assert { :sourceloc "ConsoleReporter.java",27,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.MetricRegistry$name$2552($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var $r5593 : ref;    
var r4601 : ref;    
var r2594 : ref;    
var r0595 : ref;    
var $fakelocal_0 : ref;    
var $r6600 : ref;    
var i1599 : int;    
var i0598 : int;    
var r1596 : ref;    
var r3597 : ref;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0595 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1596 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",20,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.StringBuilder);
    $r5593 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",20,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r5593);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",20,-1,-1,-1 } true;
    r2594 := $r5593;
    assert { :sourceloc "MetricRegistry.java",21,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$append$2554(r2594, r0595);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    r3597 := r1596;
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } r3597 != $null;
    i0598 := $arrSizeHeap[r3597];
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    i1599 := 0;
  block26:
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    if (i1599 >= i0598) {
        assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } { :comment "thenblock" } true;
        goto block27;
    } else {
        assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",25,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",25,-1,-1,-1 } i1599 < $arrSizeHeap[r3597] && i1599 >= 0;
    r4601 := $refArrHeap[r3597][i1599];
    assert { :sourceloc "MetricRegistry.java",23,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$append$2554(r2594, r4601);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    i1599 := i1599 + 1;
    assert { :sourceloc "MetricRegistry.java",22,-1,-1,-1 } true;
    goto block26;
  block27:
    assert { :sourceloc "MetricRegistry.java",25,-1,-1,-1 } true;
    call $r6600, $exception := java.lang.String$java.lang.StringBuilder$toString$2791(r2594);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",25,-1,-1,-1 } true;
    $return := $r6600;
    return;
}


implementation java.lang.String$com.codahale.metrics.MetricRegistry$name$2553($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var $r2603 : ref;    
var r0602 : ref;    
var $r3605 : ref;    
var r1604 : ref;
    assume $heap[$return,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: java.lang.Class;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0602 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1604 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",37,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",37,-1,-1,-1 } r0602 != $null;
    call $r2603, $exception := java.lang.String$java.lang.Class$getName$458(r0602);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",37,-1,-1,-1 } true;
    call $r3605, $exception := java.lang.String$com.codahale.metrics.MetricRegistry$name$2552($r2603, r1604);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",37,-1,-1,-1 } true;
    $return := $r3605;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$append$2554($in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $fakelocal_1 : ref;    
var $i0609 : int;    
var $fakelocal_0 : ref;    
var r0608 : ref;    
var $z0607 : int;    
var r1606 : ref;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: java.lang.StringBuilder;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0608 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1606 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",41,-1,-1,-1 } true;
    if (r1606 == $null) {
        assert { :sourceloc "MetricRegistry.java",41,-1,-1,-1 } { :comment "thenblock" } true;
        goto block28;
    } else {
        assert { :sourceloc "MetricRegistry.java",41,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",47,-1,-1,-1 } true;
    call $z0607, $exception := boolean$java.lang.String$isEmpty$71(r1606);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",47,-1,-1,-1 } true;
    if ($z0607 != 0) {
        assert { :sourceloc "MetricRegistry.java",47,-1,-1,-1 } { :comment "thenblock" } true;
        goto block28;
    } else {
        assert { :sourceloc "MetricRegistry.java",47,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",42,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",42,-1,-1,-1 } r0608 != $null;
    call $i0609, $exception := int$java.lang.StringBuilder$length$2838(r0608);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",42,-1,-1,-1 } true;
    if ($i0609 <= 0) {
        assert { :sourceloc "MetricRegistry.java",42,-1,-1,-1 } { :comment "thenblock" } true;
        goto block29;
    } else {
        assert { :sourceloc "MetricRegistry.java",42,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",43,-1,-1,-1 } true;
    call $fakelocal_0, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2765(r0608, 46);
    if ($exception != $null) {
    }
  block29:
    assert { :sourceloc "MetricRegistry.java",45,-1,-1,-1 } true;
    call $fakelocal_1, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757(r0608, r1606);
    if ($exception != $null) {
    }
  block28:
    assert { :sourceloc "MetricRegistry.java",47,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$$la$init$ra$$2555($this:ref) returns ($exception:ref){
    
var r0612 : ref;    
var $r1613 : ref;    
var $r2614 : ref;    
var $fakelocal_0 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0612 := $this;
    assert { :sourceloc "MetricRegistry.java",55,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0612);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",56,-1,-1,-1 } true;
    call $r1613, $exception := java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$buildMap$2556(r0612);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",56,-1,-1,-1 } true;
    $heap := $heap[r0612,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353 := $r1613];
    assert { :sourceloc "MetricRegistry.java",57,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.CopyOnWriteArrayList);
    $r2614 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",57,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.CopyOnWriteArrayList$$la$init$ra$$4930($r2614);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",57,-1,-1,-1 } true;
    $heap := $heap[r0612,java.util.List$com.codahale.metrics.MetricRegistry$listeners354 := $r2614];
    assert { :sourceloc "MetricRegistry.java",58,-1,-1,-1 } true;
    return;
}


implementation java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$buildMap$2556($this:ref) returns ($return:ref, $exception:ref){
    
var $r1615 : ref;    
var $fakelocal_0 : ref;    
var r0616 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.concurrent.ConcurrentMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0616 := $this;
    assert { :sourceloc "MetricRegistry.java",68,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.ConcurrentHashMap);
    $r1615 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",68,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.ConcurrentHashMap$$la$init$ra$$5501($r1615);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",68,-1,-1,-1 } true;
    $return := $r1615;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$register$2557($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var $r6624 : ref;    
var $r9627 : ref;    
var $r5622 : ref;    
var $r7625 : ref;    
var $fakelocal_1 : ref;    
var $r11629 : ref;    
var $r10628 : ref;    
var $r4621 : ref;    
var r0619 : ref;    
var $r12630 : ref;    
var r3623 : ref;    
var r1620 : ref;    
var $z0618 : int;    
var r2617 : ref;    
var $fakelocal_0 : ref;    
var $r8626 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0619 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1620 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2617 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",82,-1,-1,-1 } true;
    $z0618 := $boolToInt(r2617 != $null && $heap[r2617,$type] <: com.codahale.metrics.MetricSet);
    assert { :sourceloc "MetricRegistry.java",82,-1,-1,-1 } true;
    if ($z0618 == 0) {
        assert { :sourceloc "MetricRegistry.java",82,-1,-1,-1 } { :comment "thenblock" } true;
        goto block30;
    } else {
        assert { :sourceloc "MetricRegistry.java",82,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",83,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",83,-1,-1,-1 } $heap[r2617,$type] <: com.codahale.metrics.MetricSet;
    $r12630 := r2617;
    assert { :sourceloc "MetricRegistry.java",83,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$registerAll$2584(r0619, r1620, $r12630);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "MetricRegistry.java",83,-1,-1,-1 } true;
    goto block31;
  block30:
    assert { :sourceloc "MetricRegistry.java",85,-1,-1,-1 } true;
    $r4621 := $heap[r0619,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",85,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",85,-1,-1,-1 } $r4621 != $null;
    call $r5622, $exception := java.lang.Object$java.util.concurrent.ConcurrentMap$putIfAbsent$2748($r4621, r1620, r2617);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",85,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",85,-1,-1,-1 } $heap[$r5622,$type] <: com.codahale.metrics.Metric;
    r3623 := $r5622;
    assert { :sourceloc "MetricRegistry.java",86,-1,-1,-1 } true;
    if (r3623 != $null) {
        assert { :sourceloc "MetricRegistry.java",86,-1,-1,-1 } { :comment "thenblock" } true;
        goto block32;
    } else {
        assert { :sourceloc "MetricRegistry.java",86,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",87,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$onMetricAdded$2580(r0619, r1620, r2617);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",87,-1,-1,-1 } true;
    goto block31;
  block32:
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r6624 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r7625 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r7625);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    call $r8626, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r7625, $StringConst36);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } $r8626 != $null;
    call $r9627, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r8626, r1620);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } $r9627 != $null;
    call $r10628, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r9627, $StringConst37);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } $r10628 != $null;
    call $r11629, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r10628);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r6624, $r11629);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",89,-1,-1,-1 } true;
    $exception := $r6624;
    return;
  block31:
    assert { :sourceloc "MetricRegistry.java",92,-1,-1,-1 } true;
    $return := r2617;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$registerAll$2558($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r1632 : ref;    
var r0631 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricSet;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0631 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1632 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",102,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$registerAll$2584(r0631, $null, r1632);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "MetricRegistry.java",103,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Counter$com.codahale.metrics.MetricRegistry$counter$2559($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r4637 : ref;    
var $r3636 : ref;    
var r0633 : ref;    
var $r2635 : ref;    
var r1634 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Counter;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0633 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1634 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",112,-1,-1,-1 } true;
    $r2635 := com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$COUNTERS378;
    assert { :sourceloc "MetricRegistry.java",112,-1,-1,-1 } true;
    call $r3636, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578(r0633, r1634, $r2635);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",112,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",112,-1,-1,-1 } $heap[$r3636,$type] <: com.codahale.metrics.Counter;
    $r4637 := $r3636;
    assert { :sourceloc "MetricRegistry.java",112,-1,-1,-1 } true;
    $return := $r4637;
    return;
}


implementation com.codahale.metrics.Histogram$com.codahale.metrics.MetricRegistry$histogram$2560($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r3641 : ref;    
var r1639 : ref;    
var $r2640 : ref;    
var $r4642 : ref;    
var r0638 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Histogram;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0638 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1639 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",122,-1,-1,-1 } true;
    $r2640 := com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$HISTOGRAMS379;
    assert { :sourceloc "MetricRegistry.java",122,-1,-1,-1 } true;
    call $r3641, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578(r0638, r1639, $r2640);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",122,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",122,-1,-1,-1 } $heap[$r3641,$type] <: com.codahale.metrics.Histogram;
    $r4642 := $r3641;
    assert { :sourceloc "MetricRegistry.java",122,-1,-1,-1 } true;
    $return := $r4642;
    return;
}


implementation com.codahale.metrics.Meter$com.codahale.metrics.MetricRegistry$meter$2561($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1644 : ref;    
var $r3646 : ref;    
var $r4647 : ref;    
var r0643 : ref;    
var $r2645 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: com.codahale.metrics.Meter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0643 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1644 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",132,-1,-1,-1 } true;
    $r2645 := com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$METERS380;
    assert { :sourceloc "MetricRegistry.java",132,-1,-1,-1 } true;
    call $r3646, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578(r0643, r1644, $r2645);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",132,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",132,-1,-1,-1 } $heap[$r3646,$type] <: com.codahale.metrics.Meter;
    $r4647 := $r3646;
    assert { :sourceloc "MetricRegistry.java",132,-1,-1,-1 } true;
    $return := $r4647;
    return;
}


implementation com.codahale.metrics.Timer$com.codahale.metrics.MetricRegistry$timer$2562($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r0648 : ref;    
var $r2650 : ref;    
var r1649 : ref;    
var $r3651 : ref;    
var $r4652 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0648 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1649 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",142,-1,-1,-1 } true;
    $r2650 := com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$TIMERS381;
    assert { :sourceloc "MetricRegistry.java",142,-1,-1,-1 } true;
    call $r3651, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578(r0648, r1649, $r2650);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",142,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",142,-1,-1,-1 } $heap[$r3651,$type] <: com.codahale.metrics.Timer;
    $r4652 := $r3651;
    assert { :sourceloc "MetricRegistry.java",142,-1,-1,-1 } true;
    $return := $r4652;
    return;
}


implementation boolean$com.codahale.metrics.MetricRegistry$remove$2563($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var r2657 : ref;    
var $r4656 : ref;    
var $r3655 : ref;    
var r1654 : ref;    
var r0653 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0653 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1654 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",152,-1,-1,-1 } true;
    $r3655 := $heap[r0653,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",152,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",152,-1,-1,-1 } $r3655 != $null;
    call $r4656, $exception := java.lang.Object$java.util.Map$remove$1162($r3655, r1654);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",152,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",152,-1,-1,-1 } $heap[$r4656,$type] <: com.codahale.metrics.Metric;
    r2657 := $r4656;
    assert { :sourceloc "MetricRegistry.java",153,-1,-1,-1 } true;
    if (r2657 == $null) {
        assert { :sourceloc "MetricRegistry.java",153,-1,-1,-1 } { :comment "thenblock" } true;
        goto block33;
    } else {
        assert { :sourceloc "MetricRegistry.java",153,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",154,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$onMetricRemoved$2582(r0653, r1654, r2657);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",155,-1,-1,-1 } true;
    $return := 1;
    return;
  block33:
    assert { :sourceloc "MetricRegistry.java",157,-1,-1,-1 } true;
    $return := 0;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$removeMatching$2564($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r6664 : ref;    
var $z0663 : int;    
var $r5660 : ref;    
var $fakelocal_0 : int;    
var r1666 : ref;    
var r3665 : ref;    
var $r7667 : ref;    
var r2662 : ref;    
var $z1671 : int;    
var r0658 : ref;    
var $r4659 : ref;    
var $r10670 : ref;    
var $r12673 : ref;    
var $r11672 : ref;    
var $r9669 : ref;    
var $r8668 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0658 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1666 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } true;
    $r4659 := $heap[r0658,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } $r4659 != $null;
    call $r5660, $exception := java.util.Set$java.util.Map$entrySet$1167($r4659);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } $r5660 != $null;
    call r2662, $exception := java.util.Iterator$java.util.Set$iterator$236($r5660);
    if ($exception != $null) {
    }
  block34:
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } r2662 != $null;
    call $z0663, $exception := boolean$java.util.Iterator$hasNext$1051(r2662);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } true;
    if ($z0663 == 0) {
        assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } { :comment "thenblock" } true;
        goto block35;
    } else {
        assert { :sourceloc "MetricRegistry.java",166,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",171,-1,-1,-1 } true;
    call $r6664, $exception := java.lang.Object$java.util.Iterator$next$1052(r2662);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",171,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",171,-1,-1,-1 } $heap[$r6664,$type] <: java.util.Map$Entry;
    r3665 := $r6664;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } r3665 != $null;
    call $r7667, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r3665);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } $heap[$r7667,$type] <: java.lang.String;
    $r8668 := $r7667;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    call $r9669, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r3665);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } $heap[$r9669,$type] <: com.codahale.metrics.Metric;
    $r10670 := $r9669;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } r1666 != $null;
    call $z1671, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620(r1666, $r8668, $r10670);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } true;
    if ($z1671 == 0) {
        assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } { :comment "thenblock" } true;
        goto block36;
    } else {
        assert { :sourceloc "MetricRegistry.java",167,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",168,-1,-1,-1 } true;
    call $r11672, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r3665);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",168,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",168,-1,-1,-1 } $heap[$r11672,$type] <: java.lang.String;
    $r12673 := $r11672;
    assert { :sourceloc "MetricRegistry.java",168,-1,-1,-1 } true;
    call $fakelocal_0, $exception := boolean$com.codahale.metrics.MetricRegistry$remove$2563(r0658, $r12673);
    if ($exception != $null) {
    }
  block36:
    assert { :sourceloc "MetricRegistry.java",170,-1,-1,-1 } true;
    goto block34;
  block35:
    assert { :sourceloc "MetricRegistry.java",171,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$addListener$2565($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r4677 : ref;    
var $r11689 : ref;    
var $fakelocal_0 : int;    
var $r5679 : ref;    
var r3685 : ref;    
var r0675 : ref;    
var $r9687 : ref;    
var $z1683 : int;    
var r1676 : ref;    
var $r6680 : ref;    
var $r7684 : ref;    
var $r10688 : ref;    
var r2682 : ref;    
var $r8686 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistryListener;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0675 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1676 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",182,-1,-1,-1 } true;
    $r4677 := $heap[r0675,java.util.List$com.codahale.metrics.MetricRegistry$listeners354];
    assert { :sourceloc "MetricRegistry.java",182,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",182,-1,-1,-1 } $r4677 != $null;
    call $fakelocal_0, $exception := boolean$java.util.List$add$158($r4677, r1676);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } true;
    $r5679 := $heap[r0675,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } $r5679 != $null;
    call $r6680, $exception := java.util.Set$java.util.Map$entrySet$1167($r5679);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } $r6680 != $null;
    call r2682, $exception := java.util.Iterator$java.util.Set$iterator$236($r6680);
    if ($exception != $null) {
    }
  block37:
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } r2682 != $null;
    call $z1683, $exception := boolean$java.util.Iterator$hasNext$1051(r2682);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } true;
    if ($z1683 == 0) {
        assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } { :comment "thenblock" } true;
        goto block38;
    } else {
        assert { :sourceloc "MetricRegistry.java",184,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",187,-1,-1,-1 } true;
    call $r7684, $exception := java.lang.Object$java.util.Iterator$next$1052(r2682);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",187,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",187,-1,-1,-1 } $heap[$r7684,$type] <: java.util.Map$Entry;
    r3685 := $r7684;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } r3685 != $null;
    call $r8686, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r3685);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } $heap[$r8686,$type] <: com.codahale.metrics.Metric;
    $r9687 := $r8686;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } true;
    call $r10688, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r3685);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } $heap[$r10688,$type] <: java.lang.String;
    $r11689 := $r10688;
    assert { :sourceloc "MetricRegistry.java",185,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$notifyListenerOfAddedMetric$2581(r0675, r1676, $r9687, $r11689);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",186,-1,-1,-1 } true;
    goto block37;
  block38:
    assert { :sourceloc "MetricRegistry.java",187,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$removeListener$2566($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r2692 : ref;    
var r0690 : ref;    
var $fakelocal_0 : int;    
var r1691 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistryListener;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0690 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1691 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",195,-1,-1,-1 } true;
    $r2692 := $heap[r0690,java.util.List$com.codahale.metrics.MetricRegistry$listeners354];
    assert { :sourceloc "MetricRegistry.java",195,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",195,-1,-1,-1 } $r2692 != $null;
    call $fakelocal_0, $exception := boolean$java.util.List$remove$159($r2692, r1691);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",196,-1,-1,-1 } true;
    return;
}


implementation java.util.SortedSet$com.codahale.metrics.MetricRegistry$getNames$2567($this:ref) returns ($return:ref, $exception:ref){
    
var $r4698 : ref;    
var $r2696 : ref;    
var $fakelocal_0 : ref;    
var $r1694 : ref;    
var $r3697 : ref;    
var r0695 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedSet;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0695 := $this;
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.TreeSet);
    $r1694 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    $r2696 := $heap[r0695,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } $r2696 != $null;
    call $r3697, $exception := java.util.Set$java.util.Map$keySet$1165($r2696);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    call $exception := void$java.util.TreeSet$$la$init$ra$$5380($r1694, $r3697);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    call $r4698, $exception := java.util.SortedSet$java.util.Collections$unmodifiableSortedSet$4758($r1694);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",204,-1,-1,-1 } true;
    $return := $r4698;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2568($this:ref) returns ($return:ref, $exception:ref){
    
var r0699 : ref;    
var $r1700 : ref;    
var $r2701 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0699 := $this;
    assert { :sourceloc "MetricRegistry.java",213,-1,-1,-1 } true;
    $r1700 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "MetricRegistry.java",213,-1,-1,-1 } true;
    call $r2701, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2569(r0699, $r1700);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",213,-1,-1,-1 } true;
    $return := $r2701;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getGauges$2569($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1703 : ref;    
var r0702 : ref;    
var $r2704 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0702 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1703 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",223,-1,-1,-1 } true;
    call $r2704, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579(r0702, CC$com$_$codahale$_$metrics$_$Gauge, r1703);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",223,-1,-1,-1 } true;
    $return := $r2704;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2570($this:ref) returns ($return:ref, $exception:ref){
    
var r0705 : ref;    
var $r2707 : ref;    
var $r1706 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0705 := $this;
    assert { :sourceloc "MetricRegistry.java",232,-1,-1,-1 } true;
    $r1706 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "MetricRegistry.java",232,-1,-1,-1 } true;
    call $r2707, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2571(r0705, $r1706);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",232,-1,-1,-1 } true;
    $return := $r2707;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getCounters$2571($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1709 : ref;    
var $r2710 : ref;    
var r0708 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0708 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1709 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",243,-1,-1,-1 } true;
    call $r2710, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579(r0708, CC$com$_$codahale$_$metrics$_$Counter, r1709);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",243,-1,-1,-1 } true;
    $return := $r2710;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2572($this:ref) returns ($return:ref, $exception:ref){
    
var r0711 : ref;    
var $r2713 : ref;    
var $r1712 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0711 := $this;
    assert { :sourceloc "MetricRegistry.java",252,-1,-1,-1 } true;
    $r1712 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "MetricRegistry.java",252,-1,-1,-1 } true;
    call $r2713, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2573(r0711, $r1712);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",252,-1,-1,-1 } true;
    $return := $r2713;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getHistograms$2573($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r1715 : ref;    
var $r2716 : ref;    
var r0714 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0714 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1715 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",263,-1,-1,-1 } true;
    call $r2716, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579(r0714, CC$com$_$codahale$_$metrics$_$Histogram, r1715);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",263,-1,-1,-1 } true;
    $return := $r2716;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2574($this:ref) returns ($return:ref, $exception:ref){
    
var $r2719 : ref;    
var $r1718 : ref;    
var r0717 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0717 := $this;
    assert { :sourceloc "MetricRegistry.java",272,-1,-1,-1 } true;
    $r1718 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "MetricRegistry.java",272,-1,-1,-1 } true;
    call $r2719, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2575(r0717, $r1718);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",272,-1,-1,-1 } true;
    $return := $r2719;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMeters$2575($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r2722 : ref;    
var r0720 : ref;    
var r1721 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0720 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1721 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",282,-1,-1,-1 } true;
    call $r2722, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579(r0720, CC$com$_$codahale$_$metrics$_$Meter, r1721);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",282,-1,-1,-1 } true;
    $return := $r2722;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2576($this:ref) returns ($return:ref, $exception:ref){
    
var r0723 : ref;    
var $r1724 : ref;    
var $r2725 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0723 := $this;
    assert { :sourceloc "MetricRegistry.java",291,-1,-1,-1 } true;
    $r1724 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "MetricRegistry.java",291,-1,-1,-1 } true;
    call $r2725, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2577(r0723, $r1724);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",291,-1,-1,-1 } true;
    $return := $r2725;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getTimers$2577($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r0726 : ref;    
var r1727 : ref;    
var $r2728 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0726 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1727 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",301,-1,-1,-1 } true;
    call $r2728, $exception := java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579(r0726, CC$com$_$codahale$_$metrics$_$Timer, r1727);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",301,-1,-1,-1 } true;
    $return := $r2728;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$getOrAdd$2578($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var r1730 : ref;    
var $r12740 : ref;    
var $r9737 : ref;    
var $r16743 : ref;    
var r5747 : ref;    
var r3733 : ref;    
var $r6731 : ref;    
var $r8736 : ref;    
var $fakelocal_1 : ref;    
var $z0735 : int;    
var r2734 : ref;    
var $fakelocal_0 : ref;    
var $r14742 : ref;    
var $r13741 : ref;    
var $r7732 : ref;    
var r0729 : ref;    
var $r17746 : ref;    
var $z1748 : int;    
var $r15745 : ref;    
var $r11739 : ref;    
var $r10738 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.MetricRegistry$MetricBuilder;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0729 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1730 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2734 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",306,-1,-1,-1 } true;
    $r6731 := $heap[r0729,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",306,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",306,-1,-1,-1 } $r6731 != $null;
    call $r7732, $exception := java.lang.Object$java.util.Map$get$1160($r6731, r1730);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",306,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",306,-1,-1,-1 } $heap[$r7732,$type] <: com.codahale.metrics.Metric;
    r3733 := $r7732;
    assert { :sourceloc "MetricRegistry.java",307,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",307,-1,-1,-1 } r2734 != $null;
    call $z0735, $exception := boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$isInstance$2865(r2734, r3733);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",307,-1,-1,-1 } true;
    if ($z0735 == 0) {
        assert { :sourceloc "MetricRegistry.java",307,-1,-1,-1 } { :comment "thenblock" } true;
        goto block39;
    } else {
        assert { :sourceloc "MetricRegistry.java",307,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",308,-1,-1,-1 } true;
    $return := r3733;
    return;
  block39:
    assert { :sourceloc "MetricRegistry.java",309,-1,-1,-1 } true;
    if (r3733 != $null) {
        assert { :sourceloc "MetricRegistry.java",309,-1,-1,-1 } { :comment "thenblock" } true;
        goto block40;
    } else {
        assert { :sourceloc "MetricRegistry.java",309,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block41:
    assert { :sourceloc "MetricRegistry.java",311,-1,-1,-1 } true;
    call $r13741, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$newMetric$2864(r2734);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            assert { :clone } true;
            goto block42;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "MetricRegistry.java",311,-1,-1,-1 } true;
    call $r14742, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$register$2557(r0729, r1730, $r13741);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            goto block42;
        } else {
            assert { :clone } true;
        }
    }
  block43:
    assert { :sourceloc "MetricRegistry.java",311,-1,-1,-1 } true;
    $return := $r14742;
    return;
  block42:
    assert { :sourceloc "MetricRegistry.java",308,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r16743 := $exception;
    assert { :sourceloc "MetricRegistry.java",313,-1,-1,-1 } true;
    $r15745 := $heap[r0729,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",313,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",313,-1,-1,-1 } $r15745 != $null;
    call $r17746, $exception := java.lang.Object$java.util.Map$get$1160($r15745, r1730);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",313,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",313,-1,-1,-1 } $heap[$r17746,$type] <: com.codahale.metrics.Metric;
    r5747 := $r17746;
    assert { :sourceloc "MetricRegistry.java",314,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",314,-1,-1,-1 } r2734 != $null;
    call $z1748, $exception := boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$isInstance$2865(r2734, r5747);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",314,-1,-1,-1 } true;
    if ($z1748 == 0) {
        assert { :sourceloc "MetricRegistry.java",314,-1,-1,-1 } { :comment "thenblock" } true;
        goto block40;
    } else {
        assert { :sourceloc "MetricRegistry.java",314,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",315,-1,-1,-1 } true;
    $return := r5747;
    return;
  block40:
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r8736 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r9737 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r9737);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    call $r10738, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r9737, r1730);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } $r10738 != $null;
    call $r11739, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r10738, $StringConst38);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } $r11739 != $null;
    call $r12740, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r11739);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r8736, $r12740);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",319,-1,-1,-1 } true;
    $exception := $r8736;
    return;
}


implementation java.util.SortedMap$com.codahale.metrics.MetricRegistry$getMetrics$2579($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var $r10758 : ref;    
var $z2768 : int;    
var $r17769 : ref;    
var $r9757 : ref;    
var $r13766 : ref;    
var $r19771 : ref;    
var $r15767 : ref;    
var $fakelocal_1 : ref;    
var r2763 : ref;    
var r1760 : ref;    
var $r8753 : ref;    
var $fakelocal_0 : ref;    
var $r7752 : ref;    
var r0751 : ref;    
var $r6749 : ref;    
var $z1762 : int;    
var r4755 : ref;    
var $z0756 : int;    
var $r14765 : ref;    
var $r12764 : ref;    
var r5759 : ref;    
var $r11761 : ref;    
var $r16770 : ref;    
var r3750 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__0,$type] <: java.lang.Class;
    assume $heap[$return,$type] <: java.util.SortedMap;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0751 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1760 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2763 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",324,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.TreeMap);
    $r6749 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",324,-1,-1,-1 } true;
    call $exception := void$java.util.TreeMap$$la$init$ra$$5411($r6749);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",324,-1,-1,-1 } true;
    r3750 := $r6749;
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } true;
    $r7752 := $heap[r0751,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } $r7752 != $null;
    call $r8753, $exception := java.util.Set$java.util.Map$entrySet$1167($r7752);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } $r8753 != $null;
    call r4755, $exception := java.util.Iterator$java.util.Set$iterator$236($r8753);
    if ($exception != $null) {
    }
  block44:
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } r4755 != $null;
    call $z0756, $exception := boolean$java.util.Iterator$hasNext$1051(r4755);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } true;
    if ($z0756 == 0) {
        assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } { :comment "thenblock" } true;
        goto block45;
    } else {
        assert { :sourceloc "MetricRegistry.java",325,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",331,-1,-1,-1 } true;
    call $r10758, $exception := java.lang.Object$java.util.Iterator$next$1052(r4755);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",331,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",331,-1,-1,-1 } $heap[$r10758,$type] <: java.util.Map$Entry;
    r5759 := $r10758;
    assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } r5759 != $null;
    call $r11761, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r5759);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } r1760 != $null;
    call $z1762, $exception := boolean$java.lang.Class$isInstance$451(r1760, $r11761);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } true;
    if ($z1762 == 0) {
        assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } { :comment "thenblock" } true;
        goto block46;
    } else {
        assert { :sourceloc "MetricRegistry.java",326,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    call $r12764, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r5759);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } $heap[$r12764,$type] <: java.lang.String;
    $r14765 := $r12764;
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    call $r13766, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r5759);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } $heap[$r13766,$type] <: com.codahale.metrics.Metric;
    $r15767 := $r13766;
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } r2763 != $null;
    call $z2768, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620(r2763, $r14765, $r15767);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    if ($z2768 == 0) {
        assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } { :comment "thenblock" } true;
        goto block46;
    } else {
        assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",328,-1,-1,-1 } true;
    call $r17769, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r5759);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",328,-1,-1,-1 } true;
    call $r16770, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r5759);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",328,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",328,-1,-1,-1 } $heap[$r16770,$type] <: com.codahale.metrics.Metric;
    $r19771 := $r16770;
    assert { :sourceloc "MetricRegistry.java",328,-1,-1,-1 } true;
    call $fakelocal_1, $exception := java.lang.Object$java.util.TreeMap$put$5429(r3750, $r17769, $r19771);
    if ($exception != $null) {
    }
  block46:
    assert { :sourceloc "MetricRegistry.java",330,-1,-1,-1 } true;
    goto block44;
  block45:
    assert { :sourceloc "MetricRegistry.java",331,-1,-1,-1 } true;
    call $r9757, $exception := java.util.SortedMap$java.util.Collections$unmodifiableSortedMap$4761(r3750);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",331,-1,-1,-1 } true;
    $return := $r9757;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$onMetricAdded$2580($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r1773 : ref;    
var r4776 : ref;    
var $z0777 : int;    
var $r0778 : ref;    
var r2781 : ref;    
var r3780 : ref;    
var r5779 : ref;    
var $r6774 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1773 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2781 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r3780 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } true;
    $r6774 := $heap[r1773,java.util.List$com.codahale.metrics.MetricRegistry$listeners354];
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } $r6774 != $null;
    call r4776, $exception := java.util.Iterator$java.util.List$iterator$155($r6774);
    if ($exception != $null) {
    }
  block47:
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } r4776 != $null;
    call $z0777, $exception := boolean$java.util.Iterator$hasNext$1051(r4776);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } true;
    if ($z0777 == 0) {
        assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } { :comment "thenblock" } true;
        goto block48;
    } else {
        assert { :sourceloc "MetricRegistry.java",335,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",338,-1,-1,-1 } true;
    call $r0778, $exception := java.lang.Object$java.util.Iterator$next$1052(r4776);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",338,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",338,-1,-1,-1 } $heap[$r0778,$type] <: com.codahale.metrics.MetricRegistryListener;
    r5779 := $r0778;
    assert { :sourceloc "MetricRegistry.java",336,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$notifyListenerOfAddedMetric$2581(r1773, r5779, r3780, r2781);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",337,-1,-1,-1 } true;
    goto block47;
  block48:
    assert { :sourceloc "MetricRegistry.java",338,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$notifyListenerOfAddedMetric$2581($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r0801 : ref;    
var r1794 : ref;    
var $r7791 : ref;    
var $z2785 : int;    
var $z4787 : int;    
var $z0783 : int;    
var $fakelocal_0 : ref;    
var $z3786 : int;    
var $r8792 : ref;    
var r2782 : ref;    
var $r10796 : ref;    
var $r9793 : ref;    
var $z1784 : int;    
var $r12797 : ref;    
var $fakelocal_1 : ref;    
var r3795 : ref;    
var $r4788 : ref;    
var $r14799 : ref;    
var $r11798 : ref;    
var $r6790 : ref;    
var $r13800 : ref;    
var $r5789 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistryListener;
    assume $heap[$in_parameter__2,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0801 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1794 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2782 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r3795 := $in_parameter__2;
    assert { :sourceloc "MetricRegistry.java",341,-1,-1,-1 } true;
    $z0783 := $boolToInt(r2782 != $null && $heap[r2782,$type] <: com.codahale.metrics.Gauge);
    assert { :sourceloc "MetricRegistry.java",341,-1,-1,-1 } true;
    if ($z0783 == 0) {
        assert { :sourceloc "MetricRegistry.java",341,-1,-1,-1 } { :comment "thenblock" } true;
        goto block49;
    } else {
        assert { :sourceloc "MetricRegistry.java",341,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",342,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",342,-1,-1,-1 } $heap[r2782,$type] <: com.codahale.metrics.Gauge;
    $r13800 := r2782;
    assert { :sourceloc "MetricRegistry.java",342,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",342,-1,-1,-1 } r1794 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onGaugeAdded$2848(r1794, r3795, $r13800);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",342,-1,-1,-1 } true;
    goto block50;
  block49:
    assert { :sourceloc "MetricRegistry.java",343,-1,-1,-1 } true;
    $z1784 := $boolToInt(r2782 != $null && $heap[r2782,$type] <: com.codahale.metrics.Counter);
    assert { :sourceloc "MetricRegistry.java",343,-1,-1,-1 } true;
    if ($z1784 == 0) {
        assert { :sourceloc "MetricRegistry.java",343,-1,-1,-1 } { :comment "thenblock" } true;
        goto block51;
    } else {
        assert { :sourceloc "MetricRegistry.java",343,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",344,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",344,-1,-1,-1 } $heap[r2782,$type] <: com.codahale.metrics.Counter;
    $r14799 := r2782;
    assert { :sourceloc "MetricRegistry.java",344,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",344,-1,-1,-1 } r1794 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onCounterAdded$2850(r1794, r3795, $r14799);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",344,-1,-1,-1 } true;
    goto block50;
  block51:
    assert { :sourceloc "MetricRegistry.java",345,-1,-1,-1 } true;
    $z2785 := $boolToInt(r2782 != $null && $heap[r2782,$type] <: com.codahale.metrics.Histogram);
    assert { :sourceloc "MetricRegistry.java",345,-1,-1,-1 } true;
    if ($z2785 == 0) {
        assert { :sourceloc "MetricRegistry.java",345,-1,-1,-1 } { :comment "thenblock" } true;
        goto block52;
    } else {
        assert { :sourceloc "MetricRegistry.java",345,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",346,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",346,-1,-1,-1 } $heap[r2782,$type] <: com.codahale.metrics.Histogram;
    $r11798 := r2782;
    assert { :sourceloc "MetricRegistry.java",346,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",346,-1,-1,-1 } r1794 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onHistogramAdded$2852(r1794, r3795, $r11798);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",346,-1,-1,-1 } true;
    goto block50;
  block52:
    assert { :sourceloc "MetricRegistry.java",347,-1,-1,-1 } true;
    $z3786 := $boolToInt(r2782 != $null && $heap[r2782,$type] <: com.codahale.metrics.Meter);
    assert { :sourceloc "MetricRegistry.java",347,-1,-1,-1 } true;
    if ($z3786 == 0) {
        assert { :sourceloc "MetricRegistry.java",347,-1,-1,-1 } { :comment "thenblock" } true;
        goto block53;
    } else {
        assert { :sourceloc "MetricRegistry.java",347,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",348,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",348,-1,-1,-1 } $heap[r2782,$type] <: com.codahale.metrics.Meter;
    $r12797 := r2782;
    assert { :sourceloc "MetricRegistry.java",348,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",348,-1,-1,-1 } r1794 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onMeterAdded$2854(r1794, r3795, $r12797);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",348,-1,-1,-1 } true;
    goto block50;
  block53:
    assert { :sourceloc "MetricRegistry.java",349,-1,-1,-1 } true;
    $z4787 := $boolToInt(r2782 != $null && $heap[r2782,$type] <: com.codahale.metrics.Timer);
    assert { :sourceloc "MetricRegistry.java",349,-1,-1,-1 } true;
    if ($z4787 == 0) {
        assert { :sourceloc "MetricRegistry.java",349,-1,-1,-1 } { :comment "thenblock" } true;
        goto block54;
    } else {
        assert { :sourceloc "MetricRegistry.java",349,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",350,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",350,-1,-1,-1 } $heap[r2782,$type] <: com.codahale.metrics.Timer;
    $r10796 := r2782;
    assert { :sourceloc "MetricRegistry.java",350,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",350,-1,-1,-1 } r1794 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onTimerAdded$2856(r1794, r3795, $r10796);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",350,-1,-1,-1 } true;
    goto block50;
  block54:
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r4788 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r5789 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r5789);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    call $r6790, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r5789, $StringConst39);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } r2782 != $null;
    call $r7791, $exception := java.lang.Class$java.lang.Object$getClass$40(r2782);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } $r6790 != $null;
    call $r8792, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2756($r6790, $r7791);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } $r8792 != $null;
    call $r9793, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r8792);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r4788, $r9793);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",352,-1,-1,-1 } true;
    $exception := $r4788;
    return;
  block50:
    assert { :sourceloc "MetricRegistry.java",354,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$onMetricRemoved$2582($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r1802 : ref;    
var r3810 : ref;    
var $r0807 : ref;    
var $r6803 : ref;    
var r4805 : ref;    
var $z0806 : int;    
var r2809 : ref;    
var r5808 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1802 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2809 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r3810 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } true;
    $r6803 := $heap[r1802,java.util.List$com.codahale.metrics.MetricRegistry$listeners354];
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } $r6803 != $null;
    call r4805, $exception := java.util.Iterator$java.util.List$iterator$155($r6803);
    if ($exception != $null) {
    }
  block55:
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } r4805 != $null;
    call $z0806, $exception := boolean$java.util.Iterator$hasNext$1051(r4805);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } true;
    if ($z0806 == 0) {
        assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } { :comment "thenblock" } true;
        goto block56;
    } else {
        assert { :sourceloc "MetricRegistry.java",357,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",360,-1,-1,-1 } true;
    call $r0807, $exception := java.lang.Object$java.util.Iterator$next$1052(r4805);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",360,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",360,-1,-1,-1 } $heap[$r0807,$type] <: com.codahale.metrics.MetricRegistryListener;
    r5808 := $r0807;
    assert { :sourceloc "MetricRegistry.java",358,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$notifyListenerOfRemovedMetric$2583(r1802, r2809, r3810, r5808);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",359,-1,-1,-1 } true;
    goto block55;
  block56:
    assert { :sourceloc "MetricRegistry.java",360,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$notifyListenerOfRemovedMetric$2583($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_1 : ref;    
var $z4816 : int;    
var r2811 : ref;    
var r1824 : ref;    
var $z1813 : int;    
var $r7820 : ref;    
var $r6819 : ref;    
var $r5818 : ref;    
var r0825 : ref;    
var $r9822 : ref;    
var $fakelocal_0 : ref;    
var $z0812 : int;    
var r3823 : ref;    
var $r4817 : ref;    
var $r8821 : ref;    
var $z3815 : int;    
var $z2814 : int;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricRegistryListener;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0825 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1824 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2811 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r3823 := $in_parameter__2;
    assert { :sourceloc "MetricRegistry.java",363,-1,-1,-1 } true;
    $z0812 := $boolToInt(r2811 != $null && $heap[r2811,$type] <: com.codahale.metrics.Gauge);
    assert { :sourceloc "MetricRegistry.java",363,-1,-1,-1 } true;
    if ($z0812 == 0) {
        assert { :sourceloc "MetricRegistry.java",363,-1,-1,-1 } { :comment "thenblock" } true;
        goto block57;
    } else {
        assert { :sourceloc "MetricRegistry.java",363,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",364,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",364,-1,-1,-1 } r3823 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onGaugeRemoved$2849(r3823, r1824);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",364,-1,-1,-1 } true;
    goto block58;
  block57:
    assert { :sourceloc "MetricRegistry.java",365,-1,-1,-1 } true;
    $z1813 := $boolToInt(r2811 != $null && $heap[r2811,$type] <: com.codahale.metrics.Counter);
    assert { :sourceloc "MetricRegistry.java",365,-1,-1,-1 } true;
    if ($z1813 == 0) {
        assert { :sourceloc "MetricRegistry.java",365,-1,-1,-1 } { :comment "thenblock" } true;
        goto block59;
    } else {
        assert { :sourceloc "MetricRegistry.java",365,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",366,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",366,-1,-1,-1 } r3823 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onCounterRemoved$2851(r3823, r1824);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",366,-1,-1,-1 } true;
    goto block58;
  block59:
    assert { :sourceloc "MetricRegistry.java",367,-1,-1,-1 } true;
    $z2814 := $boolToInt(r2811 != $null && $heap[r2811,$type] <: com.codahale.metrics.Histogram);
    assert { :sourceloc "MetricRegistry.java",367,-1,-1,-1 } true;
    if ($z2814 == 0) {
        assert { :sourceloc "MetricRegistry.java",367,-1,-1,-1 } { :comment "thenblock" } true;
        goto block60;
    } else {
        assert { :sourceloc "MetricRegistry.java",367,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",368,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",368,-1,-1,-1 } r3823 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onHistogramRemoved$2853(r3823, r1824);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",368,-1,-1,-1 } true;
    goto block58;
  block60:
    assert { :sourceloc "MetricRegistry.java",369,-1,-1,-1 } true;
    $z3815 := $boolToInt(r2811 != $null && $heap[r2811,$type] <: com.codahale.metrics.Meter);
    assert { :sourceloc "MetricRegistry.java",369,-1,-1,-1 } true;
    if ($z3815 == 0) {
        assert { :sourceloc "MetricRegistry.java",369,-1,-1,-1 } { :comment "thenblock" } true;
        goto block61;
    } else {
        assert { :sourceloc "MetricRegistry.java",369,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",370,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",370,-1,-1,-1 } r3823 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onMeterRemoved$2855(r3823, r1824);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",370,-1,-1,-1 } true;
    goto block58;
  block61:
    assert { :sourceloc "MetricRegistry.java",371,-1,-1,-1 } true;
    $z4816 := $boolToInt(r2811 != $null && $heap[r2811,$type] <: com.codahale.metrics.Timer);
    assert { :sourceloc "MetricRegistry.java",371,-1,-1,-1 } true;
    if ($z4816 == 0) {
        assert { :sourceloc "MetricRegistry.java",371,-1,-1,-1 } { :comment "thenblock" } true;
        goto block62;
    } else {
        assert { :sourceloc "MetricRegistry.java",371,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",372,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",372,-1,-1,-1 } r3823 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistryListener$onTimerRemoved$2857(r3823, r1824);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",372,-1,-1,-1 } true;
    goto block58;
  block62:
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r4817 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r5818 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r5818);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    call $r6819, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r5818, $StringConst39);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } r2811 != $null;
    call $r7820, $exception := java.lang.Class$java.lang.Object$getClass$40(r2811);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } $r6819 != $null;
    call $r8821, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2756($r6819, $r7820);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } $r8821 != $null;
    call $r9822, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r8821);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r4817, $r9822);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",374,-1,-1,-1 } true;
    $exception := $r4817;
    return;
  block58:
    assert { :sourceloc "MetricRegistry.java",376,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$registerAll$2584($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r8834 : ref;    
var $r16846 : ref;    
var $r9838 : ref;    
var $r11841 : ref;    
var $r12843 : ref;    
var $r18848 : ref;    
var $r17849 : ref;    
var r2826 : ref;    
var $z0831 : int;    
var $fakelocal_2 : ref;    
var $r19851 : ref;    
var $r15844 : ref;    
var r0836 : ref;    
var $r20850 : ref;    
var $r13842 : ref;    
var r3830 : ref;    
var $fakelocal_0 : ref;    
var $z1835 : int;    
var $fakelocal_1 : ref;    
var $r10840 : ref;    
var $r7832 : ref;    
var $r6828 : ref;    
var $r5827 : ref;    
var r4833 : ref;    
var r1837 : ref;    
var $r21852 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.MetricSet;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0836 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r1837 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r2826 := $in_parameter__1;
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } r2826 != $null;
    call $r5827, $exception := java.util.Map$com.codahale.metrics.MetricSet$getMetrics$2680(r2826);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } $r5827 != $null;
    call $r6828, $exception := java.util.Set$java.util.Map$entrySet$1167($r5827);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } $r6828 != $null;
    call r3830, $exception := java.util.Iterator$java.util.Set$iterator$236($r6828);
    if ($exception != $null) {
    }
  block63:
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } r3830 != $null;
    call $z0831, $exception := boolean$java.util.Iterator$hasNext$1051(r3830);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } true;
    if ($z0831 == 0) {
        assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } { :comment "thenblock" } true;
        goto block64;
    } else {
        assert { :sourceloc "MetricRegistry.java",379,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",386,-1,-1,-1 } true;
    call $r7832, $exception := java.lang.Object$java.util.Iterator$next$1052(r3830);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",386,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",386,-1,-1,-1 } $heap[$r7832,$type] <: java.util.Map$Entry;
    r4833 := $r7832;
    assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } r4833 != $null;
    call $r8834, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r4833);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } true;
    $z1835 := $boolToInt($r8834 != $null && $heap[$r8834,$type] <: com.codahale.metrics.MetricSet);
    assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } true;
    if ($z1835 == 0) {
        assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } { :comment "thenblock" } true;
        goto block65;
    } else {
        assert { :sourceloc "MetricRegistry.java",380,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.String));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r16846 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    call $r18848, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r4833);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } $heap[$r18848,$type] <: java.lang.String;
    $r17849 := $r18848;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } 0 < $arrSizeHeap[$r16846] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r16846 := $refArrHeap[$r16846][0 := $r17849]];
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    call $r20850, $exception := java.lang.String$com.codahale.metrics.MetricRegistry$name$2552(r1837, $r16846);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    call $r19851, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r4833);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } $heap[$r19851,$type] <: com.codahale.metrics.MetricSet;
    $r21852 := $r19851;
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$registerAll$2584(r0836, $r20850, $r21852);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "MetricRegistry.java",381,-1,-1,-1 } true;
    goto block66;
  block65:
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    call $fakelocal_1 := $new($arrayType(java.lang.String));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_1 := 1];
    $r9838 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    call $r10840, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r4833);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } $heap[$r10840,$type] <: java.lang.String;
    $r11841 := $r10840;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } 0 < $arrSizeHeap[$r9838] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r9838 := $refArrHeap[$r9838][0 := $r11841]];
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    call $r13842, $exception := java.lang.String$com.codahale.metrics.MetricRegistry$name$2552(r1837, $r9838);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    call $r12843, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r4833);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } $heap[$r12843,$type] <: com.codahale.metrics.Metric;
    $r15844 := $r12843;
    assert { :sourceloc "MetricRegistry.java",383,-1,-1,-1 } true;
    call $fakelocal_2, $exception := com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$register$2557(r0836, $r13842, $r15844);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalArgumentException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
  block66:
    assert { :sourceloc "MetricRegistry.java",385,-1,-1,-1 } true;
    goto block63;
  block64:
    assert { :sourceloc "MetricRegistry.java",386,-1,-1,-1 } true;
    return;
}


implementation java.util.Map$com.codahale.metrics.MetricRegistry$getMetrics$2585($this:ref) returns ($return:ref, $exception:ref){
    
var $r2855 : ref;    
var $r1854 : ref;    
var r0853 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.Map;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r0853 := $this;
    assert { :sourceloc "MetricRegistry.java",390,-1,-1,-1 } true;
    $r1854 := $heap[r0853,java.util.concurrent.ConcurrentMap$com.codahale.metrics.MetricRegistry$metrics353];
    assert { :sourceloc "MetricRegistry.java",390,-1,-1,-1 } true;
    call $r2855, $exception := java.util.Map$java.util.Collections$unmodifiableMap$4760($r1854);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",390,-1,-1,-1 } true;
    $return := $r2855;
    return;
}


implementation void$com.codahale.metrics.MetricFilter$$la$clinit$ra$$2621() returns ($exception:ref){
    
var $r0856 : ref;    
var $fakelocal_0 : ref;
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.MetricFilter$1);
    $r0856 := $fakelocal_0;
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricFilter$1$$la$init$ra$$5359($r0856);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360 := $r0856;
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Meter$$la$init$ra$$2631($this:ref) returns ($exception:ref){
    
var r0857 : ref;    
var $r1858 : ref;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0857 := $this;
    assert { :sourceloc "Meter.java",28,-1,-1,-1 } true;
    call $r1858, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",28,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$$la$init$ra$$2632(r0857, $r1858);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",29,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Meter$$la$init$ra$$2632($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r6865 : ref;    
var r0859 : ref;    
var $l0866 : int;    
var $r4862 : ref;    
var $r2860 : ref;    
var $fakelocal_1 : ref;    
var $fakelocal_0 : ref;    
var $l1868 : int;    
var $r3861 : ref;    
var $r5863 : ref;    
var $r7867 : ref;    
var r1864 : ref;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0859 := $this;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r1864 := $in_parameter__0;
    assert { :sourceloc "Meter.java",36,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0859);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",15,-1,-1,-1 } true;
    call $r2860, $exception := com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$oneMinuteEWMA$3331();
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",15,-1,-1,-1 } true;
    $heap := $heap[r0859,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m1Rate361 := $r2860];
    assert { :sourceloc "Meter.java",16,-1,-1,-1 } true;
    call $r3861, $exception := com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fiveMinuteEWMA$3332();
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",16,-1,-1,-1 } true;
    $heap := $heap[r0859,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m5Rate362 := $r3861];
    assert { :sourceloc "Meter.java",17,-1,-1,-1 } true;
    call $r4862, $exception := com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fifteenMinuteEWMA$3333();
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",17,-1,-1,-1 } true;
    $heap := $heap[r0859,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m15Rate363 := $r4862];
    assert { :sourceloc "Meter.java",19,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.LongAdder);
    $r5863 := $fakelocal_0;
    assert { :sourceloc "Meter.java",19,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($r5863);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",19,-1,-1,-1 } true;
    $heap := $heap[r0859,com.codahale.metrics.LongAdder$com.codahale.metrics.Meter$count364 := $r5863];
    assert { :sourceloc "Meter.java",37,-1,-1,-1 } true;
    $heap := $heap[r0859,com.codahale.metrics.Clock$com.codahale.metrics.Meter$clock366 := r1864];
    assert { :sourceloc "Meter.java",38,-1,-1,-1 } true;
    $r6865 := $heap[r0859,com.codahale.metrics.Clock$com.codahale.metrics.Meter$clock366];
    assert { :sourceloc "Meter.java",38,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",38,-1,-1,-1 } $r6865 != $null;
    call $l0866, $exception := long$com.codahale.metrics.Clock$getTick$1896($r6865);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",38,-1,-1,-1 } true;
    $heap := $heap[r0859,long$com.codahale.metrics.Meter$startTime0 := $l0866];
    assert { :sourceloc "Meter.java",39,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.util.concurrent.atomic.AtomicLong);
    $r7867 := $fakelocal_1;
    assert { :sourceloc "Meter.java",39,-1,-1,-1 } true;
    $l1868 := $heap[r0859,long$com.codahale.metrics.Meter$startTime0];
    assert { :sourceloc "Meter.java",39,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1901($r7867, $l1868);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",39,-1,-1,-1 } true;
    $heap := $heap[r0859,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.Meter$lastTick365 := $r7867];
    assert { :sourceloc "Meter.java",40,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Meter$mark$2633($this:ref) returns ($exception:ref){
    
var r0869 : ref;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0869 := $this;
    assert { :sourceloc "Meter.java",46,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$mark$2634(r0869, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",47,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Meter$mark$2634($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $r4875 : ref;    
var $r1872 : ref;    
var $r3874 : ref;    
var $r2873 : ref;    
var r0870 : ref;    
var l0871 : int;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0870 := $this;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    l0871 := $in_parameter__0;
    assert { :sourceloc "Meter.java",55,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$tickIfNecessary$2635(r0870);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",56,-1,-1,-1 } true;
    $r1872 := $heap[r0870,com.codahale.metrics.LongAdder$com.codahale.metrics.Meter$count364];
    assert { :sourceloc "Meter.java",56,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",56,-1,-1,-1 } $r1872 != $null;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341($r1872, l0871);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",57,-1,-1,-1 } true;
    $r2873 := $heap[r0870,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m1Rate361];
    assert { :sourceloc "Meter.java",57,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",57,-1,-1,-1 } $r2873 != $null;
    call $exception := void$com.codahale.metrics.EWMA$update$3335($r2873, l0871);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",58,-1,-1,-1 } true;
    $r3874 := $heap[r0870,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m5Rate362];
    assert { :sourceloc "Meter.java",58,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",58,-1,-1,-1 } $r3874 != $null;
    call $exception := void$com.codahale.metrics.EWMA$update$3335($r3874, l0871);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",59,-1,-1,-1 } true;
    $r4875 := $heap[r0870,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m15Rate363];
    assert { :sourceloc "Meter.java",59,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",59,-1,-1,-1 } $r4875 != $null;
    call $exception := void$com.codahale.metrics.EWMA$update$3335($r4875, l0871);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",60,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Meter$tickIfNecessary$2635($this:ref) returns ($exception:ref){
    
var l2883 : int;    
var r0876 : ref;    
var l0879 : int;    
var $r1877 : ref;    
var $z0887 : int;    
var $r5894 : ref;    
var l1882 : int;    
var $l5884 : int;    
var l3889 : int;    
var $b6885 : int;    
var $l7888 : int;    
var $r6893 : ref;    
var $r4892 : ref;    
var $b8891 : int;    
var $r3886 : ref;    
var $r2880 : ref;    
var l4890 : int;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0876 := $this;
    assert { :sourceloc "Meter.java",63,-1,-1,-1 } true;
    $r1877 := $heap[r0876,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.Meter$lastTick365];
    assert { :sourceloc "Meter.java",63,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",63,-1,-1,-1 } $r1877 != $null;
    call l0879, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r1877);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",64,-1,-1,-1 } true;
    $r2880 := $heap[r0876,com.codahale.metrics.Clock$com.codahale.metrics.Meter$clock366];
    assert { :sourceloc "Meter.java",64,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",64,-1,-1,-1 } $r2880 != $null;
    call l1882, $exception := long$com.codahale.metrics.Clock$getTick$1896($r2880);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",65,-1,-1,-1 } true;
    l2883 := l1882 - l0879;
    assert { :sourceloc "Meter.java",66,-1,-1,-1 } true;
    $l5884 := long$com.codahale.metrics.Meter$TICK_INTERVAL0;
    assert { :sourceloc "Meter.java",66,-1,-1,-1 } true;
    $b6885 := $cmpInt(l2883, $l5884);
    assert { :sourceloc "Meter.java",66,-1,-1,-1 } true;
    if ($b6885 <= 0) {
        assert { :sourceloc "Meter.java",66,-1,-1,-1 } { :comment "thenblock" } true;
        goto block67;
    } else {
        assert { :sourceloc "Meter.java",66,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Meter.java",74,-1,-1,-1 } true;
    $r3886 := $heap[r0876,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.Meter$lastTick365];
    assert { :sourceloc "Meter.java",74,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",74,-1,-1,-1 } $r3886 != $null;
    call $z0887, $exception := boolean$java.util.concurrent.atomic.AtomicLong$compareAndSet$1907($r3886, l0879, l1882);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",74,-1,-1,-1 } true;
    if ($z0887 == 0) {
        assert { :sourceloc "Meter.java",74,-1,-1,-1 } { :comment "thenblock" } true;
        goto block67;
    } else {
        assert { :sourceloc "Meter.java",74,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Meter.java",67,-1,-1,-1 } true;
    $l7888 := long$com.codahale.metrics.Meter$TICK_INTERVAL0;
    assert { :sourceloc "Meter.java",67,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",67,-1,-1,-1 } $l7888 != 0;
    l3889 := l2883 div $l7888;
    assert { :sourceloc "Meter.java",68,-1,-1,-1 } true;
    l4890 := 0;
  block68:
    assert { :sourceloc "Meter.java",68,-1,-1,-1 } true;
    $b8891 := $cmpInt(l4890, l3889);
    assert { :sourceloc "Meter.java",68,-1,-1,-1 } true;
    if ($b8891 >= 0) {
        assert { :sourceloc "Meter.java",68,-1,-1,-1 } { :comment "thenblock" } true;
        goto block67;
    } else {
        assert { :sourceloc "Meter.java",68,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Meter.java",69,-1,-1,-1 } true;
    $r4892 := $heap[r0876,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m1Rate361];
    assert { :sourceloc "Meter.java",69,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",69,-1,-1,-1 } $r4892 != $null;
    call $exception := void$com.codahale.metrics.EWMA$tick$3336($r4892);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",70,-1,-1,-1 } true;
    $r6893 := $heap[r0876,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m5Rate362];
    assert { :sourceloc "Meter.java",70,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",70,-1,-1,-1 } $r6893 != $null;
    call $exception := void$com.codahale.metrics.EWMA$tick$3336($r6893);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",71,-1,-1,-1 } true;
    $r5894 := $heap[r0876,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m15Rate363];
    assert { :sourceloc "Meter.java",71,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",71,-1,-1,-1 } $r5894 != $null;
    call $exception := void$com.codahale.metrics.EWMA$tick$3336($r5894);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",68,-1,-1,-1 } true;
    l4890 := l4890 + 1;
    assert { :sourceloc "Meter.java",68,-1,-1,-1 } true;
    goto block68;
  block67:
    assert { :sourceloc "Meter.java",74,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Meter$getCount$2636($this:ref) returns ($return:int, $exception:ref){
    
var $r1896 : ref;    
var r0895 : ref;    
var $l0897 : int;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0895 := $this;
    assert { :sourceloc "Meter.java",78,-1,-1,-1 } true;
    $r1896 := $heap[r0895,com.codahale.metrics.LongAdder$com.codahale.metrics.Meter$count364];
    assert { :sourceloc "Meter.java",78,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",78,-1,-1,-1 } $r1896 != $null;
    call $l0897, $exception := long$com.codahale.metrics.LongAdder$sum$3344($r1896);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",78,-1,-1,-1 } true;
    $return := $l0897;
    return;
}


implementation double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637($this:ref) returns ($return:int, $exception:ref){
    
var r0898 : ref;    
var $d0901 : int;    
var $r2900 : ref;    
var $r1899 : ref;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0898 := $this;
    assert { :sourceloc "Meter.java",83,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$tickIfNecessary$2635(r0898);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",84,-1,-1,-1 } true;
    $r2900 := $heap[r0898,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m15Rate363];
    assert { :sourceloc "Meter.java",84,-1,-1,-1 } true;
    $r1899 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Meter.java",84,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",84,-1,-1,-1 } $r2900 != $null;
    call $d0901, $exception := double$com.codahale.metrics.EWMA$getRate$3337($r2900, $r1899);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",84,-1,-1,-1 } true;
    $return := $d0901;
    return;
}


implementation double$com.codahale.metrics.Meter$getFiveMinuteRate$2638($this:ref) returns ($return:int, $exception:ref){
    
var $r1903 : ref;    
var $r2904 : ref;    
var r0902 : ref;    
var $d0905 : int;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0902 := $this;
    assert { :sourceloc "Meter.java",89,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$tickIfNecessary$2635(r0902);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",90,-1,-1,-1 } true;
    $r2904 := $heap[r0902,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m5Rate362];
    assert { :sourceloc "Meter.java",90,-1,-1,-1 } true;
    $r1903 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Meter.java",90,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",90,-1,-1,-1 } $r2904 != $null;
    call $d0905, $exception := double$com.codahale.metrics.EWMA$getRate$3337($r2904, $r1903);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",90,-1,-1,-1 } true;
    $return := $d0905;
    return;
}


implementation double$com.codahale.metrics.Meter$getMeanRate$2639($this:ref) returns ($return:int, $exception:ref){
    
var $l3911 : int;    
var $r1909 : ref;    
var $l4912 : int;    
var $r2916 : ref;    
var $l0907 : int;    
var $d2917 : int;    
var $l2910 : int;    
var $d1915 : int;    
var $l5914 : int;    
var $b1908 : int;    
var r0906 : ref;    
var $l6918 : int;    
var $d3919 : int;    
var $d4920 : int;    
var d0913 : int;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0906 := $this;
    assert { :sourceloc "Meter.java",95,-1,-1,-1 } true;
    call $l0907, $exception := long$com.codahale.metrics.Meter$getCount$2636(r0906);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",95,-1,-1,-1 } true;
    $b1908 := $cmpInt($l0907, 0);
    assert { :sourceloc "Meter.java",95,-1,-1,-1 } true;
    if ($b1908 != 0) {
        assert { :sourceloc "Meter.java",95,-1,-1,-1 } { :comment "thenblock" } true;
        goto block69;
    } else {
        assert { :sourceloc "Meter.java",95,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Meter.java",96,-1,-1,-1 } true;
    $return := $DoubleConst1;
    return;
  block69:
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } true;
    $r1909 := $heap[r0906,com.codahale.metrics.Clock$com.codahale.metrics.Meter$clock366];
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } $r1909 != $null;
    call $l2910, $exception := long$com.codahale.metrics.Clock$getTick$1896($r1909);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } true;
    $l3911 := $heap[r0906,long$com.codahale.metrics.Meter$startTime0];
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } true;
    $l4912 := $l2910 - $l3911;
    assert { :sourceloc "Meter.java",98,-1,-1,-1 } true;
    d0913 := $l4912;
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    call $l5914, $exception := long$com.codahale.metrics.Meter$getCount$2636(r0906);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $d1915 := $l5914;
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $d2917 := $realOp32241($d1915, d0913);
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $r2916 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } $r2916 != $null;
    call $l6918, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926($r2916, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $d3919 := $l6918;
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $d4920 := $realOp32086($d2917, $d3919);
    assert { :sourceloc "Meter.java",99,-1,-1,-1 } true;
    $return := $d4920;
    return;
}


implementation double$com.codahale.metrics.Meter$getOneMinuteRate$2640($this:ref) returns ($return:int, $exception:ref){
    
var $r2923 : ref;    
var r0921 : ref;    
var $d0924 : int;    
var $r1922 : ref;
    assume { :sourceloc "Meter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Meter.java",-1,-1,-1,-1 } true;
    r0921 := $this;
    assert { :sourceloc "Meter.java",105,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$tickIfNecessary$2635(r0921);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",106,-1,-1,-1 } true;
    $r2923 := $heap[r0921,com.codahale.metrics.EWMA$com.codahale.metrics.Meter$m1Rate361];
    assert { :sourceloc "Meter.java",106,-1,-1,-1 } true;
    $r1922 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Meter.java",106,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",106,-1,-1,-1 } $r2923 != $null;
    call $d0924, $exception := double$com.codahale.metrics.EWMA$getRate$3337($r2923, $r1922);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",106,-1,-1,-1 } true;
    $return := $d0924;
    return;
}


implementation void$com.codahale.metrics.Meter$$la$clinit$ra$$2641() returns ($exception:ref){
    
var $l0926 : int;    
var $r0925 : ref;
    assert { :sourceloc "Meter.java",13,-1,-1,-1 } true;
    $r0925 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Meter.java",13,-1,-1,-1 } true;
    assert { :sourceloc "Meter.java",13,-1,-1,-1 } $r0925 != $null;
    call $l0926, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926($r0925, 5);
    if ($exception != $null) {
    }
    assert { :sourceloc "Meter.java",13,-1,-1,-1 } true;
    long$com.codahale.metrics.Meter$TICK_INTERVAL0 := $l0926;
    assert { :sourceloc "Meter.java",13,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Histogram$$la$init$ra$$2647($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r1928 : ref;    
var r0927 : ref;    
var $r2929 : ref;
    assume { :sourceloc "Histogram.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Reservoir;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r0927 := $this;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r1928 := $in_parameter__0;
    assert { :sourceloc "Histogram.java",18,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0927);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",19,-1,-1,-1 } true;
    $heap := $heap[r0927,com.codahale.metrics.Reservoir$com.codahale.metrics.Histogram$reservoir367 := r1928];
    assert { :sourceloc "Histogram.java",20,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.LongAdder);
    $r2929 := $fakelocal_0;
    assert { :sourceloc "Histogram.java",20,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($r2929);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",20,-1,-1,-1 } true;
    $heap := $heap[r0927,com.codahale.metrics.LongAdder$com.codahale.metrics.Histogram$count368 := $r2929];
    assert { :sourceloc "Histogram.java",21,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Histogram$update$2648($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r0930 : ref;    
var i0931 : int;    
var $l1932 : int;
    assume { :sourceloc "Histogram.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r0930 := $this;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    i0931 := $in_parameter__0;
    assert { :sourceloc "Histogram.java",29,-1,-1,-1 } true;
    $l1932 := i0931;
    assert { :sourceloc "Histogram.java",29,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Histogram$update$2649(r0930, $l1932);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",30,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Histogram$update$2649($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r0933 : ref;    
var l0935 : int;    
var $r1934 : ref;    
var $r2936 : ref;
    assume { :sourceloc "Histogram.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r0933 := $this;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    l0935 := $in_parameter__0;
    assert { :sourceloc "Histogram.java",38,-1,-1,-1 } true;
    $r1934 := $heap[r0933,com.codahale.metrics.LongAdder$com.codahale.metrics.Histogram$count368];
    assert { :sourceloc "Histogram.java",38,-1,-1,-1 } true;
    assert { :sourceloc "Histogram.java",38,-1,-1,-1 } $r1934 != $null;
    call $exception := void$com.codahale.metrics.LongAdder$increment$3342($r1934);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",39,-1,-1,-1 } true;
    $r2936 := $heap[r0933,com.codahale.metrics.Reservoir$com.codahale.metrics.Histogram$reservoir367];
    assert { :sourceloc "Histogram.java",39,-1,-1,-1 } true;
    assert { :sourceloc "Histogram.java",39,-1,-1,-1 } $r2936 != $null;
    call $exception := void$com.codahale.metrics.Reservoir$update$3170($r2936, l0935);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",40,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Histogram$getCount$2650($this:ref) returns ($return:int, $exception:ref){
    
var r0937 : ref;    
var $l0939 : int;    
var $r1938 : ref;
    assume { :sourceloc "Histogram.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r0937 := $this;
    assert { :sourceloc "Histogram.java",49,-1,-1,-1 } true;
    $r1938 := $heap[r0937,com.codahale.metrics.LongAdder$com.codahale.metrics.Histogram$count368];
    assert { :sourceloc "Histogram.java",49,-1,-1,-1 } true;
    assert { :sourceloc "Histogram.java",49,-1,-1,-1 } $r1938 != $null;
    call $l0939, $exception := long$com.codahale.metrics.LongAdder$sum$3344($r1938);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",49,-1,-1,-1 } true;
    $return := $l0939;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($this:ref) returns ($return:ref, $exception:ref){
    
var r0940 : ref;    
var $r2942 : ref;    
var $r1941 : ref;
    assume { :sourceloc "Histogram.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "Histogram.java",-1,-1,-1,-1 } true;
    r0940 := $this;
    assert { :sourceloc "Histogram.java",54,-1,-1,-1 } true;
    $r1941 := $heap[r0940,com.codahale.metrics.Reservoir$com.codahale.metrics.Histogram$reservoir367];
    assert { :sourceloc "Histogram.java",54,-1,-1,-1 } true;
    assert { :sourceloc "Histogram.java",54,-1,-1,-1 } $r1941 != $null;
    call $r2942, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Reservoir$getSnapshot$3171($r1941);
    if ($exception != $null) {
    }
    assert { :sourceloc "Histogram.java",54,-1,-1,-1 } true;
    $return := $r2942;
    return;
}


implementation void$com.codahale.metrics.Timer$$la$init$ra$$2652($this:ref) returns ($exception:ref){
    
var r0943 : ref;    
var $r1944 : ref;    
var $fakelocal_0 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0943 := $this;
    assert { :sourceloc "Timer.java",53,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ExponentiallyDecayingReservoir);
    $r1944 := $fakelocal_0;
    assert { :sourceloc "Timer.java",53,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4116($r1944);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",53,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$$la$init$ra$$2653(r0943, $r1944);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",54,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Timer$$la$init$ra$$2653($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r2947 : ref;    
var r1946 : ref;    
var r0945 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Reservoir;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0945 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r1946 := $in_parameter__0;
    assert { :sourceloc "Timer.java",62,-1,-1,-1 } true;
    call $r2947, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",62,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$$la$init$ra$$2654(r0945, r1946, $r2947);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",63,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Timer$$la$init$ra$$2654($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r0948 : ref;    
var r2950 : ref;    
var $r4951 : ref;    
var $fakelocal_1 : ref;    
var $r3949 : ref;    
var r1952 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Reservoir;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0948 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r1952 := $in_parameter__0;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r2950 := $in_parameter__1;
    assert { :sourceloc "Timer.java",71,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0948);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",72,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Meter);
    $r3949 := $fakelocal_0;
    assert { :sourceloc "Timer.java",72,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$$la$init$ra$$2632($r3949, r2950);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",72,-1,-1,-1 } true;
    $heap := $heap[r0948,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369 := $r3949];
    assert { :sourceloc "Timer.java",73,-1,-1,-1 } true;
    $heap := $heap[r0948,com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371 := r2950];
    assert { :sourceloc "Timer.java",74,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.Histogram);
    $r4951 := $fakelocal_1;
    assert { :sourceloc "Timer.java",74,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Histogram$$la$init$ra$$2647($r4951, r1952);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",74,-1,-1,-1 } true;
    $heap := $heap[r0948,com.codahale.metrics.Histogram$com.codahale.metrics.Timer$histogram370 := $r4951];
    assert { :sourceloc "Timer.java",75,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Timer$update$2655($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref){
    
var $l1956 : int;    
var r0953 : ref;    
var r1954 : ref;    
var l0955 : int;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0953 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    l0955 := $in_parameter__0;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r1954 := $in_parameter__1;
    assert { :sourceloc "Timer.java",84,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",84,-1,-1,-1 } r1954 != $null;
    call $l1956, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r1954, l0955);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",84,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$update$2664(r0953, $l1956);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",85,-1,-1,-1 } true;
    return;
}


implementation java.lang.Object$com.codahale.metrics.Timer$time$2656($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var l0960 : int;    
var r2963 : ref;    
var $l1965 : int;    
var $l3970 : int;    
var $r5964 : ref;    
var $r4958 : ref;    
var r1961 : ref;    
var $l2966 : int;    
var $r6967 : ref;    
var $l4971 : int;    
var r0957 : ref;    
var $r7969 : ref;    
var r3968 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.Callable;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0957 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r1961 := $in_parameter__0;
    assert { :sourceloc "Timer.java",97,-1,-1,-1 } true;
    $r4958 := $heap[r0957,com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371];
    assert { :sourceloc "Timer.java",97,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",97,-1,-1,-1 } $r4958 != $null;
    call l0960, $exception := long$com.codahale.metrics.Clock$getTick$1896($r4958);
    if ($exception != $null) {
    }
  block70:
    assert { :sourceloc "Timer.java",99,-1,-1,-1 } true;
    if (r1961 != $null) {
        assert { :sourceloc "Timer.java",99,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Timer.java",99,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block71;
    }
    call r2963, $exception := java.lang.Object$java.util.concurrent.Callable$call$3172(r1961);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            goto block71;
        } else {
            assert { :clone } true;
        }
    }
  block72:
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $r5964 := $heap[r0957,com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371];
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } $r5964 != $null;
    call $l1965, $exception := long$com.codahale.metrics.Clock$getTick$1896($r5964);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $l2966 := $l1965 - l0960;
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$update$2664(r0957, $l2966);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $return := r2963;
    return;
  block71:
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r6967 := $exception;
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    r3968 := $r6967;
  block73:
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $r7969 := $heap[r0957,com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371];
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } $r7969 != $null;
    call $l3970, $exception := long$com.codahale.metrics.Clock$getTick$1896($r7969);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $l4971 := $l3970 - l0960;
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$update$2664(r0957, $l4971);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",101,-1,-1,-1 } true;
    $exception := r3968;
    return;
}


implementation com.codahale.metrics.Timer$Context$com.codahale.metrics.Timer$time$2657($this:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var $r1972 : ref;    
var $r2974 : ref;    
var r0973 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Timer$Context;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0973 := $this;
    assert { :sourceloc "Timer.java",112,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Timer$Context);
    $r1972 := $fakelocal_0;
    assert { :sourceloc "Timer.java",112,-1,-1,-1 } true;
    $r2974 := $heap[r0973,com.codahale.metrics.Clock$com.codahale.metrics.Timer$clock371];
    assert { :sourceloc "Timer.java",112,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$Context$$la$init$ra$$3176($r1972, r0973, $r2974, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",112,-1,-1,-1 } true;
    $return := $r1972;
    return;
}


implementation long$com.codahale.metrics.Timer$getCount$2658($this:ref) returns ($return:int, $exception:ref){
    
var $l0977 : int;    
var $r1976 : ref;    
var r0975 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0975 := $this;
    assert { :sourceloc "Timer.java",117,-1,-1,-1 } true;
    $r1976 := $heap[r0975,com.codahale.metrics.Histogram$com.codahale.metrics.Timer$histogram370];
    assert { :sourceloc "Timer.java",117,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",117,-1,-1,-1 } $r1976 != $null;
    call $l0977, $exception := long$com.codahale.metrics.Histogram$getCount$2650($r1976);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",117,-1,-1,-1 } true;
    $return := $l0977;
    return;
}


implementation double$com.codahale.metrics.Timer$getFifteenMinuteRate$2659($this:ref) returns ($return:int, $exception:ref){
    
var $r1979 : ref;    
var $d0980 : int;    
var r0978 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0978 := $this;
    assert { :sourceloc "Timer.java",122,-1,-1,-1 } true;
    $r1979 := $heap[r0978,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369];
    assert { :sourceloc "Timer.java",122,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",122,-1,-1,-1 } $r1979 != $null;
    call $d0980, $exception := double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637($r1979);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",122,-1,-1,-1 } true;
    $return := $d0980;
    return;
}


implementation double$com.codahale.metrics.Timer$getFiveMinuteRate$2660($this:ref) returns ($return:int, $exception:ref){
    
var $d0983 : int;    
var r0981 : ref;    
var $r1982 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0981 := $this;
    assert { :sourceloc "Timer.java",127,-1,-1,-1 } true;
    $r1982 := $heap[r0981,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369];
    assert { :sourceloc "Timer.java",127,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",127,-1,-1,-1 } $r1982 != $null;
    call $d0983, $exception := double$com.codahale.metrics.Meter$getFiveMinuteRate$2638($r1982);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",127,-1,-1,-1 } true;
    $return := $d0983;
    return;
}


implementation double$com.codahale.metrics.Timer$getMeanRate$2661($this:ref) returns ($return:int, $exception:ref){
    
var $r1985 : ref;    
var $d0986 : int;    
var r0984 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0984 := $this;
    assert { :sourceloc "Timer.java",132,-1,-1,-1 } true;
    $r1985 := $heap[r0984,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369];
    assert { :sourceloc "Timer.java",132,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",132,-1,-1,-1 } $r1985 != $null;
    call $d0986, $exception := double$com.codahale.metrics.Meter$getMeanRate$2639($r1985);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",132,-1,-1,-1 } true;
    $return := $d0986;
    return;
}


implementation double$com.codahale.metrics.Timer$getOneMinuteRate$2662($this:ref) returns ($return:int, $exception:ref){
    
var $d0989 : int;    
var r0987 : ref;    
var $r1988 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0987 := $this;
    assert { :sourceloc "Timer.java",137,-1,-1,-1 } true;
    $r1988 := $heap[r0987,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369];
    assert { :sourceloc "Timer.java",137,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",137,-1,-1,-1 } $r1988 != $null;
    call $d0989, $exception := double$com.codahale.metrics.Meter$getOneMinuteRate$2640($r1988);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",137,-1,-1,-1 } true;
    $return := $d0989;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($this:ref) returns ($return:ref, $exception:ref){
    
var r0990 : ref;    
var $r2992 : ref;    
var $r1991 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0990 := $this;
    assert { :sourceloc "Timer.java",142,-1,-1,-1 } true;
    $r1991 := $heap[r0990,com.codahale.metrics.Histogram$com.codahale.metrics.Timer$histogram370];
    assert { :sourceloc "Timer.java",142,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",142,-1,-1,-1 } $r1991 != $null;
    call $r2992, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r1991);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",142,-1,-1,-1 } true;
    $return := $r2992;
    return;
}


implementation void$com.codahale.metrics.Timer$update$2664($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $r2997 : ref;    
var $b1994 : int;    
var r0995 : ref;    
var l0993 : int;    
var $r1996 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r0995 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    l0993 := $in_parameter__0;
    assert { :sourceloc "Timer.java",146,-1,-1,-1 } true;
    $b1994 := $cmpInt(l0993, 0);
    assert { :sourceloc "Timer.java",146,-1,-1,-1 } true;
    if ($b1994 < 0) {
        assert { :sourceloc "Timer.java",146,-1,-1,-1 } { :comment "thenblock" } true;
        goto block74;
    } else {
        assert { :sourceloc "Timer.java",146,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Timer.java",147,-1,-1,-1 } true;
    $r1996 := $heap[r0995,com.codahale.metrics.Histogram$com.codahale.metrics.Timer$histogram370];
    assert { :sourceloc "Timer.java",147,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",147,-1,-1,-1 } $r1996 != $null;
    call $exception := void$com.codahale.metrics.Histogram$update$2649($r1996, l0993);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",148,-1,-1,-1 } true;
    $r2997 := $heap[r0995,com.codahale.metrics.Meter$com.codahale.metrics.Timer$meter369];
    assert { :sourceloc "Timer.java",148,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",148,-1,-1,-1 } $r2997 != $null;
    call $exception := void$com.codahale.metrics.Meter$mark$2633($r2997);
    if ($exception != $null) {
    }
  block74:
    assert { :sourceloc "Timer.java",150,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Counter$$la$init$ra$$2842($this:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r1999 : ref;    
var r0998 : ref;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r0998 := $this;
    assert { :sourceloc "Counter.java",9,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r0998);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",10,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.LongAdder);
    $r1999 := $fakelocal_0;
    assert { :sourceloc "Counter.java",10,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($r1999);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",10,-1,-1,-1 } true;
    $heap := $heap[r0998,com.codahale.metrics.LongAdder$com.codahale.metrics.Counter$count377 := $r1999];
    assert { :sourceloc "Counter.java",11,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Counter$inc$2843($this:ref) returns ($exception:ref){
    
var r01000 : ref;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r01000 := $this;
    assert { :sourceloc "Counter.java",17,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Counter$inc$2844(r01000, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",18,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Counter$inc$2844($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r01001 : ref;    
var l01002 : int;    
var $r11003 : ref;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r01001 := $this;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    l01002 := $in_parameter__0;
    assert { :sourceloc "Counter.java",26,-1,-1,-1 } true;
    $r11003 := $heap[r01001,com.codahale.metrics.LongAdder$com.codahale.metrics.Counter$count377];
    assert { :sourceloc "Counter.java",26,-1,-1,-1 } true;
    assert { :sourceloc "Counter.java",26,-1,-1,-1 } $r11003 != $null;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341($r11003, l01002);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",27,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Counter$dec$2845($this:ref) returns ($exception:ref){
    
var r01004 : ref;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r01004 := $this;
    assert { :sourceloc "Counter.java",33,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Counter$dec$2846(r01004, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",34,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Counter$dec$2846($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r01005 : ref;    
var l01006 : int;    
var $l11007 : int;    
var $r11008 : ref;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r01005 := $this;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    l01006 := $in_parameter__0;
    assert { :sourceloc "Counter.java",42,-1,-1,-1 } true;
    $r11008 := $heap[r01005,com.codahale.metrics.LongAdder$com.codahale.metrics.Counter$count377];
    assert { :sourceloc "Counter.java",42,-1,-1,-1 } true;
    $l11007 := -l01006;
    assert { :sourceloc "Counter.java",42,-1,-1,-1 } true;
    assert { :sourceloc "Counter.java",42,-1,-1,-1 } $r11008 != $null;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341($r11008, $l11007);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",43,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Counter$getCount$2847($this:ref) returns ($return:int, $exception:ref){
    
var r01009 : ref;    
var $r11010 : ref;    
var $l01011 : int;
    assume { :sourceloc "Counter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Counter.java",-1,-1,-1,-1 } true;
    r01009 := $this;
    assert { :sourceloc "Counter.java",52,-1,-1,-1 } true;
    $r11010 := $heap[r01009,com.codahale.metrics.LongAdder$com.codahale.metrics.Counter$count377];
    assert { :sourceloc "Counter.java",52,-1,-1,-1 } true;
    assert { :sourceloc "Counter.java",52,-1,-1,-1 } $r11010 != $null;
    call $l01011, $exception := long$com.codahale.metrics.LongAdder$sum$3344($r11010);
    if ($exception != $null) {
    }
    assert { :sourceloc "Counter.java",52,-1,-1,-1 } true;
    $return := $l01011;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$MetricBuilder$$la$clinit$ra$$2866() returns ($exception:ref){
    
var $r01012 : ref;    
var $r21014 : ref;    
var $r31015 : ref;    
var $r11013 : ref;    
var $fakelocal_1 : ref;    
var $fakelocal_0 : ref;    
var $fakelocal_3 : ref;    
var $fakelocal_2 : ref;
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.MetricRegistry$MetricBuilder$1);
    $r01012 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$MetricBuilder$1$$la$init$ra$$5361($r01012);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$COUNTERS378 := $r01012;
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.MetricRegistry$MetricBuilder$2);
    $r11013 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$MetricBuilder$2$$la$init$ra$$5365($r11013);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$HISTOGRAMS379 := $r11013;
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    call $fakelocal_2 := $new(com.codahale.metrics.MetricRegistry$MetricBuilder$3);
    $r21014 := $fakelocal_2;
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$MetricBuilder$3$$la$init$ra$$5369($r21014);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$METERS380 := $r21014;
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    call $fakelocal_3 := $new(com.codahale.metrics.MetricRegistry$MetricBuilder$4);
    $r31015 := $fakelocal_3;
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$MetricBuilder$4$$la$init$ra$$5373($r31015);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    com.codahale.metrics.MetricRegistry$MetricBuilder$com.codahale.metrics.MetricRegistry$MetricBuilder$TIMERS381 := $r31015;
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Snapshot$$la$init$ra$$3150($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r31021 : ref;    
var $i11020 : int;    
var r11017 : ref;    
var i01022 : int;    
var r01016 : ref;    
var $l31028 : int;    
var $r41024 : ref;    
var $i21023 : int;    
var $r51025 : ref;    
var r21019 : ref;    
var $r71027 : ref;    
var $r61026 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.Collection;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01016 := $this;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r11017 := $in_parameter__0;
    assert { :sourceloc "Snapshot.java",25,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01016);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",26,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",26,-1,-1,-1 } r11017 != $null;
    call r21019, $exception := java.lang.Object$lp$$rp$$java.util.Collection$toArray$573(r11017);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",27,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",27,-1,-1,-1 } r21019 != $null;
    $i11020 := $arrSizeHeap[r21019];
    assert { :sourceloc "Snapshot.java",27,-1,-1,-1 } true;
    call $fakelocal_0 := $new($intArrayType);
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := $i11020];
    $r31021 := $fakelocal_0;
    assert { :sourceloc "Snapshot.java",27,-1,-1,-1 } true;
    $heap := $heap[r01016,long$lp$$rp$$com.codahale.metrics.Snapshot$values449 := $r31021];
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } true;
    i01022 := 0;
  block75:
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } r21019 != $null;
    $i21023 := $arrSizeHeap[r21019];
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } true;
    if (i01022 >= $i21023) {
        assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } { :comment "thenblock" } true;
        goto block76;
    } else {
        assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } true;
    $r71027 := $heap[r01016,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } i01022 < $arrSizeHeap[r21019] && i01022 >= 0;
    $r51025 := $refArrHeap[r21019][i01022];
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } $heap[$r51025,$type] <: java.lang.Long;
    $r61026 := $r51025;
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } $r61026 != $null;
    call $l31028, $exception := long$java.lang.Long$longValue$885($r61026);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",29,-1,-1,-1 } i01022 < $arrSizeHeap[$r71027] && i01022 >= 0;
    $intArrHeap := $intArrHeap[$r71027 := $intArrHeap[$r71027][i01022 := $l31028]];
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } true;
    i01022 := i01022 + 1;
    assert { :sourceloc "Snapshot.java",28,-1,-1,-1 } true;
    goto block75;
  block76:
    assert { :sourceloc "Snapshot.java",31,-1,-1,-1 } true;
    $r41024 := $heap[r01016,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",31,-1,-1,-1 } true;
    call $exception := void$java.util.Arrays$sort$5817($r41024);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",32,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Snapshot$$la$init$ra$$3151($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r31033 : ref;    
var $r21032 : ref;    
var r11030 : ref;    
var $i01031 : int;    
var r01029 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01029 := $this;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r11030 := $in_parameter__0;
    assert { :sourceloc "Snapshot.java",39,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01029);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",40,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",40,-1,-1,-1 } r11030 != $null;
    $i01031 := $arrSizeHeap[r11030];
    assert { :sourceloc "Snapshot.java",40,-1,-1,-1 } true;
    call $r21032, $exception := long$lp$$rp$$java.util.Arrays$copyOf$5900(r11030, $i01031);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",40,-1,-1,-1 } true;
    $heap := $heap[r01029,long$lp$$rp$$com.codahale.metrics.Snapshot$values449 := $r21032];
    assert { :sourceloc "Snapshot.java",41,-1,-1,-1 } true;
    $r31033 := $heap[r01029,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",41,-1,-1,-1 } true;
    call $exception := void$java.util.Arrays$sort$5817($r31033);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",42,-1,-1,-1 } true;
    return;
}


implementation double$com.codahale.metrics.Snapshot$getValue$3152($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $r11036 : ref;    
var r01042 : ref;    
var $i151071 : int;    
var $r111069 : ref;    
var $r41039 : ref;    
var $l111058 : int;    
var $i141070 : int;    
var $r91057 : ref;    
var $fakelocal_0 : ref;    
var $l121062 : int;    
var $r131075 : ref;    
var $d81068 : int;    
var d31063 : int;    
var $d121074 : int;    
var $d51053 : int;    
var $d101067 : int;    
var $i31046 : int;    
var d11049 : int;    
var $b51050 : int;    
var d01034 : int;    
var $b11041 : int;    
var $i91056 : int;    
var $l131073 : int;    
var $r21037 : ref;    
var $r121072 : ref;    
var $d71065 : int;    
var $i41047 : int;    
var $r71045 : ref;    
var $r51040 : ref;    
var $r101061 : ref;    
var $d111077 : int;    
var d21059 : int;    
var $b01035 : int;    
var $b81054 : int;    
var $l161076 : int;    
var $i21044 : int;    
var $r31038 : ref;    
var $r61043 : ref;    
var $i61052 : int;    
var $fakelocal_1 : ref;    
var $d91066 : int;    
var $r81051 : ref;    
var $i101060 : int;    
var $i71055 : int;    
var $d61064 : int;    
var $d41048 : int;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01042 := $this;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    d01034 := $in_parameter__0;
    assert { :sourceloc "Snapshot.java",51,-1,-1,-1 } true;
    $b01035 := $cmpInt(d01034, $DoubleConst1);
    assert { :sourceloc "Snapshot.java",51,-1,-1,-1 } true;
    if ($b01035 < 0) {
        assert { :sourceloc "Snapshot.java",51,-1,-1,-1 } { :comment "thenblock" } true;
        goto block77;
    } else {
        assert { :sourceloc "Snapshot.java",51,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    $b11041 := $cmpInt(d01034, $DoubleConst0);
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    if ($b11041 <= 0) {
        assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } { :comment "thenblock" } true;
        goto block78;
    } else {
        assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block77:
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11036 := $fakelocal_0;
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r21037 := $fakelocal_1;
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r21037);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    call $r31038, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2769($r21037, d01034);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } $r31038 != $null;
    call $r41039, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r31038, $StringConst40);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } $r41039 != $null;
    call $r51040, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r41039);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r11036, $r51040);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",52,-1,-1,-1 } true;
    $exception := $r11036;
    return;
  block78:
    assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } true;
    $r61043 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } $r61043 != $null;
    $i21044 := $arrSizeHeap[$r61043];
    assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } true;
    if ($i21044 != 0) {
        assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } { :comment "thenblock" } true;
        goto block79;
    } else {
        assert { :sourceloc "Snapshot.java",55,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",56,-1,-1,-1 } true;
    $return := $DoubleConst1;
    return;
  block79:
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } true;
    $r71045 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } $r71045 != $null;
    $i31046 := $arrSizeHeap[$r71045];
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } true;
    $i41047 := $i31046 + 1;
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } true;
    $d41048 := $i41047;
    assert { :sourceloc "Snapshot.java",59,-1,-1,-1 } true;
    d11049 := $realOp32086(d01034, $d41048);
    assert { :sourceloc "Snapshot.java",61,-1,-1,-1 } true;
    $b51050 := $cmpInt(d11049, $DoubleConst0);
    assert { :sourceloc "Snapshot.java",61,-1,-1,-1 } true;
    if ($b51050 >= 0) {
        assert { :sourceloc "Snapshot.java",61,-1,-1,-1 } { :comment "thenblock" } true;
        goto block80;
    } else {
        assert { :sourceloc "Snapshot.java",61,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",62,-1,-1,-1 } true;
    $r131075 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",62,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",62,-1,-1,-1 } 0 < $arrSizeHeap[$r131075] && 0 >= 0;
    $l161076 := $intArrHeap[$r131075][0];
    assert { :sourceloc "Snapshot.java",62,-1,-1,-1 } true;
    $d111077 := $l161076;
    assert { :sourceloc "Snapshot.java",62,-1,-1,-1 } true;
    $return := $d111077;
    return;
  block80:
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } true;
    $r81051 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } $r81051 != $null;
    $i61052 := $arrSizeHeap[$r81051];
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } true;
    $d51053 := $i61052;
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } true;
    $b81054 := $cmpInt(d11049, $d51053);
    assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } true;
    if ($b81054 < 0) {
        assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } { :comment "thenblock" } true;
        goto block81;
    } else {
        assert { :sourceloc "Snapshot.java",65,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    $r121072 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    $r111069 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } $r111069 != $null;
    $i141070 := $arrSizeHeap[$r111069];
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    $i151071 := $i141070 - 1;
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } $i151071 < $arrSizeHeap[$r121072] && $i151071 >= 0;
    $l131073 := $intArrHeap[$r121072][$i151071];
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    $d121074 := $l131073;
    assert { :sourceloc "Snapshot.java",66,-1,-1,-1 } true;
    $return := $d121074;
    return;
  block81:
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } true;
    $r91057 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } true;
    $i71055 := d11049;
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } true;
    $i91056 := $i71055 - 1;
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } $i91056 < $arrSizeHeap[$r91057] && $i91056 >= 0;
    $l111058 := $intArrHeap[$r91057][$i91056];
    assert { :sourceloc "Snapshot.java",69,-1,-1,-1 } true;
    d21059 := $l111058;
    assert { :sourceloc "Snapshot.java",70,-1,-1,-1 } true;
    $r101061 := $heap[r01042,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",70,-1,-1,-1 } true;
    $i101060 := d11049;
    assert { :sourceloc "Snapshot.java",70,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",70,-1,-1,-1 } $i101060 < $arrSizeHeap[$r101061] && $i101060 >= 0;
    $l121062 := $intArrHeap[$r101061][$i101060];
    assert { :sourceloc "Snapshot.java",70,-1,-1,-1 } true;
    d31063 := $l121062;
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    call $d61064, $exception := double$java.lang.Math$floor$4057(d11049);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    $d91066 := $realOp32179(d11049, $d61064);
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    $d71065 := $realOp32179(d31063, d21059);
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    $d101067 := $realOp32086($d91066, $d71065);
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    $d81068 := $realOp32117(d21059, $d101067);
    assert { :sourceloc "Snapshot.java",71,-1,-1,-1 } true;
    $return := $d81068;
    return;
}


implementation int$com.codahale.metrics.Snapshot$size$3153($this:ref) returns ($return:int, $exception:ref){
    
var r01078 : ref;    
var $i01080 : int;    
var $r11079 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01078 := $this;
    assert { :sourceloc "Snapshot.java",80,-1,-1,-1 } true;
    $r11079 := $heap[r01078,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",80,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",80,-1,-1,-1 } $r11079 != $null;
    $i01080 := $arrSizeHeap[$r11079];
    assert { :sourceloc "Snapshot.java",80,-1,-1,-1 } true;
    $return := $i01080;
    return;
}


implementation double$com.codahale.metrics.Snapshot$getMedian$3154($this:ref) returns ($return:int, $exception:ref){
    
var $d01082 : int;    
var r01081 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01081 := $this;
    assert { :sourceloc "Snapshot.java",89,-1,-1,-1 } true;
    call $d01082, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01081, $DoubleConst2);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",89,-1,-1,-1 } true;
    $return := $d01082;
    return;
}


implementation double$com.codahale.metrics.Snapshot$get75thPercentile$3155($this:ref) returns ($return:int, $exception:ref){
    
var r01083 : ref;    
var $d01084 : int;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01083 := $this;
    assert { :sourceloc "Snapshot.java",98,-1,-1,-1 } true;
    call $d01084, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01083, $DoubleConst3);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",98,-1,-1,-1 } true;
    $return := $d01084;
    return;
}


implementation double$com.codahale.metrics.Snapshot$get95thPercentile$3156($this:ref) returns ($return:int, $exception:ref){
    
var $d01086 : int;    
var r01085 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01085 := $this;
    assert { :sourceloc "Snapshot.java",107,-1,-1,-1 } true;
    call $d01086, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01085, $DoubleConst4);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",107,-1,-1,-1 } true;
    $return := $d01086;
    return;
}


implementation double$com.codahale.metrics.Snapshot$get98thPercentile$3157($this:ref) returns ($return:int, $exception:ref){
    
var r01087 : ref;    
var $d01088 : int;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01087 := $this;
    assert { :sourceloc "Snapshot.java",116,-1,-1,-1 } true;
    call $d01088, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01087, $DoubleConst5);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",116,-1,-1,-1 } true;
    $return := $d01088;
    return;
}


implementation double$com.codahale.metrics.Snapshot$get99thPercentile$3158($this:ref) returns ($return:int, $exception:ref){
    
var r01089 : ref;    
var $d01090 : int;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01089 := $this;
    assert { :sourceloc "Snapshot.java",125,-1,-1,-1 } true;
    call $d01090, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01089, $DoubleConst6);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",125,-1,-1,-1 } true;
    $return := $d01090;
    return;
}


implementation double$com.codahale.metrics.Snapshot$get999thPercentile$3159($this:ref) returns ($return:int, $exception:ref){
    
var $d01092 : int;    
var r01091 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01091 := $this;
    assert { :sourceloc "Snapshot.java",134,-1,-1,-1 } true;
    call $d01092, $exception := double$com.codahale.metrics.Snapshot$getValue$3152(r01091, $DoubleConst7);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",134,-1,-1,-1 } true;
    $return := $d01092;
    return;
}


implementation long$lp$$rp$$com.codahale.metrics.Snapshot$getValues$3160($this:ref) returns ($return:ref, $exception:ref){
    
var $i01095 : int;    
var r01093 : ref;    
var $r31097 : ref;    
var $r11094 : ref;    
var $r21096 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01093 := $this;
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } true;
    $r21096 := $heap[r01093,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } true;
    $r11094 := $heap[r01093,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } $r11094 != $null;
    $i01095 := $arrSizeHeap[$r11094];
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } true;
    call $r31097, $exception := long$lp$$rp$$java.util.Arrays$copyOf$5900($r21096, $i01095);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",143,-1,-1,-1 } true;
    $return := $r31097;
    return;
}


implementation long$com.codahale.metrics.Snapshot$getMax$3161($this:ref) returns ($return:int, $exception:ref){
    
var $r31104 : ref;    
var $l31105 : int;    
var $i11102 : int;    
var $i01100 : int;    
var $r21101 : ref;    
var $i21103 : int;    
var r01098 : ref;    
var $r11099 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01098 := $this;
    assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } true;
    $r11099 := $heap[r01098,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } $r11099 != $null;
    $i01100 := $arrSizeHeap[$r11099];
    assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } true;
    if ($i01100 != 0) {
        assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } { :comment "thenblock" } true;
        goto block82;
    } else {
        assert { :sourceloc "Snapshot.java",152,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",153,-1,-1,-1 } true;
    $return := 0;
    return;
  block82:
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    $r31104 := $heap[r01098,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    $r21101 := $heap[r01098,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } $r21101 != $null;
    $i11102 := $arrSizeHeap[$r21101];
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    $i21103 := $i11102 - 1;
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } $i21103 < $arrSizeHeap[$r31104] && $i21103 >= 0;
    $l31105 := $intArrHeap[$r31104][$i21103];
    assert { :sourceloc "Snapshot.java",155,-1,-1,-1 } true;
    $return := $l31105;
    return;
}


implementation long$com.codahale.metrics.Snapshot$getMin$3162($this:ref) returns ($return:int, $exception:ref){
    
var $r11107 : ref;    
var $l11110 : int;    
var $r21109 : ref;    
var $i01108 : int;    
var r01106 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01106 := $this;
    assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } true;
    $r11107 := $heap[r01106,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } $r11107 != $null;
    $i01108 := $arrSizeHeap[$r11107];
    assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } true;
    if ($i01108 != 0) {
        assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } { :comment "thenblock" } true;
        goto block83;
    } else {
        assert { :sourceloc "Snapshot.java",164,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",165,-1,-1,-1 } true;
    $return := 0;
    return;
  block83:
    assert { :sourceloc "Snapshot.java",167,-1,-1,-1 } true;
    $r21109 := $heap[r01106,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",167,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",167,-1,-1,-1 } 0 < $arrSizeHeap[$r21109] && 0 >= 0;
    $l11110 := $intArrHeap[$r21109][0];
    assert { :sourceloc "Snapshot.java",167,-1,-1,-1 } true;
    $return := $l11110;
    return;
}


implementation double$com.codahale.metrics.Snapshot$getMean$3163($this:ref) returns ($return:int, $exception:ref){
    
var $d31123 : int;    
var i01116 : int;    
var d01114 : int;    
var $d21121 : int;    
var $r21112 : ref;    
var i11117 : int;    
var r01111 : ref;    
var l21122 : int;    
var $i31113 : int;    
var $d11120 : int;    
var r11115 : ref;    
var $r31118 : ref;    
var $i41119 : int;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01111 := $this;
    assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } true;
    $r21112 := $heap[r01111,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } $r21112 != $null;
    $i31113 := $arrSizeHeap[$r21112];
    assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } true;
    if ($i31113 != 0) {
        assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } { :comment "thenblock" } true;
        goto block84;
    } else {
        assert { :sourceloc "Snapshot.java",176,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",177,-1,-1,-1 } true;
    $return := $DoubleConst1;
    return;
  block84:
    assert { :sourceloc "Snapshot.java",180,-1,-1,-1 } true;
    d01114 := $DoubleConst1;
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    r11115 := $heap[r01111,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } r11115 != $null;
    i01116 := $arrSizeHeap[r11115];
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    i11117 := 0;
  block85:
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    if (i11117 >= i01116) {
        assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } { :comment "thenblock" } true;
        goto block86;
    } else {
        assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } i11117 < $arrSizeHeap[r11115] && i11117 >= 0;
    l21122 := $intArrHeap[r11115][i11117];
    assert { :sourceloc "Snapshot.java",182,-1,-1,-1 } true;
    $d31123 := l21122;
    assert { :sourceloc "Snapshot.java",182,-1,-1,-1 } true;
    d01114 := $realOp32117(d01114, $d31123);
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    i11117 := i11117 + 1;
    assert { :sourceloc "Snapshot.java",181,-1,-1,-1 } true;
    goto block85;
  block86:
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    $r31118 := $heap[r01111,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } $r31118 != $null;
    $i41119 := $arrSizeHeap[$r31118];
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    $d11120 := $i41119;
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    $d21121 := $realOp32241(d01114, $d11120);
    assert { :sourceloc "Snapshot.java",184,-1,-1,-1 } true;
    $return := $d21121;
    return;
}


implementation double$com.codahale.metrics.Snapshot$getStdDev$3164($this:ref) returns ($return:int, $exception:ref){
    
var d01128 : int;    
var $d61139 : int;    
var r11130 : ref;    
var $i51134 : int;    
var $d31137 : int;    
var i01131 : int;    
var d71142 : int;    
var i11132 : int;    
var r01124 : ref;    
var $r31133 : ref;    
var d11129 : int;    
var $d41136 : int;    
var $i41135 : int;    
var $i31126 : int;    
var $d51141 : int;    
var l21138 : int;    
var d21140 : int;    
var $r21125 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01124 := $this;
    assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } true;
    $r21125 := $heap[r01124,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } $r21125 != $null;
    $i31126 := $arrSizeHeap[$r21125];
    assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } true;
    if ($i31126 > 1) {
        assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } { :comment "thenblock" } true;
        goto block87;
    } else {
        assert { :sourceloc "Snapshot.java",195,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",196,-1,-1,-1 } true;
    $return := $DoubleConst1;
    return;
  block87:
    assert { :sourceloc "Snapshot.java",199,-1,-1,-1 } true;
    call d01128, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r01124);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",200,-1,-1,-1 } true;
    d11129 := $DoubleConst1;
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    r11130 := $heap[r01124,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } r11130 != $null;
    i01131 := $arrSizeHeap[r11130];
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    i11132 := 0;
  block88:
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    if (i11132 >= i01131) {
        assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } { :comment "thenblock" } true;
        goto block89;
    } else {
        assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",208,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",208,-1,-1,-1 } i11132 < $arrSizeHeap[r11130] && i11132 >= 0;
    l21138 := $intArrHeap[r11130][i11132];
    assert { :sourceloc "Snapshot.java",203,-1,-1,-1 } true;
    $d61139 := l21138;
    assert { :sourceloc "Snapshot.java",203,-1,-1,-1 } true;
    d21140 := $realOp32179($d61139, d01128);
    assert { :sourceloc "Snapshot.java",204,-1,-1,-1 } true;
    $d51141 := $realOp32086(d21140, d21140);
    assert { :sourceloc "Snapshot.java",204,-1,-1,-1 } true;
    d11129 := $realOp32117(d11129, $d51141);
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    i11132 := i11132 + 1;
    assert { :sourceloc "Snapshot.java",202,-1,-1,-1 } true;
    goto block88;
  block89:
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } true;
    $r31133 := $heap[r01124,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } true;
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } $r31133 != $null;
    $i51134 := $arrSizeHeap[$r31133];
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } true;
    $i41135 := $i51134 - 1;
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } true;
    $d41136 := $i41135;
    assert { :sourceloc "Snapshot.java",207,-1,-1,-1 } true;
    d71142 := $realOp32241(d11129, $d41136);
    assert { :sourceloc "Snapshot.java",208,-1,-1,-1 } true;
    call $d31137, $exception := double$java.lang.Math$sqrt$4053(d71142);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",208,-1,-1,-1 } true;
    $return := $d31137;
    return;
}


implementation void$com.codahale.metrics.Snapshot$dump$3165($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var i01150 : int;    
var $fakelocal_0 : ref;    
var $fakelocal_3 : ref;    
var r21147 : ref;    
var i11151 : int;    
var $r91156 : ref;    
var $fakelocal_2 : ref;    
var r41159 : ref;    
var $fakelocal_1 : ref;    
var $r81153 : ref;    
var r31149 : ref;    
var r01148 : ref;    
var $r71146 : ref;    
var l21152 : int;    
var $r61144 : ref;    
var r11145 : ref;    
var $r101158 : ref;    
var $r51143 : ref;
    assume { :sourceloc "Snapshot.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.io.OutputStream;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r01148 := $this;
    assert { :sourceloc "Snapshot.java",-1,-1,-1,-1 } true;
    r11145 := $in_parameter__0;
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.io.PrintWriter);
    $r51143 := $fakelocal_0;
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.io.OutputStreamWriter);
    $r61144 := $fakelocal_1;
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    $r71146 := java.nio.charset.Charset$com.codahale.metrics.Snapshot$UTF_8448;
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    call $exception := void$java.io.OutputStreamWriter$$la$init$ra$$2997($r61144, r11145, $r71146);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    call $exception := void$java.io.PrintWriter$$la$init$ra$$249($r51143, $r61144);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",217,-1,-1,-1 } true;
    r21147 := $r51143;
  block90:
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    r31149 := $heap[r01148,long$lp$$rp$$com.codahale.metrics.Snapshot$values449];
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    if (r31149 != $null) {
        assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.NullPointerException);
        goto block91;
    }
    i01150 := $arrSizeHeap[r31149];
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    i11151 := 0;
  block92:
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    if (i11151 >= i01150) {
        assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } { :comment "thenblock" } true;
        goto block93;
    } else {
        assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Snapshot.java",225,-1,-1,-1 } true;
    if (i11151 < $arrSizeHeap[r31149] && i11151 >= 0) {
        assert { :sourceloc "Snapshot.java",225,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Snapshot.java",225,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block91;
    }
    l21152 := $intArrHeap[r31149][i11151];
    assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 1];
    $r81153 := $fakelocal_2;
    assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
    call $r91156, $exception := java.lang.Long$java.lang.Long$valueOf$878(l21152);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block91;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
    if (0 < $arrSizeHeap[$r81153] && 0 >= 0) {
        assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block91;
    }
    $refArrHeap := $refArrHeap[$r81153 := $refArrHeap[$r81153][0 := $r91156]];
    assert { :sourceloc "Snapshot.java",220,-1,-1,-1 } true;
    call $fakelocal_3, $exception := java.io.PrintWriter$java.io.PrintWriter$printf$289(r21147, $StringConst41, $r81153);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block91;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    i11151 := i11151 + 1;
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    goto block92;
  block93:
    assert { :sourceloc "Snapshot.java",223,-1,-1,-1 } { :clone } true;
    call $exception := void$java.io.PrintWriter$close$260(r21147);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",224,-1,-1,-1 } true;
    goto block94;
  block91:
    assert { :sourceloc "Snapshot.java",219,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r101158 := $exception;
    assert { :sourceloc "Snapshot.java",223,-1,-1,-1 } { :clone } true;
    r41159 := $r101158;
  block95:
    assert { :sourceloc "Snapshot.java",223,-1,-1,-1 } { :clone } true;
    assert { :sourceloc "Snapshot.java",223,-1,-1,-1 } { :clone } r21147 != $null;
    call $exception := void$java.io.PrintWriter$close$260(r21147);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",223,-1,-1,-1 } { :clone } true;
    $exception := r41159;
    return;
  block94:
    assert { :sourceloc "Snapshot.java",225,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Snapshot$$la$clinit$ra$$3166() returns ($exception:ref){
    
var $r01160 : ref;
    assert { :sourceloc "Snapshot.java",16,-1,-1,-1 } true;
    call $r01160, $exception := java.nio.charset.Charset$java.nio.charset.Charset$forName$3016($StringConst42);
    if ($exception != $null) {
    }
    assert { :sourceloc "Snapshot.java",16,-1,-1,-1 } true;
    java.nio.charset.Charset$com.codahale.metrics.Snapshot$UTF_8448 := $r01160;
    assert { :sourceloc "Snapshot.java",16,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Timer$Context$$la$init$ra$$3173($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r11162 : ref;    
var r01161 : ref;    
var r21163 : ref;    
var $l01164 : int;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Timer;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r01161 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r11162 := $in_parameter__0;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r21163 := $in_parameter__1;
    assert { :sourceloc "Timer.java",22,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01161);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",23,-1,-1,-1 } true;
    $heap := $heap[r01161,com.codahale.metrics.Timer$com.codahale.metrics.Timer$Context$timer450 := r11162];
    assert { :sourceloc "Timer.java",24,-1,-1,-1 } true;
    $heap := $heap[r01161,com.codahale.metrics.Clock$com.codahale.metrics.Timer$Context$clock451 := r21163];
    assert { :sourceloc "Timer.java",25,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",25,-1,-1,-1 } r21163 != $null;
    call $l01164, $exception := long$com.codahale.metrics.Clock$getTick$1896(r21163);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",25,-1,-1,-1 } true;
    $heap := $heap[r01161,long$com.codahale.metrics.Timer$Context$startTime0 := $l01164];
    assert { :sourceloc "Timer.java",26,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.Timer$Context$stop$3174($this:ref) returns ($return:int, $exception:ref){
    
var $r21170 : ref;    
var $r31171 : ref;    
var $l11167 : int;    
var $l21168 : int;    
var r01165 : ref;    
var $r11166 : ref;    
var l01169 : int;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r01165 := $this;
    assert { :sourceloc "Timer.java",33,-1,-1,-1 } true;
    $r11166 := $heap[r01165,com.codahale.metrics.Clock$com.codahale.metrics.Timer$Context$clock451];
    assert { :sourceloc "Timer.java",33,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",33,-1,-1,-1 } $r11166 != $null;
    call $l11167, $exception := long$com.codahale.metrics.Clock$getTick$1896($r11166);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",33,-1,-1,-1 } true;
    $l21168 := $heap[r01165,long$com.codahale.metrics.Timer$Context$startTime0];
    assert { :sourceloc "Timer.java",33,-1,-1,-1 } true;
    l01169 := $l11167 - $l21168;
    assert { :sourceloc "Timer.java",34,-1,-1,-1 } true;
    $r31171 := $heap[r01165,com.codahale.metrics.Timer$com.codahale.metrics.Timer$Context$timer450];
    assert { :sourceloc "Timer.java",34,-1,-1,-1 } true;
    $r21170 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$NANOSECONDS239;
    assert { :sourceloc "Timer.java",34,-1,-1,-1 } true;
    assert { :sourceloc "Timer.java",34,-1,-1,-1 } $r31171 != $null;
    call $exception := void$com.codahale.metrics.Timer$update$2655($r31171, l01169, $r21170);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",35,-1,-1,-1 } true;
    $return := l01169;
    return;
}


implementation void$com.codahale.metrics.Timer$Context$close$3175($this:ref) returns ($exception:ref){
    
var $fakelocal_0 : int;    
var r01172 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r01172 := $this;
    assert { :sourceloc "Timer.java",40,-1,-1,-1 } true;
    call $fakelocal_0, $exception := long$com.codahale.metrics.Timer$Context$stop$3174(r01172);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",41,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Timer$Context$$la$init$ra$$3176($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r21176 : ref;    
var r01174 : ref;    
var r31177 : ref;    
var r11175 : ref;
    assume { :sourceloc "Timer.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Timer$1;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r01174 := $this;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r11175 := $in_parameter__0;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r21176 := $in_parameter__1;
    assert { :sourceloc "Timer.java",-1,-1,-1,-1 } true;
    r31177 := $in_parameter__2;
    assert { :sourceloc "Timer.java",17,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$Context$$la$init$ra$$3173(r01174, r11175, r21176);
    if ($exception != $null) {
    }
    assert { :sourceloc "Timer.java",17,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$oneMinuteEWMA$3331() returns ($return:ref, $exception:ref){
    
var $r11179 : ref;    
var $d01180 : int;    
var $r01178 : ref;    
var $fakelocal_0 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.EWMA;
    assert { :sourceloc "EWMA.java",39,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.EWMA);
    $r01178 := $fakelocal_0;
    assert { :sourceloc "EWMA.java",39,-1,-1,-1 } true;
    $d01180 := double$com.codahale.metrics.EWMA$M1_ALPHA0;
    assert { :sourceloc "EWMA.java",39,-1,-1,-1 } true;
    $r11179 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "EWMA.java",39,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.EWMA$$la$init$ra$$3334($r01178, $d01180, 5, $r11179);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",39,-1,-1,-1 } true;
    $return := $r01178;
    return;
}


implementation com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fiveMinuteEWMA$3332() returns ($return:ref, $exception:ref){
    
var $d01183 : int;    
var $fakelocal_0 : ref;    
var $r11182 : ref;    
var $r01181 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.EWMA;
    assert { :sourceloc "EWMA.java",49,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.EWMA);
    $r01181 := $fakelocal_0;
    assert { :sourceloc "EWMA.java",49,-1,-1,-1 } true;
    $d01183 := double$com.codahale.metrics.EWMA$M5_ALPHA0;
    assert { :sourceloc "EWMA.java",49,-1,-1,-1 } true;
    $r11182 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "EWMA.java",49,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.EWMA$$la$init$ra$$3334($r01181, $d01183, 5, $r11182);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",49,-1,-1,-1 } true;
    $return := $r01181;
    return;
}


implementation com.codahale.metrics.EWMA$com.codahale.metrics.EWMA$fifteenMinuteEWMA$3333() returns ($return:ref, $exception:ref){
    
var $d01186 : int;    
var $r01184 : ref;    
var $r11185 : ref;    
var $fakelocal_0 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.EWMA;
    assert { :sourceloc "EWMA.java",59,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.EWMA);
    $r01184 := $fakelocal_0;
    assert { :sourceloc "EWMA.java",59,-1,-1,-1 } true;
    $d01186 := double$com.codahale.metrics.EWMA$M15_ALPHA0;
    assert { :sourceloc "EWMA.java",59,-1,-1,-1 } true;
    $r11185 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "EWMA.java",59,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.EWMA$$la$init$ra$$3334($r01184, $d01186, 5, $r11185);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",59,-1,-1,-1 } true;
    $return := $r01184;
    return;
}


implementation void$com.codahale.metrics.EWMA$$la$init$ra$$3334($this:ref, $in_parameter__0:int, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $d11192 : int;    
var l01190 : int;    
var $r21188 : ref;    
var r11189 : ref;    
var d01193 : int;    
var r01187 : ref;    
var $l11191 : int;
    assume { :sourceloc "EWMA.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r01187 := $this;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    d01193 := $in_parameter__0;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    l01190 := $in_parameter__1;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r11189 := $in_parameter__2;
    assert { :sourceloc "EWMA.java",69,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01187);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",26,-1,-1,-1 } true;
    $heap := $heap[r01187,boolean$com.codahale.metrics.EWMA$initialized0 := 0];
    assert { :sourceloc "EWMA.java",27,-1,-1,-1 } true;
    $heap := $heap[r01187,double$com.codahale.metrics.EWMA$rate0 := $DoubleConst1];
    assert { :sourceloc "EWMA.java",29,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.LongAdder);
    $r21188 := $fakelocal_0;
    assert { :sourceloc "EWMA.java",29,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($r21188);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",29,-1,-1,-1 } true;
    $heap := $heap[r01187,com.codahale.metrics.LongAdder$com.codahale.metrics.EWMA$uncounted460 := $r21188];
    assert { :sourceloc "EWMA.java",70,-1,-1,-1 } true;
    assert { :sourceloc "EWMA.java",70,-1,-1,-1 } r11189 != $null;
    call $l11191, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r11189, l01190);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",70,-1,-1,-1 } true;
    $d11192 := $l11191;
    assert { :sourceloc "EWMA.java",70,-1,-1,-1 } true;
    $heap := $heap[r01187,double$com.codahale.metrics.EWMA$interval0 := $d11192];
    assert { :sourceloc "EWMA.java",71,-1,-1,-1 } true;
    $heap := $heap[r01187,double$com.codahale.metrics.EWMA$alpha0 := d01193];
    assert { :sourceloc "EWMA.java",72,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.EWMA$update$3335($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $r11196 : ref;    
var l01195 : int;    
var r01194 : ref;
    assume { :sourceloc "EWMA.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r01194 := $this;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    l01195 := $in_parameter__0;
    assert { :sourceloc "EWMA.java",80,-1,-1,-1 } true;
    $r11196 := $heap[r01194,com.codahale.metrics.LongAdder$com.codahale.metrics.EWMA$uncounted460];
    assert { :sourceloc "EWMA.java",80,-1,-1,-1 } true;
    assert { :sourceloc "EWMA.java",80,-1,-1,-1 } $r11196 != $null;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341($r11196, l01195);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",81,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.EWMA$tick$3336($this:ref) returns ($exception:ref){
    
var $z01204 : int;    
var $r11198 : ref;    
var $d41206 : int;    
var $d21202 : int;    
var r01197 : ref;    
var $d51207 : int;    
var $d31205 : int;    
var $d61208 : int;    
var $d81210 : int;    
var $d71209 : int;    
var d01203 : int;    
var $d11201 : int;    
var l01200 : int;
    assume { :sourceloc "EWMA.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r01197 := $this;
    assert { :sourceloc "EWMA.java",87,-1,-1,-1 } true;
    $r11198 := $heap[r01197,com.codahale.metrics.LongAdder$com.codahale.metrics.EWMA$uncounted460];
    assert { :sourceloc "EWMA.java",87,-1,-1,-1 } true;
    assert { :sourceloc "EWMA.java",87,-1,-1,-1 } $r11198 != $null;
    call l01200, $exception := long$com.codahale.metrics.LongAdder$sumThenReset$3346($r11198);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",88,-1,-1,-1 } true;
    $d21202 := l01200;
    assert { :sourceloc "EWMA.java",88,-1,-1,-1 } true;
    $d11201 := $heap[r01197,double$com.codahale.metrics.EWMA$interval0];
    assert { :sourceloc "EWMA.java",88,-1,-1,-1 } true;
    d01203 := $realOp32241($d21202, $d11201);
    assert { :sourceloc "EWMA.java",89,-1,-1,-1 } true;
    $z01204 := $heap[r01197,boolean$com.codahale.metrics.EWMA$initialized0];
    assert { :sourceloc "EWMA.java",89,-1,-1,-1 } true;
    if ($z01204 == 0) {
        assert { :sourceloc "EWMA.java",89,-1,-1,-1 } { :comment "thenblock" } true;
        goto block96;
    } else {
        assert { :sourceloc "EWMA.java",89,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d71209 := $heap[r01197,double$com.codahale.metrics.EWMA$rate0];
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d51207 := $heap[r01197,double$com.codahale.metrics.EWMA$alpha0];
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d31205 := $heap[r01197,double$com.codahale.metrics.EWMA$rate0];
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d41206 := $realOp32179(d01203, $d31205);
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d61208 := $realOp32086($d51207, $d41206);
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $d81210 := $realOp32117($d71209, $d61208);
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    $heap := $heap[r01197,double$com.codahale.metrics.EWMA$rate0 := $d81210];
    assert { :sourceloc "EWMA.java",90,-1,-1,-1 } true;
    goto block97;
  block96:
    assert { :sourceloc "EWMA.java",92,-1,-1,-1 } true;
    $heap := $heap[r01197,double$com.codahale.metrics.EWMA$rate0 := d01203];
    assert { :sourceloc "EWMA.java",93,-1,-1,-1 } true;
    $heap := $heap[r01197,boolean$com.codahale.metrics.EWMA$initialized0 := 1];
  block97:
    assert { :sourceloc "EWMA.java",95,-1,-1,-1 } true;
    return;
}


implementation double$com.codahale.metrics.EWMA$getRate$3337($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var $l01214 : int;    
var r11212 : ref;    
var $d01213 : int;    
var $d11215 : int;    
var r01211 : ref;    
var $d21216 : int;
    assume { :sourceloc "EWMA.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r01211 := $this;
    assert { :sourceloc "EWMA.java",-1,-1,-1,-1 } true;
    r11212 := $in_parameter__0;
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } true;
    $d01213 := $heap[r01211,double$com.codahale.metrics.EWMA$rate0];
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } true;
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } r11212 != $null;
    call $l01214, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r11212, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } true;
    $d11215 := $l01214;
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } true;
    $d21216 := $realOp32086($d01213, $d11215);
    assert { :sourceloc "EWMA.java",104,-1,-1,-1 } true;
    $return := $d21216;
    return;
}


implementation void$com.codahale.metrics.EWMA$$la$clinit$ra$$3338() returns ($exception:ref){
    
var $d41224 : int;    
var $d21221 : int;    
var $d11219 : int;    
var $d01218 : int;    
var $d31222 : int;    
var $d51225 : int;
    assert { :sourceloc "EWMA.java",22,-1,-1,-1 } true;
    call $d01218, $exception := double$java.lang.Math$exp$4050($DoubleConst8);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",22,-1,-1,-1 } true;
    $d11219 := $realOp32179($DoubleConst0, $d01218);
    assert { :sourceloc "EWMA.java",22,-1,-1,-1 } true;
    double$com.codahale.metrics.EWMA$M1_ALPHA0 := $d11219;
    assert { :sourceloc "EWMA.java",23,-1,-1,-1 } true;
    call $d21221, $exception := double$java.lang.Math$exp$4050($DoubleConst9);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",23,-1,-1,-1 } true;
    $d31222 := $realOp32179($DoubleConst0, $d21221);
    assert { :sourceloc "EWMA.java",23,-1,-1,-1 } true;
    double$com.codahale.metrics.EWMA$M5_ALPHA0 := $d31222;
    assert { :sourceloc "EWMA.java",24,-1,-1,-1 } true;
    call $d41224, $exception := double$java.lang.Math$exp$4050($DoubleConst10);
    if ($exception != $null) {
    }
    assert { :sourceloc "EWMA.java",24,-1,-1,-1 } true;
    $d51225 := $realOp32179($DoubleConst0, $d41224);
    assert { :sourceloc "EWMA.java",24,-1,-1,-1 } true;
    double$com.codahale.metrics.EWMA$M15_ALPHA0 := $d51225;
    assert { :sourceloc "EWMA.java",24,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.LongAdder$fn$3339($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var l01226 : int;    
var r01229 : ref;    
var $l21228 : int;    
var l11227 : int;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01229 := $this;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    l01226 := $in_parameter__0;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    l11227 := $in_parameter__1;
    assert { :sourceloc "LongAdder.java",44,-1,-1,-1 } true;
    $l21228 := l01226 + l11227;
    assert { :sourceloc "LongAdder.java",44,-1,-1,-1 } true;
    $return := $l21228;
    return;
}


implementation void$com.codahale.metrics.LongAdder$$la$init$ra$$3340($this:ref) returns ($exception:ref){
    
var r01230 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01230 := $this;
    assert { :sourceloc "LongAdder.java",50,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$$la$init$ra$$3400(r01230);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",51,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.LongAdder$add$3341($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $z11250 : int;    
var $r41232 : ref;    
var l21248 : int;    
var i31242 : int;    
var r31246 : ref;    
var $i71243 : int;    
var r01231 : ref;    
var $z21254 : int;    
var l01240 : int;    
var $l101253 : int;    
var $l91249 : int;    
var r21238 : ref;    
var $i51241 : int;    
var i41239 : int;    
var r11233 : ref;    
var $l81247 : int;    
var $r81245 : ref;    
var z01234 : int;    
var $i61244 : int;    
var $l111251 : int;    
var l11252 : int;    
var $r61236 : ref;    
var $r71237 : ref;    
var $r51235 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01231 := $this;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    l01240 := $in_parameter__0;
    assert { :sourceloc "LongAdder.java",64,-1,-1,-1 } true;
    $r41232 := $heap[r01231,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "LongAdder.java",64,-1,-1,-1 } true;
    r11233 := $r41232;
    assert { :sourceloc "LongAdder.java",64,-1,-1,-1 } true;
    if ($r41232 != $null) {
        assert { :sourceloc "LongAdder.java",64,-1,-1,-1 } { :comment "thenblock" } true;
        goto block98;
    } else {
        assert { :sourceloc "LongAdder.java",64,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    $l111251 := $heap[r01231,long$com.codahale.metrics.Striped64$base0];
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    l11252 := $l111251;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    $l101253 := l11252 + l01240;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    call $z21254, $exception := boolean$com.codahale.metrics.Striped64$casBase$3401(r01231, $l111251, $l101253);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    if ($z21254 != 0) {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "thenblock" } true;
        goto block99;
    } else {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block98:
    assert { :sourceloc "LongAdder.java",65,-1,-1,-1 } true;
    z01234 := 1;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } true;
    $r51235 := com.codahale.metrics.Striped64$ThreadHashCode$com.codahale.metrics.Striped64$threadHashCode470;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } $r51235 != $null;
    call $r61236, $exception := java.lang.Object$java.lang.ThreadLocal$get$3529($r51235);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } $heap[$r61236,$type] <: com.codahale.metrics.Striped64$HashCode;
    $r71237 := $r61236;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } true;
    r21238 := $r71237;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",66,-1,-1,-1 } $r71237 != $null;
    i41239 := $heap[$r71237,int$com.codahale.metrics.Striped64$HashCode$code0];
    assert { :sourceloc "LongAdder.java",67,-1,-1,-1 } true;
    if (r11233 == $null) {
        assert { :sourceloc "LongAdder.java",67,-1,-1,-1 } { :comment "thenblock" } true;
        goto block100;
    } else {
        assert { :sourceloc "LongAdder.java",67,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } r11233 != $null;
    $i51241 := $arrSizeHeap[r11233];
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    i31242 := $i51241;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    if ($i51241 < 1) {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "thenblock" } true;
        goto block100;
    } else {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    $i71243 := i31242 - 1;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    $i61244 := $bitAnd($i71243, i41239);
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } $i61244 < $arrSizeHeap[r11233] && $i61244 >= 0;
    $r81245 := $refArrHeap[r11233][$i61244];
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    r31246 := $r81245;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    if ($r81245 == $null) {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "thenblock" } true;
        goto block100;
    } else {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } r31246 != $null;
    $l81247 := $heap[r31246,long$com.codahale.metrics.Striped64$Cell$value0];
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    l21248 := $l81247;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    $l91249 := l21248 + l01240;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    call $z11250, $exception := boolean$com.codahale.metrics.Striped64$Cell$cas$3522(r31246, $l81247, $l91249);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    z01234 := $z11250;
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    if ($z11250 != 0) {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "thenblock" } true;
        goto block99;
    } else {
        assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block100:
    assert { :sourceloc "LongAdder.java",70,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$retryUpdate$3404(r01231, l01240, r21238, z01234);
    if ($exception != $null) {
    }
  block99:
    assert { :sourceloc "LongAdder.java",72,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.LongAdder$increment$3342($this:ref) returns ($exception:ref){
    
var r01255 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01255 := $this;
    assert { :sourceloc "LongAdder.java",78,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341(r01255, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",79,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.LongAdder$decrement$3343($this:ref) returns ($exception:ref){
    
var r01256 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01256 := $this;
    assert { :sourceloc "LongAdder.java",85,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.LongAdder$add$3341(r01256, -1);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",86,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.LongAdder$sum$3344($this:ref) returns ($return:int, $exception:ref){
    
var i11260 : int;    
var l01258 : int;    
var r11259 : ref;    
var $l31263 : int;    
var i21261 : int;    
var r21262 : ref;    
var r01257 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01257 := $this;
    assert { :sourceloc "LongAdder.java",96,-1,-1,-1 } true;
    l01258 := $heap[r01257,long$com.codahale.metrics.Striped64$base0];
    assert { :sourceloc "LongAdder.java",97,-1,-1,-1 } true;
    r11259 := $heap[r01257,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "LongAdder.java",98,-1,-1,-1 } true;
    if (r11259 == $null) {
        assert { :sourceloc "LongAdder.java",98,-1,-1,-1 } { :comment "thenblock" } true;
        goto block101;
    } else {
        assert { :sourceloc "LongAdder.java",98,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",99,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",99,-1,-1,-1 } r11259 != $null;
    i11260 := $arrSizeHeap[r11259];
    assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } true;
    i21261 := 0;
  block102:
    assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } true;
    if (i21261 >= i11260) {
        assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } { :comment "thenblock" } true;
        goto block101;
    } else {
        assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",101,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",101,-1,-1,-1 } i21261 < $arrSizeHeap[r11259] && i21261 >= 0;
    r21262 := $refArrHeap[r11259][i21261];
    assert { :sourceloc "LongAdder.java",102,-1,-1,-1 } true;
    if (r21262 == $null) {
        assert { :sourceloc "LongAdder.java",102,-1,-1,-1 } { :comment "thenblock" } true;
        goto block103;
    } else {
        assert { :sourceloc "LongAdder.java",102,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",103,-1,-1,-1 } true;
    $l31263 := $heap[r21262,long$com.codahale.metrics.Striped64$Cell$value0];
    assert { :sourceloc "LongAdder.java",103,-1,-1,-1 } true;
    l01258 := l01258 + $l31263;
  block103:
    assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } true;
    i21261 := i21261 + 1;
    assert { :sourceloc "LongAdder.java",100,-1,-1,-1 } true;
    goto block102;
  block101:
    assert { :sourceloc "LongAdder.java",106,-1,-1,-1 } true;
    $return := l01258;
    return;
}


implementation void$com.codahale.metrics.LongAdder$reset$3345($this:ref) returns ($exception:ref){
    
var r01264 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01264 := $this;
    assert { :sourceloc "LongAdder.java",116,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$internalReset$3405(r01264, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",117,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.LongAdder$sumThenReset$3346($this:ref) returns ($return:int, $exception:ref){
    
var r01265 : ref;    
var i21269 : int;    
var l01266 : int;    
var r11267 : ref;    
var $l31271 : int;    
var i11268 : int;    
var r21270 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01265 := $this;
    assert { :sourceloc "LongAdder.java",128,-1,-1,-1 } true;
    l01266 := $heap[r01265,long$com.codahale.metrics.Striped64$base0];
    assert { :sourceloc "LongAdder.java",129,-1,-1,-1 } true;
    r11267 := $heap[r01265,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "LongAdder.java",130,-1,-1,-1 } true;
    $heap := $heap[r01265,long$com.codahale.metrics.Striped64$base0 := 0];
    assert { :sourceloc "LongAdder.java",131,-1,-1,-1 } true;
    if (r11267 == $null) {
        assert { :sourceloc "LongAdder.java",131,-1,-1,-1 } { :comment "thenblock" } true;
        goto block104;
    } else {
        assert { :sourceloc "LongAdder.java",131,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",132,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",132,-1,-1,-1 } r11267 != $null;
    i11268 := $arrSizeHeap[r11267];
    assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } true;
    i21269 := 0;
  block105:
    assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } true;
    if (i21269 >= i11268) {
        assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } { :comment "thenblock" } true;
        goto block104;
    } else {
        assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",134,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",134,-1,-1,-1 } i21269 < $arrSizeHeap[r11267] && i21269 >= 0;
    r21270 := $refArrHeap[r11267][i21269];
    assert { :sourceloc "LongAdder.java",135,-1,-1,-1 } true;
    if (r21270 == $null) {
        assert { :sourceloc "LongAdder.java",135,-1,-1,-1 } { :comment "thenblock" } true;
        goto block106;
    } else {
        assert { :sourceloc "LongAdder.java",135,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "LongAdder.java",136,-1,-1,-1 } true;
    $l31271 := $heap[r21270,long$com.codahale.metrics.Striped64$Cell$value0];
    assert { :sourceloc "LongAdder.java",136,-1,-1,-1 } true;
    l01266 := l01266 + $l31271;
    assert { :sourceloc "LongAdder.java",137,-1,-1,-1 } true;
    $heap := $heap[r21270,long$com.codahale.metrics.Striped64$Cell$value0 := 0];
  block106:
    assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } true;
    i21269 := i21269 + 1;
    assert { :sourceloc "LongAdder.java",133,-1,-1,-1 } true;
    goto block105;
  block104:
    assert { :sourceloc "LongAdder.java",141,-1,-1,-1 } true;
    $return := l01266;
    return;
}


implementation java.lang.String$com.codahale.metrics.LongAdder$toString$3347($this:ref) returns ($return:ref, $exception:ref){
    
var $l01273 : int;    
var $r11274 : ref;    
var r01272 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01272 := $this;
    assert { :sourceloc "LongAdder.java",150,-1,-1,-1 } true;
    call $l01273, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01272);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",150,-1,-1,-1 } true;
    call $r11274, $exception := java.lang.String$java.lang.Long$toString$871($l01273);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",150,-1,-1,-1 } true;
    $return := $r11274;
    return;
}


implementation long$com.codahale.metrics.LongAdder$longValue$3348($this:ref) returns ($return:int, $exception:ref){
    
var r01275 : ref;    
var $l01276 : int;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01275 := $this;
    assert { :sourceloc "LongAdder.java",159,-1,-1,-1 } true;
    call $l01276, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01275);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",159,-1,-1,-1 } true;
    $return := $l01276;
    return;
}


implementation int$com.codahale.metrics.LongAdder$intValue$3349($this:ref) returns ($return:int, $exception:ref){
    
var r01277 : ref;    
var $i11279 : int;    
var $l01278 : int;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01277 := $this;
    assert { :sourceloc "LongAdder.java",166,-1,-1,-1 } true;
    call $l01278, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01277);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",166,-1,-1,-1 } true;
    $i11279 := $l01278;
    assert { :sourceloc "LongAdder.java",166,-1,-1,-1 } true;
    $return := $i11279;
    return;
}


implementation float$com.codahale.metrics.LongAdder$floatValue$3350($this:ref) returns ($return:int, $exception:ref){
    
var $f01282 : int;    
var r01280 : ref;    
var $l01281 : int;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01280 := $this;
    assert { :sourceloc "LongAdder.java",173,-1,-1,-1 } true;
    call $l01281, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01280);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",173,-1,-1,-1 } true;
    $f01282 := $l01281;
    assert { :sourceloc "LongAdder.java",173,-1,-1,-1 } true;
    $return := $f01282;
    return;
}


implementation double$com.codahale.metrics.LongAdder$doubleValue$3351($this:ref) returns ($return:int, $exception:ref){
    
var $d01285 : int;    
var $l01284 : int;    
var r01283 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01283 := $this;
    assert { :sourceloc "LongAdder.java",180,-1,-1,-1 } true;
    call $l01284, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01283);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",180,-1,-1,-1 } true;
    $d01285 := $l01284;
    assert { :sourceloc "LongAdder.java",180,-1,-1,-1 } true;
    $return := $d01285;
    return;
}


implementation void$com.codahale.metrics.LongAdder$writeObject$3352($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r11286 : ref;    
var $l01288 : int;    
var r01287 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.io.ObjectOutputStream;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01287 := $this;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r11286 := $in_parameter__0;
    assert { :sourceloc "LongAdder.java",185,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",185,-1,-1,-1 } r11286 != $null;
    call $exception := void$java.io.ObjectOutputStream$defaultWriteObject$387(r11286);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "LongAdder.java",186,-1,-1,-1 } true;
    call $l01288, $exception := long$com.codahale.metrics.LongAdder$sum$3344(r01287);
    if ($exception != $null) {
    }
    assert { :sourceloc "LongAdder.java",186,-1,-1,-1 } true;
    call $exception := void$java.io.ObjectOutputStream$writeLong$408(r11286, $l01288);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "LongAdder.java",187,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.LongAdder$readObject$3353($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r11289 : ref;    
var $l01291 : int;    
var r01290 : ref;
    assume { :sourceloc "LongAdder.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.io.ObjectInputStream;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r01290 := $this;
    assert { :sourceloc "LongAdder.java",-1,-1,-1,-1 } true;
    r11289 := $in_parameter__0;
    assert { :sourceloc "LongAdder.java",191,-1,-1,-1 } true;
    assert { :sourceloc "LongAdder.java",191,-1,-1,-1 } r11289 != $null;
    call $exception := void$java.io.ObjectInputStream$defaultReadObject$307(r11289);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.ClassNotFoundException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "LongAdder.java",192,-1,-1,-1 } true;
    $heap := $heap[r01290,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "LongAdder.java",193,-1,-1,-1 } true;
    $heap := $heap[r01290,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471 := $null];
    assert { :sourceloc "LongAdder.java",194,-1,-1,-1 } true;
    call $l01291, $exception := long$java.io.ObjectInputStream$readLong$327(r11289);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "LongAdder.java",194,-1,-1,-1 } true;
    $heap := $heap[r01290,long$com.codahale.metrics.Striped64$base0 := $l01291];
    assert { :sourceloc "LongAdder.java",195,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Striped64$$la$init$ra$$3400($this:ref) returns ($exception:ref){
    
var r01292 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01292 := $this;
    assert { :sourceloc "Striped64.java",174,-1,-1,-1 } true;
    call $exception := void$java.lang.Number$$la$init$ra$$908(r01292);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",175,-1,-1,-1 } true;
    return;
}


implementation boolean$com.codahale.metrics.Striped64$casBase$3401($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var $r11297 : ref;    
var l11295 : int;    
var l01294 : int;    
var $z01298 : int;    
var r01293 : ref;    
var $l21296 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01293 := $this;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l01294 := $in_parameter__0;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l11295 := $in_parameter__1;
    assert { :sourceloc "Striped64.java",181,-1,-1,-1 } true;
    $r11297 := sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472;
    assert { :sourceloc "Striped64.java",181,-1,-1,-1 } true;
    $l21296 := long$com.codahale.metrics.Striped64$baseOffset0;
    assert { :sourceloc "Striped64.java",181,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",181,-1,-1,-1 } $r11297 != $null;
    call $z01298, $exception := boolean$sun.misc.Unsafe$compareAndSwapLong$2046($r11297, r01293, $l21296, l01294, l11295);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",181,-1,-1,-1 } true;
    $return := $z01298;
    return;
}


implementation boolean$com.codahale.metrics.Striped64$casBusy$3402($this:ref) returns ($return:int, $exception:ref){
    
var $r11301 : ref;    
var r01299 : ref;    
var $l01300 : int;    
var $z01302 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01299 := $this;
    assert { :sourceloc "Striped64.java",188,-1,-1,-1 } true;
    $r11301 := sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472;
    assert { :sourceloc "Striped64.java",188,-1,-1,-1 } true;
    $l01300 := long$com.codahale.metrics.Striped64$busyOffset0;
    assert { :sourceloc "Striped64.java",188,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",188,-1,-1,-1 } $r11301 != $null;
    call $z01302, $exception := boolean$sun.misc.Unsafe$compareAndSwapInt$2045($r11301, r01299, $l01300, 0, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",188,-1,-1,-1 } true;
    $return := $z01302;
    return;
}


implementation void$com.codahale.metrics.Striped64$retryUpdate$3404($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:int) returns ($exception:ref){
    
var $r111318 : ref;    
var $fakelocal_2 : ref;    
var $i91321 : int;    
var $r211356 : ref;    
var $i201342 : int;    
var z81364 : int;    
var $r221354 : ref;    
var r241365 : ref;    
var $z61338 : int;    
var i11304 : int;    
var $fakelocal_0 : ref;    
var $z31314 : int;    
var $i181337 : int;    
var $i241350 : int;    
var $l131330 : int;    
var $l121329 : int;    
var i41349 : int;    
var i271362 : int;    
var l01312 : int;    
var r21308 : ref;    
var r231360 : ref;    
var $r151341 : ref;    
var $r121320 : ref;    
var $z71345 : int;    
var r11303 : ref;    
var $i101324 : int;    
var $r181343 : ref;    
var $i231351 : int;    
var r31327 : ref;    
var $r91307 : ref;    
var $fakelocal_3 : ref;    
var $i61309 : int;    
var $r191353 : ref;    
var $i211340 : int;    
var $i191335 : int;    
var z21319 : int;    
var $r101315 : ref;    
var i21323 : int;    
var $r131326 : ref;    
var r81357 : ref;    
var l31311 : int;    
var r71359 : ref;    
var $l71313 : int;    
var $r171346 : ref;    
var $i251348 : int;    
var $i151333 : int;    
var i281363 : int;    
var i261361 : int;    
var $l81310 : int;    
var z11305 : int;    
var $i161334 : int;    
var l291366 : int;    
var $r201358 : ref;    
var $z41316 : int;    
var $r141336 : ref;    
var $i221344 : int;    
var r51347 : ref;    
var $fakelocal_1 : ref;    
var r61355 : ref;    
var r41317 : ref;    
var $r161339 : ref;    
var $i171332 : int;    
var z01328 : int;    
var r01306 : ref;    
var $i141325 : int;    
var i51352 : int;    
var $z51331 : int;    
var $i111322 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Striped64$HashCode;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01306 := $this;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l01312 := $in_parameter__0;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r11303 := $in_parameter__1;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    z01328 := $in_parameter__2;
    assert { :sourceloc "Striped64.java",211,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",211,-1,-1,-1 } r11303 != $null;
    i11304 := $heap[r11303,int$com.codahale.metrics.Striped64$HashCode$code0];
    assert { :sourceloc "Striped64.java",212,-1,-1,-1 } true;
    z11305 := 0;
  block107:
    assert { :sourceloc "Striped64.java",218,-1,-1,-1 } true;
    $r91307 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",218,-1,-1,-1 } true;
    r21308 := $r91307;
    assert { :sourceloc "Striped64.java",218,-1,-1,-1 } true;
    if ($r91307 == $null) {
        assert { :sourceloc "Striped64.java",218,-1,-1,-1 } { :comment "thenblock" } true;
        goto block108;
    } else {
        assert { :sourceloc "Striped64.java",218,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",278,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",278,-1,-1,-1 } r21308 != $null;
    $i111322 := $arrSizeHeap[r21308];
    assert { :sourceloc "Striped64.java",278,-1,-1,-1 } true;
    i21323 := $i111322;
    assert { :sourceloc "Striped64.java",278,-1,-1,-1 } true;
    if ($i111322 <= 0) {
        assert { :sourceloc "Striped64.java",278,-1,-1,-1 } { :comment "thenblock" } true;
        goto block108;
    } else {
        assert { :sourceloc "Striped64.java",278,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } true;
    $i101324 := i21323 - 1;
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } true;
    $i141325 := $bitAnd($i101324, i11304);
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } $i141325 < $arrSizeHeap[r21308] && $i141325 >= 0;
    $r131326 := $refArrHeap[r21308][$i141325];
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } true;
    r31327 := $r131326;
    assert { :sourceloc "Striped64.java",219,-1,-1,-1 } true;
    if ($r131326 != $null) {
        assert { :sourceloc "Striped64.java",219,-1,-1,-1 } { :comment "thenblock" } true;
        goto block109;
    } else {
        assert { :sourceloc "Striped64.java",219,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",220,-1,-1,-1 } true;
    $i201342 := $heap[r01306,int$com.codahale.metrics.Striped64$busy0];
    assert { :sourceloc "Striped64.java",220,-1,-1,-1 } true;
    if ($i201342 != 0) {
        assert { :sourceloc "Striped64.java",220,-1,-1,-1 } { :comment "thenblock" } true;
        goto block110;
    } else {
        assert { :sourceloc "Striped64.java",220,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",221,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Striped64$Cell);
    $r181343 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",221,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$Cell$$la$init$ra$$3521($r181343, l01312);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",221,-1,-1,-1 } true;
    r41317 := $r181343;
    assert { :sourceloc "Striped64.java",222,-1,-1,-1 } true;
    $i221344 := $heap[r01306,int$com.codahale.metrics.Striped64$busy0];
    assert { :sourceloc "Striped64.java",222,-1,-1,-1 } true;
    if ($i221344 != 0) {
        assert { :sourceloc "Striped64.java",222,-1,-1,-1 } { :comment "thenblock" } true;
        goto block110;
    } else {
        assert { :sourceloc "Striped64.java",222,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",241,-1,-1,-1 } true;
    call $z71345, $exception := boolean$com.codahale.metrics.Striped64$casBusy$3402(r01306);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",241,-1,-1,-1 } true;
    if ($z71345 == 0) {
        assert { :sourceloc "Striped64.java",241,-1,-1,-1 } { :comment "thenblock" } true;
        goto block110;
    } else {
        assert { :sourceloc "Striped64.java",241,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",223,-1,-1,-1 } true;
    z21319 := 0;
  block111:
    assert { :sourceloc "Striped64.java",227,-1,-1,-1 } true;
    $r171346 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",227,-1,-1,-1 } true;
    r51347 := $r171346;
    assert { :sourceloc "Striped64.java",227,-1,-1,-1 } true;
    if ($r171346 == $null) {
        assert { :sourceloc "Striped64.java",227,-1,-1,-1 } { :comment "thenblock" } true;
        goto block112;
    } else {
        assert { :sourceloc "Striped64.java",227,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    if (r51347 != $null) {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.NullPointerException);
        goto block113;
    }
    $i251348 := $arrSizeHeap[r51347];
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    i41349 := $i251348;
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    if ($i251348 <= 0) {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "thenblock" } true;
        goto block112;
    } else {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    $i241350 := i41349 - 1;
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    $i231351 := $bitAnd($i241350, i11304);
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    i51352 := $i231351;
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    if ($i231351 < $arrSizeHeap[r51347] && $i231351 >= 0) {
        assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block113;
    }
    $r191353 := $refArrHeap[r51347][$i231351];
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    if ($r191353 != $null) {
        assert { :sourceloc "Striped64.java",235,-1,-1,-1 } { :comment "thenblock" } true;
        goto block112;
    } else {
        assert { :sourceloc "Striped64.java",235,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",230,-1,-1,-1 } true;
    if (i51352 < $arrSizeHeap[r51347] && i51352 >= 0) {
        assert { :sourceloc "Striped64.java",230,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",230,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block113;
    }
    $refArrHeap := $refArrHeap[r51347 := $refArrHeap[r51347][i51352 := r41317]];
    assert { :sourceloc "Striped64.java",231,-1,-1,-1 } true;
    z21319 := 1;
  block112:
    assert { :sourceloc "Striped64.java",234,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    goto block114;
  block113:
    assert { :sourceloc "Striped64.java",235,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r221354 := $exception;
    assert { :sourceloc "Striped64.java",234,-1,-1,-1 } { :clone } true;
    r61355 := $r221354;
  block115:
    assert { :sourceloc "Striped64.java",234,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",234,-1,-1,-1 } { :clone } true;
    $exception := r61355;
    return;
  block114:
    assert { :sourceloc "Striped64.java",236,-1,-1,-1 } true;
    if (z21319 == 0) {
        assert { :sourceloc "Striped64.java",236,-1,-1,-1 } { :comment "thenblock" } true;
        goto block107;
    } else {
        assert { :sourceloc "Striped64.java",236,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",237,-1,-1,-1 } true;
    goto block116;
  block110:
    assert { :sourceloc "Striped64.java",241,-1,-1,-1 } true;
    z11305 := 0;
    assert { :sourceloc "Striped64.java",241,-1,-1,-1 } true;
    goto block117;
  block109:
    assert { :sourceloc "Striped64.java",242,-1,-1,-1 } true;
    if (z01328 != 0) {
        assert { :sourceloc "Striped64.java",242,-1,-1,-1 } { :comment "thenblock" } true;
        goto block118;
    } else {
        assert { :sourceloc "Striped64.java",242,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",243,-1,-1,-1 } true;
    z01328 := 1;
    assert { :sourceloc "Striped64.java",243,-1,-1,-1 } true;
    goto block117;
  block118:
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } r31327 != $null;
    $l121329 := $heap[r31327,long$com.codahale.metrics.Striped64$Cell$value0];
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } true;
    l31311 := $l121329;
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } true;
    call $l131330, $exception := long$com.codahale.metrics.Striped64$fn$3403(r01306, l31311, l01312);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } true;
    call $z51331, $exception := boolean$com.codahale.metrics.Striped64$Cell$cas$3522(r31327, $l121329, $l131330);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",244,-1,-1,-1 } true;
    if ($z51331 == 0) {
        assert { :sourceloc "Striped64.java",244,-1,-1,-1 } { :comment "thenblock" } true;
        goto block119;
    } else {
        assert { :sourceloc "Striped64.java",244,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",245,-1,-1,-1 } true;
    goto block116;
  block119:
    assert { :sourceloc "Striped64.java",246,-1,-1,-1 } true;
    $i171332 := int$com.codahale.metrics.Striped64$NCPU0;
    assert { :sourceloc "Striped64.java",246,-1,-1,-1 } true;
    if (i21323 >= $i171332) {
        assert { :sourceloc "Striped64.java",246,-1,-1,-1 } { :comment "thenblock" } true;
        goto block120;
    } else {
        assert { :sourceloc "Striped64.java",246,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",283,-1,-1,-1 } true;
    $r141336 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",283,-1,-1,-1 } true;
    if ($r141336 == r21308) {
        assert { :sourceloc "Striped64.java",283,-1,-1,-1 } { :comment "thenblock" } true;
        goto block121;
    } else {
        assert { :sourceloc "Striped64.java",283,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block120:
    assert { :sourceloc "Striped64.java",247,-1,-1,-1 } true;
    z11305 := 0;
    assert { :sourceloc "Striped64.java",247,-1,-1,-1 } true;
    goto block117;
  block121:
    assert { :sourceloc "Striped64.java",248,-1,-1,-1 } true;
    if (z11305 != 0) {
        assert { :sourceloc "Striped64.java",248,-1,-1,-1 } { :comment "thenblock" } true;
        goto block122;
    } else {
        assert { :sourceloc "Striped64.java",248,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",249,-1,-1,-1 } true;
    z11305 := 1;
    assert { :sourceloc "Striped64.java",249,-1,-1,-1 } true;
    goto block117;
  block122:
    assert { :sourceloc "Striped64.java",250,-1,-1,-1 } true;
    $i181337 := $heap[r01306,int$com.codahale.metrics.Striped64$busy0];
    assert { :sourceloc "Striped64.java",250,-1,-1,-1 } true;
    if ($i181337 != 0) {
        assert { :sourceloc "Striped64.java",250,-1,-1,-1 } { :comment "thenblock" } true;
        goto block117;
    } else {
        assert { :sourceloc "Striped64.java",250,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",266,-1,-1,-1 } true;
    call $z61338, $exception := boolean$com.codahale.metrics.Striped64$casBusy$3402(r01306);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",266,-1,-1,-1 } true;
    if ($z61338 == 0) {
        assert { :sourceloc "Striped64.java",266,-1,-1,-1 } { :comment "thenblock" } true;
        goto block117;
    } else {
        assert { :sourceloc "Striped64.java",266,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block123:
    assert { :sourceloc "Striped64.java",252,-1,-1,-1 } true;
    $r161339 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",252,-1,-1,-1 } true;
    if ($r161339 != r21308) {
        assert { :sourceloc "Striped64.java",252,-1,-1,-1 } { :comment "thenblock" } true;
        goto block124;
    } else {
        assert { :sourceloc "Striped64.java",252,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",253,-1,-1,-1 } true;
    $i211340 := $shlInt(i21323, 1);
    assert { :sourceloc "Striped64.java",253,-1,-1,-1 } true;
    call $fakelocal_1 := $new($arrayType(com.codahale.metrics.Striped64$Cell));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_1 := $i211340];
    r231360 := $fakelocal_1;
    assert { :sourceloc "Striped64.java",254,-1,-1,-1 } true;
    i261361 := 0;
  block125:
    assert { :sourceloc "Striped64.java",254,-1,-1,-1 } true;
    if (i261361 >= i21323) {
        assert { :sourceloc "Striped64.java",254,-1,-1,-1 } { :comment "thenblock" } true;
        goto block126;
    } else {
        assert { :sourceloc "Striped64.java",254,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
    if (i261361 < $arrSizeHeap[r21308] && i261361 >= 0) {
        assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block127;
    }
    $r151341 := $refArrHeap[r21308][i261361];
    assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
    if (i261361 < $arrSizeHeap[r231360] && i261361 >= 0) {
        assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",255,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block127;
    }
    $refArrHeap := $refArrHeap[r231360 := $refArrHeap[r231360][i261361 := $r151341]];
    assert { :sourceloc "Striped64.java",254,-1,-1,-1 } true;
    i261361 := i261361 + 1;
    assert { :sourceloc "Striped64.java",254,-1,-1,-1 } true;
    goto block125;
  block126:
    assert { :sourceloc "Striped64.java",256,-1,-1,-1 } true;
    $heap := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471 := r231360];
  block124:
    assert { :sourceloc "Striped64.java",259,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",260,-1,-1,-1 } true;
    goto block128;
  block127:
    assert { :sourceloc "Striped64.java",234,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r211356 := $exception;
    assert { :sourceloc "Striped64.java",259,-1,-1,-1 } { :clone } true;
    r81357 := $r211356;
  block129:
    assert { :sourceloc "Striped64.java",259,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",259,-1,-1,-1 } { :clone } true;
    $exception := r81357;
    return;
  block128:
    assert { :sourceloc "Striped64.java",261,-1,-1,-1 } true;
    z11305 := 0;
    assert { :sourceloc "Striped64.java",262,-1,-1,-1 } true;
    goto block107;
  block117:
    assert { :sourceloc "Striped64.java",264,-1,-1,-1 } true;
    $i151333 := $shlInt(i11304, 13);
    assert { :sourceloc "Striped64.java",264,-1,-1,-1 } true;
    i271362 := $xorInt(i11304, $i151333);
    assert { :sourceloc "Striped64.java",265,-1,-1,-1 } true;
    $i161334 := $ushrInt(i271362, 17);
    assert { :sourceloc "Striped64.java",265,-1,-1,-1 } true;
    i281363 := $xorInt(i271362, $i161334);
    assert { :sourceloc "Striped64.java",266,-1,-1,-1 } true;
    $i191335 := $shlInt(i281363, 5);
    assert { :sourceloc "Striped64.java",266,-1,-1,-1 } true;
    i11304 := $xorInt(i281363, $i191335);
    assert { :sourceloc "Striped64.java",266,-1,-1,-1 } true;
    goto block130;
  block108:
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    $i61309 := $heap[r01306,int$com.codahale.metrics.Striped64$busy0];
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    if ($i61309 != 0) {
        assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } { :comment "thenblock" } true;
        goto block131;
    } else {
        assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    $r101315 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    if ($r101315 != r21308) {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "thenblock" } true;
        goto block131;
    } else {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    call $z41316, $exception := boolean$com.codahale.metrics.Striped64$casBusy$3402(r01306);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    if ($z41316 == 0) {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "thenblock" } true;
        goto block131;
    } else {
        assert { :sourceloc "Striped64.java",285,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",268,-1,-1,-1 } true;
    z81364 := 0;
  block132:
    assert { :sourceloc "Striped64.java",270,-1,-1,-1 } true;
    $r111318 := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",270,-1,-1,-1 } true;
    if ($r111318 != r21308) {
        assert { :sourceloc "Striped64.java",270,-1,-1,-1 } { :comment "thenblock" } true;
        goto block133;
    } else {
        assert { :sourceloc "Striped64.java",270,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",271,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(com.codahale.metrics.Striped64$Cell));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 2];
    r241365 := $fakelocal_2;
    assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
    $i91321 := $bitAnd(i11304, 1);
    assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
    call $fakelocal_3 := $new(com.codahale.metrics.Striped64$Cell);
    $r121320 := $fakelocal_3;
    assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$Cell$$la$init$ra$$3521($r121320, l01312);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            $r121320 := $null;
            goto block134;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
    if ($i91321 < $arrSizeHeap[r241365] && $i91321 >= 0) {
        assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",272,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block134;
    }
    $refArrHeap := $refArrHeap[r241365 := $refArrHeap[r241365][$i91321 := $r121320]];
    assert { :sourceloc "Striped64.java",273,-1,-1,-1 } true;
    $heap := $heap[r01306,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471 := r241365];
    assert { :sourceloc "Striped64.java",274,-1,-1,-1 } true;
    z81364 := 1;
  block133:
    assert { :sourceloc "Striped64.java",277,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",278,-1,-1,-1 } true;
    goto block135;
  block134:
    assert { :sourceloc "Striped64.java",259,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r201358 := $exception;
    assert { :sourceloc "Striped64.java",277,-1,-1,-1 } { :clone } true;
    r71359 := $r201358;
  block136:
    assert { :sourceloc "Striped64.java",277,-1,-1,-1 } { :clone } true;
    $heap := $heap[r01306,int$com.codahale.metrics.Striped64$busy0 := 0];
    assert { :sourceloc "Striped64.java",277,-1,-1,-1 } { :clone } true;
    $exception := r71359;
    return;
  block135:
    assert { :sourceloc "Striped64.java",279,-1,-1,-1 } true;
    if (z81364 == 0) {
        assert { :sourceloc "Striped64.java",279,-1,-1,-1 } { :comment "thenblock" } true;
        goto block137;
    } else {
        assert { :sourceloc "Striped64.java",279,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",280,-1,-1,-1 } true;
    goto block116;
  block137:
    assert { :sourceloc "Striped64.java",281,-1,-1,-1 } true;
    goto block130;
  block131:
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    $l81310 := $heap[r01306,long$com.codahale.metrics.Striped64$base0];
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    l291366 := $l81310;
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    call $l71313, $exception := long$com.codahale.metrics.Striped64$fn$3403(r01306, l291366, l01312);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    call $z31314, $exception := boolean$com.codahale.metrics.Striped64$casBase$3401(r01306, $l81310, $l71313);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } true;
    if ($z31314 == 0) {
        assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } { :comment "thenblock" } true;
        goto block130;
    } else {
        assert { :sourceloc "Striped64.java",267,-1,-1,-1 } { :clone } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",282,-1,-1,-1 } true;
    goto block116;
  block130:
    assert { :sourceloc "Striped64.java",283,-1,-1,-1 } true;
    goto block107;
  block116:
    assert { :sourceloc "Striped64.java",284,-1,-1,-1 } true;
    $heap := $heap[r11303,int$com.codahale.metrics.Striped64$HashCode$code0 := i11304];
    assert { :sourceloc "Striped64.java",285,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Striped64$internalReset$3405($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r21372 : ref;    
var i11370 : int;    
var r11368 : ref;    
var r01367 : ref;    
var i21371 : int;    
var l01369 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01367 := $this;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l01369 := $in_parameter__0;
    assert { :sourceloc "Striped64.java",292,-1,-1,-1 } true;
    r11368 := $heap[r01367,com.codahale.metrics.Striped64$Cell$lp$$rp$$com.codahale.metrics.Striped64$cells471];
    assert { :sourceloc "Striped64.java",293,-1,-1,-1 } true;
    $heap := $heap[r01367,long$com.codahale.metrics.Striped64$base0 := l01369];
    assert { :sourceloc "Striped64.java",294,-1,-1,-1 } true;
    if (r11368 == $null) {
        assert { :sourceloc "Striped64.java",294,-1,-1,-1 } { :comment "thenblock" } true;
        goto block138;
    } else {
        assert { :sourceloc "Striped64.java",294,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",295,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",295,-1,-1,-1 } r11368 != $null;
    i11370 := $arrSizeHeap[r11368];
    assert { :sourceloc "Striped64.java",296,-1,-1,-1 } true;
    i21371 := 0;
  block139:
    assert { :sourceloc "Striped64.java",296,-1,-1,-1 } true;
    if (i21371 >= i11370) {
        assert { :sourceloc "Striped64.java",296,-1,-1,-1 } { :comment "thenblock" } true;
        goto block138;
    } else {
        assert { :sourceloc "Striped64.java",296,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",297,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",297,-1,-1,-1 } i21371 < $arrSizeHeap[r11368] && i21371 >= 0;
    r21372 := $refArrHeap[r11368][i21371];
    assert { :sourceloc "Striped64.java",298,-1,-1,-1 } true;
    if (r21372 == $null) {
        assert { :sourceloc "Striped64.java",298,-1,-1,-1 } { :comment "thenblock" } true;
        goto block140;
    } else {
        assert { :sourceloc "Striped64.java",298,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",299,-1,-1,-1 } true;
    $heap := $heap[r21372,long$com.codahale.metrics.Striped64$Cell$value0 := l01369];
  block140:
    assert { :sourceloc "Striped64.java",296,-1,-1,-1 } true;
    i21371 := i21371 + 1;
    assert { :sourceloc "Striped64.java",296,-1,-1,-1 } true;
    goto block139;
  block138:
    assert { :sourceloc "Striped64.java",302,-1,-1,-1 } true;
    return;
}


implementation sun.misc.Unsafe$com.codahale.metrics.Striped64$getUnsafe$3406() returns ($return:ref, $exception:ref){
    
var $r71380 : ref;    
var $r81382 : ref;    
var $r51378 : ref;    
var $r21374 : ref;    
var $r31376 : ref;    
var $fakelocal_0 : ref;    
var $r61379 : ref;    
var $r11373 : ref;    
var r91383 : ref;    
var $fakelocal_1 : ref;    
var $r41377 : ref;
    assume $heap[$return,$type] <: sun.misc.Unsafe;
  block141:
    assert { :sourceloc "Striped64.java",330,-1,-1,-1 } true;
    call $r11373, $exception := sun.misc.Unsafe$sun.misc.Unsafe$getUnsafe$1965();
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            assert { :clone } true;
            goto block142;
        } else {
            assert { :clone } true;
        }
    }
  block143:
    assert { :sourceloc "Striped64.java",330,-1,-1,-1 } true;
    $return := $r11373;
    return;
  block142:
    assert { :sourceloc "Striped64.java",330,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r21374 := $exception;
  block144:
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Striped64$1);
    $r31376 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$1$$la$init$ra$$5940($r31376);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    call $r41377, $exception := java.lang.Object$java.security.AccessController$doPrivileged$5999($r31376);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.security.PrivilegedActionException) {
            goto block145;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } $heap[$r41377,$type] <: sun.misc.Unsafe;
    $r51378 := $r41377;
  block146:
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    $return := $r51378;
    return;
  block145:
    assert { :sourceloc "Striped64.java",335,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r61379 := $exception;
    assert { :sourceloc "Striped64.java",348,-1,-1,-1 } true;
    r91383 := $r61379;
    assert { :sourceloc "Striped64.java",349,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.RuntimeException);
    $r71380 := $fakelocal_1;
    assert { :sourceloc "Striped64.java",349,-1,-1,-1 } true;
    call $r81382, $exception := java.lang.Throwable$java.security.PrivilegedActionException$getCause$6009(r91383);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",349,-1,-1,-1 } true;
    call $exception := void$java.lang.RuntimeException$$la$init$ra$$924($r71380, $StringConst43, $r81382);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",349,-1,-1,-1 } true;
    $exception := $r71380;
    return;
}


implementation sun.misc.Unsafe$com.codahale.metrics.Striped64$access$000$3407() returns ($return:ref, $exception:ref){
    
var $r01384 : ref;
    assume $heap[$return,$type] <: sun.misc.Unsafe;
    assert { :sourceloc "Striped64.java",20,-1,-1,-1 } true;
    call $r01384, $exception := sun.misc.Unsafe$com.codahale.metrics.Striped64$getUnsafe$3406();
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",20,-1,-1,-1 } true;
    $return := $r01384;
    return;
}


implementation void$com.codahale.metrics.Striped64$$la$clinit$ra$$3408() returns ($exception:ref){
    
var $r21386 : ref;    
var r101398 : ref;    
var $r51391 : ref;    
var $r61393 : ref;    
var $fakelocal_1 : ref;    
var $r91397 : ref;    
var $fakelocal_0 : ref;    
var $r31388 : ref;    
var $l11392 : int;    
var r01389 : ref;    
var $i01387 : int;    
var $r11385 : ref;    
var $l21395 : int;    
var $r81396 : ref;    
var $r71394 : ref;    
var $r41390 : ref;
    assert { :sourceloc "Striped64.java",148,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Striped64$ThreadHashCode);
    $r11385 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",148,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$ThreadHashCode$$la$init$ra$$3518($r11385);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",148,-1,-1,-1 } true;
    com.codahale.metrics.Striped64$ThreadHashCode$com.codahale.metrics.Striped64$threadHashCode470 := $r11385;
    assert { :sourceloc "Striped64.java",153,-1,-1,-1 } true;
    call $r21386, $exception := java.lang.Runtime$java.lang.Runtime$getRuntime$5966();
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",153,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",153,-1,-1,-1 } $r21386 != $null;
    call $i01387, $exception := int$java.lang.Runtime$availableProcessors$5979($r21386);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",153,-1,-1,-1 } true;
    int$com.codahale.metrics.Striped64$NCPU0 := $i01387;
  block147:
    assert { :sourceloc "Striped64.java",311,-1,-1,-1 } true;
    call $r31388, $exception := sun.misc.Unsafe$com.codahale.metrics.Striped64$getUnsafe$3406();
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            assert { :clone } true;
            goto block148;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",311,-1,-1,-1 } true;
    sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472 := $r31388;
    assert { :sourceloc "Striped64.java",312,-1,-1,-1 } true;
    r01389 := CC$com$_$codahale$_$metrics$_$Striped64;
    assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
    $r41390 := sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472;
    assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
    call $r51391, $exception := java.lang.reflect.Field$java.lang.Class$getDeclaredField$499(r01389, $StringConst44);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            goto block148;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
    if ($r41390 != $null) {
        assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block148;
    }
    call $l11392, $exception := long$sun.misc.Unsafe$objectFieldOffset$2028($r41390, $r51391);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            assert { :clone } true;
            goto block148;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",313,-1,-1,-1 } true;
    long$com.codahale.metrics.Striped64$baseOffset0 := $l11392;
    assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
    $r61393 := sun.misc.Unsafe$com.codahale.metrics.Striped64$UNSAFE472;
    assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
    call $r71394, $exception := java.lang.reflect.Field$java.lang.Class$getDeclaredField$499(r01389, $StringConst45);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            goto block148;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
    if ($r61393 != $null) {
        assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block148;
    }
    call $l21395, $exception := long$sun.misc.Unsafe$objectFieldOffset$2028($r61393, $r71394);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            assert { :clone } true;
            goto block148;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",315,-1,-1,-1 } true;
    long$com.codahale.metrics.Striped64$busyOffset0 := $l21395;
  block149:
    assert { :sourceloc "Striped64.java",319,-1,-1,-1 } true;
    goto block150;
  block148:
    assert { :sourceloc "Striped64.java",320,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r81396 := $exception;
    assert { :sourceloc "Striped64.java",317,-1,-1,-1 } true;
    r101398 := $r81396;
    assert { :sourceloc "Striped64.java",318,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.Error);
    $r91397 := $fakelocal_1;
    assert { :sourceloc "Striped64.java",318,-1,-1,-1 } true;
    call $exception := void$java.lang.Error$$la$init$ra$$9($r91397, r101398);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",318,-1,-1,-1 } true;
    $exception := $r91397;
    return;
  block150:
    assert { :sourceloc "Striped64.java",320,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Striped64$ThreadHashCode$$la$init$ra$$3518($this:ref) returns ($exception:ref){
    
var r01399 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01399 := $this;
    assert { :sourceloc "Striped64.java",138,-1,-1,-1 } true;
    call $exception := void$java.lang.ThreadLocal$$la$init$ra$$3528(r01399);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",138,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Striped64$HashCode$com.codahale.metrics.Striped64$ThreadHashCode$initialValue$3519($this:ref) returns ($return:ref, $exception:ref){
    
var r01401 : ref;    
var $fakelocal_0 : ref;    
var $r11400 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Striped64$HashCode;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01401 := $this;
    assert { :sourceloc "Striped64.java",140,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Striped64$HashCode);
    $r11400 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",140,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Striped64$HashCode$$la$init$ra$$3524($r11400);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",140,-1,-1,-1 } true;
    $return := $r11400;
    return;
}


implementation java.lang.Object$com.codahale.metrics.Striped64$ThreadHashCode$initialValue$3520($this:ref) returns ($return:ref, $exception:ref){
    
var $r11403 : ref;    
var r01402 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01402 := $this;
    assert { :sourceloc "Striped64.java",138,-1,-1,-1 } true;
    call $r11403, $exception := com.codahale.metrics.Striped64$HashCode$com.codahale.metrics.Striped64$ThreadHashCode$initialValue$3519(r01402);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",138,-1,-1,-1 } true;
    $return := $r11403;
    return;
}


implementation void$com.codahale.metrics.Striped64$Cell$$la$init$ra$$3521($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var r01404 : ref;    
var l01405 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01404 := $this;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l01405 := $in_parameter__0;
    assert { :sourceloc "Striped64.java",96,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01404);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",97,-1,-1,-1 } true;
    $heap := $heap[r01404,long$com.codahale.metrics.Striped64$Cell$value0 := l01405];
    assert { :sourceloc "Striped64.java",98,-1,-1,-1 } true;
    return;
}


implementation boolean$com.codahale.metrics.Striped64$Cell$cas$3522($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var $l21409 : int;    
var $z01411 : int;    
var r01406 : ref;    
var $r11410 : ref;    
var l01407 : int;    
var l11408 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01406 := $this;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l01407 := $in_parameter__0;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    l11408 := $in_parameter__1;
    assert { :sourceloc "Striped64.java",101,-1,-1,-1 } true;
    $r11410 := sun.misc.Unsafe$com.codahale.metrics.Striped64$Cell$UNSAFE482;
    assert { :sourceloc "Striped64.java",101,-1,-1,-1 } true;
    $l21409 := long$com.codahale.metrics.Striped64$Cell$valueOffset0;
    assert { :sourceloc "Striped64.java",101,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",101,-1,-1,-1 } $r11410 != $null;
    call $z01411, $exception := boolean$sun.misc.Unsafe$compareAndSwapLong$2046($r11410, r01406, $l21409, l01407, l11408);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",101,-1,-1,-1 } true;
    $return := $z01411;
    return;
}


implementation void$com.codahale.metrics.Striped64$Cell$$la$clinit$ra$$3523() returns ($exception:ref){
    
var $r51418 : ref;    
var $r11412 : ref;    
var r61419 : ref;    
var r01413 : ref;    
var $fakelocal_0 : ref;    
var $l01416 : int;    
var $r21414 : ref;    
var $r31415 : ref;    
var $r41417 : ref;
  block151:
    assert { :sourceloc "Striped64.java",110,-1,-1,-1 } true;
    call $r11412, $exception := sun.misc.Unsafe$com.codahale.metrics.Striped64$access$000$3407();
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            assert { :clone } true;
            goto block152;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",110,-1,-1,-1 } true;
    sun.misc.Unsafe$com.codahale.metrics.Striped64$Cell$UNSAFE482 := $r11412;
    assert { :sourceloc "Striped64.java",111,-1,-1,-1 } true;
    r01413 := CC$com$_$codahale$_$metrics$_$Striped64$Cell;
    assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
    $r21414 := sun.misc.Unsafe$com.codahale.metrics.Striped64$Cell$UNSAFE482;
    assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
    call $r31415, $exception := java.lang.reflect.Field$java.lang.Class$getDeclaredField$499(r01413, $StringConst46);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            goto block152;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
    if ($r21414 != $null) {
        assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block152;
    }
    call $l01416, $exception := long$sun.misc.Unsafe$objectFieldOffset$2028($r21414, $r31415);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            assert { :clone } true;
            goto block152;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",112,-1,-1,-1 } true;
    long$com.codahale.metrics.Striped64$Cell$valueOffset0 := $l01416;
  block153:
    assert { :sourceloc "Striped64.java",116,-1,-1,-1 } true;
    goto block154;
  block152:
    assert { :sourceloc "Striped64.java",117,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r41417 := $exception;
    assert { :sourceloc "Striped64.java",114,-1,-1,-1 } true;
    r61419 := $r41417;
    assert { :sourceloc "Striped64.java",115,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.Error);
    $r51418 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",115,-1,-1,-1 } true;
    call $exception := void$java.lang.Error$$la$init$ra$$9($r51418, r61419);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",115,-1,-1,-1 } true;
    $exception := $r51418;
    return;
  block154:
    assert { :sourceloc "Striped64.java",117,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Striped64$HashCode$$la$init$ra$$3524($this:ref) returns ($exception:ref){
    
var $i11424 : int;    
var i01423 : int;    
var r01420 : ref;    
var $r11421 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r01420 := $this;
    assert { :sourceloc "Striped64.java",129,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01420);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",130,-1,-1,-1 } true;
    $r11421 := java.util.Random$com.codahale.metrics.Striped64$HashCode$rng483;
    assert { :sourceloc "Striped64.java",130,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",130,-1,-1,-1 } $r11421 != $null;
    call i01423, $exception := int$java.util.Random$nextInt$4105($r11421);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",131,-1,-1,-1 } true;
    if (i01423 != 0) {
        assert { :sourceloc "Striped64.java",131,-1,-1,-1 } { :comment "thenblock" } true;
        goto block155;
    } else {
        assert { :sourceloc "Striped64.java",131,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",132,-1,-1,-1 } true;
    $i11424 := 1;
    assert { :sourceloc "Striped64.java",132,-1,-1,-1 } true;
    goto block156;
  block155:
    assert { :sourceloc "Striped64.java",132,-1,-1,-1 } true;
    $i11424 := i01423;
  block156:
    assert { :sourceloc "Striped64.java",131,-1,-1,-1 } true;
    $heap := $heap[r01420,int$com.codahale.metrics.Striped64$HashCode$code0 := $i11424];
    assert { :sourceloc "Striped64.java",132,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Striped64$HashCode$$la$clinit$ra$$3525() returns ($exception:ref){
    
var $r01425 : ref;    
var $fakelocal_0 : ref;
    assert { :sourceloc "Striped64.java",126,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.Random);
    $r01425 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",126,-1,-1,-1 } true;
    call $exception := void$java.util.Random$$la$init$ra$$4098($r01425);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",126,-1,-1,-1 } true;
    java.util.Random$com.codahale.metrics.Striped64$HashCode$rng483 := $r01425;
    assert { :sourceloc "Striped64.java",126,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$forRegistry$3539($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r01427 : ref;    
var $fakelocal_0 : ref;    
var $r11426 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01427 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",24,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.CsvReporter$Builder);
    $r11426 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",24,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3558($r11426, r01427, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",24,-1,-1,-1 } true;
    $return := $r11426;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$$la$init$ra$$3540($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref) returns ($exception:ref){
    
var r11429 : ref;    
var r31434 : ref;    
var r71430 : ref;    
var r51432 : ref;    
var r21433 : ref;    
var r61435 : ref;    
var r01428 : ref;    
var r41431 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__4,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__5,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__2,$type] <: java.util.Locale;
    assume $heap[$in_parameter__1,$type] <: java.io.File;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__6,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01428 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11429 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21433 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r31434 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r41431 := $in_parameter__3;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r51432 := $in_parameter__4;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r61435 := $in_parameter__5;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r71430 := $in_parameter__6;
    assert { :sourceloc "CsvReporter.java",135,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$$la$init$ra$$2440(r01428, r11429, $StringConst47, r71430, r41431, r51432);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",136,-1,-1,-1 } true;
    $heap := $heap[r01428,java.io.File$com.codahale.metrics.CsvReporter$directory487 := r21433];
    assert { :sourceloc "CsvReporter.java",137,-1,-1,-1 } true;
    $heap := $heap[r01428,java.util.Locale$com.codahale.metrics.CsvReporter$locale488 := r31434];
    assert { :sourceloc "CsvReporter.java",138,-1,-1,-1 } true;
    $heap := $heap[r01428,com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$clock489 := r61435];
    assert { :sourceloc "CsvReporter.java",139,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$report$3541($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var r31451 : ref;    
var $r131456 : ref;    
var $r171465 : ref;    
var r41455 : ref;    
var r71464 : ref;    
var $r151463 : ref;    
var $z01446 : int;    
var $z21454 : int;    
var r451494 : ref;    
var $r261477 : ref;    
var $r231474 : ref;    
var r431492 : ref;    
var $r111448 : ref;    
var $z41462 : int;    
var $r251472 : ref;    
var $l11439 : int;    
var $r311482 : ref;    
var r01436 : ref;    
var $r271478 : ref;    
var r11442 : ref;    
var r51459 : ref;    
var r61445 : ref;    
var r471496 : ref;    
var $r351485 : ref;    
var $r141460 : ref;    
var $z11450 : int;    
var $r101443 : ref;    
var r401489 : ref;    
var l01441 : int;    
var r421491 : ref;    
var $r321479 : ref;    
var $r241471 : ref;    
var $r191470 : ref;    
var $r211468 : ref;    
var $r341486 : ref;    
var r411490 : ref;    
var r461495 : ref;    
var $r381488 : ref;    
var $r81437 : ref;    
var $r91438 : ref;    
var $r221473 : ref;    
var r441493 : ref;    
var $r361484 : ref;    
var $r291476 : ref;    
var $r181469 : ref;    
var $r201467 : ref;    
var $r331480 : ref;    
var $r371483 : ref;    
var $r161466 : ref;    
var $z31458 : int;    
var $r121452 : ref;    
var $r281475 : ref;    
var $r301481 : ref;    
var $r391487 : ref;    
var r21447 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__3,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__0,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__1,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__4,$type] <: java.util.SortedMap;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01436 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11442 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21447 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r31451 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r41455 := $in_parameter__3;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r51459 := $in_parameter__4;
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } true;
    $r91438 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } true;
    $r81437 := $heap[r01436,com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$clock489];
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } $r81437 != $null;
    call $l11439, $exception := long$com.codahale.metrics.Clock$getTime$1897($r81437);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",147,-1,-1,-1 } $r91438 != $null;
    call l01441, $exception := long$java.util.concurrent.TimeUnit$toSeconds$1929($r91438, $l11439);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } r11442 != $null;
    call $r101443, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r11442);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } $r101443 != $null;
    call r61445, $exception := java.util.Iterator$java.util.Set$iterator$236($r101443);
    if ($exception != $null) {
    }
  block157:
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } r61445 != $null;
    call $z01446, $exception := boolean$java.util.Iterator$hasNext$1051(r61445);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } true;
    if ($z01446 == 0) {
        assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } { :comment "thenblock" } true;
        goto block158;
    } else {
        assert { :sourceloc "CsvReporter.java",149,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",155,-1,-1,-1 } true;
    call $r361484, $exception := java.lang.Object$java.util.Iterator$next$1052(r61445);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",155,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",155,-1,-1,-1 } $heap[$r361484,$type] <: java.util.Map$Entry;
    r71464 := $r361484;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } r71464 != $null;
    call $r351485, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r71464);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } $heap[$r351485,$type] <: java.lang.String;
    $r341486 := $r351485;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } true;
    call $r391487, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r71464);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } $heap[$r391487,$type] <: com.codahale.metrics.Gauge;
    $r381488 := $r391487;
    assert { :sourceloc "CsvReporter.java",150,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$reportGauge$3546(r01436, l01441, $r341486, $r381488);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",151,-1,-1,-1 } true;
    goto block157;
  block158:
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } r21447 != $null;
    call $r111448, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r21447);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } $r111448 != $null;
    call r401489, $exception := java.util.Iterator$java.util.Set$iterator$236($r111448);
    if ($exception != $null) {
    }
  block159:
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } r401489 != $null;
    call $z11450, $exception := boolean$java.util.Iterator$hasNext$1051(r401489);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } true;
    if ($z11450 == 0) {
        assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } { :comment "thenblock" } true;
        goto block160;
    } else {
        assert { :sourceloc "CsvReporter.java",153,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",159,-1,-1,-1 } true;
    call $r321479, $exception := java.lang.Object$java.util.Iterator$next$1052(r401489);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",159,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",159,-1,-1,-1 } $heap[$r321479,$type] <: java.util.Map$Entry;
    r411490 := $r321479;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } r411490 != $null;
    call $r331480, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r411490);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } $heap[$r331480,$type] <: java.lang.String;
    $r301481 := $r331480;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } true;
    call $r311482, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r411490);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } $heap[$r311482,$type] <: com.codahale.metrics.Counter;
    $r371483 := $r311482;
    assert { :sourceloc "CsvReporter.java",154,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$reportCounter$3545(r01436, l01441, $r301481, $r371483);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",155,-1,-1,-1 } true;
    goto block159;
  block160:
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } r31451 != $null;
    call $r121452, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r31451);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } $r121452 != $null;
    call r421491, $exception := java.util.Iterator$java.util.Set$iterator$236($r121452);
    if ($exception != $null) {
    }
  block161:
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } r421491 != $null;
    call $z21454, $exception := boolean$java.util.Iterator$hasNext$1051(r421491);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } true;
    if ($z21454 == 0) {
        assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } { :comment "thenblock" } true;
        goto block162;
    } else {
        assert { :sourceloc "CsvReporter.java",157,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",163,-1,-1,-1 } true;
    call $r231474, $exception := java.lang.Object$java.util.Iterator$next$1052(r421491);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",163,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",163,-1,-1,-1 } $heap[$r231474,$type] <: java.util.Map$Entry;
    r431492 := $r231474;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } r431492 != $null;
    call $r281475, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r431492);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } $heap[$r281475,$type] <: java.lang.String;
    $r291476 := $r281475;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } true;
    call $r261477, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r431492);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } $heap[$r261477,$type] <: com.codahale.metrics.Histogram;
    $r271478 := $r261477;
    assert { :sourceloc "CsvReporter.java",158,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$reportHistogram$3544(r01436, l01441, $r291476, $r271478);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",159,-1,-1,-1 } true;
    goto block161;
  block162:
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } r41455 != $null;
    call $r131456, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r41455);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } $r131456 != $null;
    call r441493, $exception := java.util.Iterator$java.util.Set$iterator$236($r131456);
    if ($exception != $null) {
    }
  block163:
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } r441493 != $null;
    call $z31458, $exception := boolean$java.util.Iterator$hasNext$1051(r441493);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } true;
    if ($z31458 == 0) {
        assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } { :comment "thenblock" } true;
        goto block164;
    } else {
        assert { :sourceloc "CsvReporter.java",161,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",167,-1,-1,-1 } true;
    call $r181469, $exception := java.lang.Object$java.util.Iterator$next$1052(r441493);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",167,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",167,-1,-1,-1 } $heap[$r181469,$type] <: java.util.Map$Entry;
    r451494 := $r181469;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } r451494 != $null;
    call $r191470, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r451494);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } $heap[$r191470,$type] <: java.lang.String;
    $r241471 := $r191470;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } true;
    call $r251472, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r451494);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } $heap[$r251472,$type] <: com.codahale.metrics.Meter;
    $r221473 := $r251472;
    assert { :sourceloc "CsvReporter.java",162,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$reportMeter$3543(r01436, l01441, $r241471, $r221473);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",163,-1,-1,-1 } true;
    goto block163;
  block164:
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } r51459 != $null;
    call $r141460, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r51459);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } $r141460 != $null;
    call r461495, $exception := java.util.Iterator$java.util.Set$iterator$236($r141460);
    if ($exception != $null) {
    }
  block165:
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } r461495 != $null;
    call $z41462, $exception := boolean$java.util.Iterator$hasNext$1051(r461495);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } true;
    if ($z41462 == 0) {
        assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } { :comment "thenblock" } true;
        goto block166;
    } else {
        assert { :sourceloc "CsvReporter.java",165,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",168,-1,-1,-1 } true;
    call $r151463, $exception := java.lang.Object$java.util.Iterator$next$1052(r461495);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",168,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",168,-1,-1,-1 } $heap[$r151463,$type] <: java.util.Map$Entry;
    r471496 := $r151463;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } r471496 != $null;
    call $r171465, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r471496);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } $heap[$r171465,$type] <: java.lang.String;
    $r161466 := $r171465;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } true;
    call $r201467, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r471496);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } $heap[$r201467,$type] <: com.codahale.metrics.Timer;
    $r211468 := $r201467;
    assert { :sourceloc "CsvReporter.java",166,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$reportTimer$3542(r01436, l01441, $r161466, $r211468);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",167,-1,-1,-1 } true;
    goto block165;
  block166:
    assert { :sourceloc "CsvReporter.java",168,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$reportTimer$3542($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r11502 : ref;    
var $r81522 : ref;    
var $r41503 : ref;    
var $d221557 : int;    
var $d111533 : int;    
var $r141546 : ref;    
var $d261560 : int;    
var $d231556 : int;    
var $d61525 : int;    
var $r211570 : ref;    
var $fakelocal_0 : ref;    
var $r91526 : ref;    
var $r101530 : ref;    
var $d51520 : int;    
var $r71517 : ref;    
var $d01511 : int;    
var $r171558 : ref;    
var $d121536 : int;    
var $d251565 : int;    
var $r191562 : ref;    
var $r61513 : ref;    
var l01501 : int;    
var $d41521 : int;    
var $l21510 : int;    
var $d71524 : int;    
var $d271561 : int;    
var $r161554 : ref;    
var $d141540 : int;    
var $d191548 : int;    
var $d91529 : int;    
var $d161545 : int;    
var $r51508 : ref;    
var $d21515 : int;    
var $r131542 : ref;    
var $r201568 : ref;    
var $d241564 : int;    
var $d181549 : int;    
var $d211552 : int;    
var r01500 : ref;    
var $d201553 : int;    
var $d11512 : int;    
var r31499 : ref;    
var $l11507 : int;    
var $r121538 : ref;    
var $l31519 : int;    
var $d171544 : int;    
var $d131537 : int;    
var $d101532 : int;    
var r21497 : ref;    
var $d151541 : int;    
var $r181566 : ref;    
var $r111534 : ref;    
var $d31516 : int;    
var $r151550 : ref;    
var $d81528 : int;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01500 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01501 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11502 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21497 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",171,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",171,-1,-1,-1 } r21497 != $null;
    call r31499, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 17];
    $r41503 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $l11507, $exception := long$com.codahale.metrics.Timer$getCount$2658(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r51508, $exception := java.lang.Long$java.lang.Long$valueOf$878($l11507);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 0 < $arrSizeHeap[$r41503] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][0 := $r51508]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } r31499 != $null;
    call $l21510, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    $d01511 := $l21510;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d11512, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d01511);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r61513, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d11512);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 1 < $arrSizeHeap[$r41503] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][1 := $r61513]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d21515, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d31516, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d21515);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r71517, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d31516);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 2 < $arrSizeHeap[$r41503] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][2 := $r71517]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $l31519, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    $d51520 := $l31519;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d41521, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d51520);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r81522, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d41521);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 3 < $arrSizeHeap[$r41503] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][3 := $r81522]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d71524, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d61525, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d71524);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r91526, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d61525);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 4 < $arrSizeHeap[$r41503] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][4 := $r91526]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d81528, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d91529, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d81528);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r101530, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d91529);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 5 < $arrSizeHeap[$r41503] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][5 := $r101530]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d101532, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d111533, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d101532);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r111534, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d111533);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 6 < $arrSizeHeap[$r41503] && 6 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][6 := $r111534]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d121536, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d131537, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d121536);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r121538, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d131537);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 7 < $arrSizeHeap[$r41503] && 7 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][7 := $r121538]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d141540, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d151541, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d141540);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r131542, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d151541);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 8 < $arrSizeHeap[$r41503] && 8 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][8 := $r131542]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d171544, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d161545, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d171544);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r141546, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d161545);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 9 < $arrSizeHeap[$r41503] && 9 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][9 := $r141546]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d191548, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r31499);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d181549, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r01500, $d191548);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r151550, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d181549);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 10 < $arrSizeHeap[$r41503] && 10 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][10 := $r151550]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d211552, $exception := double$com.codahale.metrics.Timer$getMeanRate$2661(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d201553, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01500, $d211552);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r161554, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d201553);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 11 < $arrSizeHeap[$r41503] && 11 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][11 := $r161554]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d231556, $exception := double$com.codahale.metrics.Timer$getOneMinuteRate$2662(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d221557, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01500, $d231556);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r171558, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d221557);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 12 < $arrSizeHeap[$r41503] && 12 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][12 := $r171558]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d261560, $exception := double$com.codahale.metrics.Timer$getFiveMinuteRate$2660(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d271561, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01500, $d261560);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r191562, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d271561);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 13 < $arrSizeHeap[$r41503] && 13 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][13 := $r191562]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d241564, $exception := double$com.codahale.metrics.Timer$getFifteenMinuteRate$2659(r21497);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $d251565, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01500, $d241564);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r181566, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d251565);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 14 < $arrSizeHeap[$r41503] && 14 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][14 := $r181566]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r201568, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r01500);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 15 < $arrSizeHeap[$r41503] && 15 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][15 := $r201568]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $r211570, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r01500);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } 16 < $arrSizeHeap[$r41503] && 16 >= 0;
    $refArrHeap := $refArrHeap[$r41503 := $refArrHeap[$r41503][16 := $r211570]];
    assert { :sourceloc "CsvReporter.java",173,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$report$3547(r01500, l01501, r11502, $StringConst48, $StringConst49, $r41503);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",194,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$reportMeter$3543($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $l11579 : int;    
var r21575 : ref;    
var $d51590 : int;    
var $fakelocal_0 : ref;    
var $d01582 : int;    
var $r41580 : ref;    
var $d61595 : int;    
var $d11583 : int;    
var $d31586 : int;    
var $r81596 : ref;    
var r11573 : ref;    
var $r91598 : ref;    
var $d71594 : int;    
var $r51584 : ref;    
var $d21587 : int;    
var r01571 : ref;    
var $r61588 : ref;    
var l01572 : int;    
var $d41591 : int;    
var $r31574 : ref;    
var $r71592 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Meter;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01571 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01572 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11573 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21575 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 6];
    $r31574 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } r21575 != $null;
    call $l11579, $exception := long$com.codahale.metrics.Meter$getCount$2636(r21575);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r41580, $exception := java.lang.Long$java.lang.Long$valueOf$878($l11579);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 0 < $arrSizeHeap[$r31574] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][0 := $r41580]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d01582, $exception := double$com.codahale.metrics.Meter$getMeanRate$2639(r21575);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d11583, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01571, $d01582);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r51584, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d11583);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 1 < $arrSizeHeap[$r31574] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][1 := $r51584]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d31586, $exception := double$com.codahale.metrics.Meter$getOneMinuteRate$2640(r21575);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d21587, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01571, $d31586);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r61588, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d21587);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 2 < $arrSizeHeap[$r31574] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][2 := $r61588]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d51590, $exception := double$com.codahale.metrics.Meter$getFiveMinuteRate$2638(r21575);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d41591, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01571, $d51590);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r71592, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d41591);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 3 < $arrSizeHeap[$r31574] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][3 := $r71592]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d71594, $exception := double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637(r21575);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $d61595, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r01571, $d71594);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r81596, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d61595);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 4 < $arrSizeHeap[$r31574] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][4 := $r81596]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $r91598, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r01571);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } 5 < $arrSizeHeap[$r31574] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r31574 := $refArrHeap[$r31574][5 := $r91598]];
    assert { :sourceloc "CsvReporter.java",197,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$report$3547(r01571, l01572, r11573, $StringConst50, $StringConst51, $r31574);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",207,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$reportHistogram$3544($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $r61613 : ref;    
var $r41605 : ref;    
var r31601 : ref;    
var $r151640 : ref;    
var $l11609 : int;    
var $l21612 : int;    
var $d21624 : int;    
var $d41633 : int;    
var $r141634 : ref;    
var $r111628 : ref;    
var $r131637 : ref;    
var r21599 : ref;    
var r11604 : ref;    
var $l31618 : int;    
var $d51630 : int;    
var r01602 : ref;    
var $r91622 : ref;    
var $r51610 : ref;    
var $fakelocal_0 : ref;    
var $d61636 : int;    
var $r81619 : ref;    
var $d31627 : int;    
var $d11621 : int;    
var $r101625 : ref;    
var l01603 : int;    
var $d01615 : int;    
var $r121631 : ref;    
var $r71616 : ref;    
var $d71639 : int;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Histogram;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01602 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01603 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11604 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21599 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",210,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",210,-1,-1,-1 } r21599 != $null;
    call r31601, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651(r21599);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 11];
    $r41605 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $l11609, $exception := long$com.codahale.metrics.Histogram$getCount$2650(r21599);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r51610, $exception := java.lang.Long$java.lang.Long$valueOf$878($l11609);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 0 < $arrSizeHeap[$r41605] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][0 := $r51610]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } r31601 != $null;
    call $l21612, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r61613, $exception := java.lang.Long$java.lang.Long$valueOf$878($l21612);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 1 < $arrSizeHeap[$r41605] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][1 := $r61613]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d01615, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r71616, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d01615);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 2 < $arrSizeHeap[$r41605] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][2 := $r71616]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $l31618, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r81619, $exception := java.lang.Long$java.lang.Long$valueOf$878($l31618);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 3 < $arrSizeHeap[$r41605] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][3 := $r81619]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d11621, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r91622, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d11621);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 4 < $arrSizeHeap[$r41605] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][4 := $r91622]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d21624, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r101625, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d21624);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 5 < $arrSizeHeap[$r41605] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][5 := $r101625]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d31627, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r111628, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d31627);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 6 < $arrSizeHeap[$r41605] && 6 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][6 := $r111628]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d51630, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r121631, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d51630);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 7 < $arrSizeHeap[$r41605] && 7 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][7 := $r121631]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d41633, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r141634, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d41633);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 8 < $arrSizeHeap[$r41605] && 8 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][8 := $r141634]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d61636, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r131637, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d61636);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 9 < $arrSizeHeap[$r41605] && 9 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][9 := $r131637]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $d71639, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r31601);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $r151640, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d71639);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } 10 < $arrSizeHeap[$r41605] && 10 >= 0;
    $refArrHeap := $refArrHeap[$r41605 := $refArrHeap[$r41605][10 := $r151640]];
    assert { :sourceloc "CsvReporter.java",212,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$report$3547(r01602, l01603, r11604, $StringConst52, $StringConst53, $r41605);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",227,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$reportCounter$3545($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r21645 : ref;    
var $l11649 : int;    
var $r31644 : ref;    
var r11643 : ref;    
var $r41650 : ref;    
var $fakelocal_0 : ref;    
var l01642 : int;    
var r01641 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Counter;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01641 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01642 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11643 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21645 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r31644 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } r21645 != $null;
    call $l11649, $exception := long$com.codahale.metrics.Counter$getCount$2847(r21645);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } true;
    call $r41650, $exception := java.lang.Long$java.lang.Long$valueOf$878($l11649);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } 0 < $arrSizeHeap[$r31644] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r31644 := $refArrHeap[$r31644][0 := $r41650]];
    assert { :sourceloc "CsvReporter.java",230,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$report$3547(r01641, l01642, r11643, $StringConst54, $StringConst55, $r31644);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",231,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$reportGauge$3546($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r21655 : ref;    
var $r31654 : ref;    
var l01652 : int;    
var r01651 : ref;    
var $r41659 : ref;    
var r11653 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Gauge;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01651 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01652 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11653 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21655 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 1];
    $r31654 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } r21655 != $null;
    call $r41659, $exception := java.lang.Object$com.codahale.metrics.Gauge$getValue$1894(r21655);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } 0 < $arrSizeHeap[$r31654] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r31654 := $refArrHeap[$r31654][0 := $r41659]];
    assert { :sourceloc "CsvReporter.java",234,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$report$3547(r01651, l01652, r11653, $StringConst46, $StringConst56, $r31654);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",235,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$report$3547($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var $r241688 : ref;    
var r51669 : ref;    
var $r281691 : ref;    
var $r151672 : ref;    
var $r231683 : ref;    
var $fakelocal_1 : ref;    
var l01678 : int;    
var $r301694 : ref;    
var $r181677 : ref;    
var $r211679 : ref;    
var r321698 : ref;    
var $z11693 : int;    
var r01661 : ref;    
var $r311696 : ref;    
var $r291697 : ref;    
var $fakelocal_0 : ref;    
var $fakelocal_4 : ref;    
var $r171673 : ref;    
var $r271689 : ref;    
var $r161674 : ref;    
var $r261692 : ref;    
var r71695 : ref;    
var $fakelocal_5 : ref;    
var z01671 : int;    
var $fakelocal_3 : ref;    
var $r111665 : ref;    
var $r221685 : ref;    
var r31684 : ref;    
var $r131668 : ref;    
var r61676 : ref;    
var $r91662 : ref;    
var $r141667 : ref;    
var $fakelocal_6 : ref;    
var r41686 : ref;    
var r21690 : ref;    
var $r201680 : ref;    
var $fakelocal_2 : ref;    
var r11664 : ref;    
var $r101663 : ref;    
var $r121666 : ref;    
var $r191675 : ref;    
var $r81660 : ref;    
var $fakelocal_7 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__3,$type] <: java.lang.String;
    assume $heap[$in_parameter__2,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01661 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    l01678 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11664 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21690 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r31684 := $in_parameter__3;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r41686 := $in_parameter__4;
  block167:
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.io.File);
    $r81660 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    $r101663 := $heap[r01661,java.io.File$com.codahale.metrics.CsvReporter$directory487];
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r91662 := $fakelocal_1;
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r91662);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            $r91662 := $null;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $r111665, $exception := java.lang.String$com.codahale.metrics.CsvReporter$sanitize$3548(r01661, r11664);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $r121666, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r91662, $r111665);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } $r121666 != $null;
    call $r141667, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r121666, $StringConst57);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } $r141667 != $null;
    call $r131668, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r141667);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    call $exception := void$java.io.File$$la$init$ra$$3054($r81660, $r101663, $r131668);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            $r81660 := $null;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",239,-1,-1,-1 } true;
    r51669 := $r81660;
    assert { :sourceloc "CsvReporter.java",240,-1,-1,-1 } true;
    call z01671, $exception := boolean$java.io.File$exists$3070(r51669);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",241,-1,-1,-1 } true;
    if (z01671 != 0) {
        assert { :sourceloc "CsvReporter.java",241,-1,-1,-1 } { :clone } { :comment "thenblock" } true;
        goto block169;
    } else {
        assert { :sourceloc "CsvReporter.java",241,-1,-1,-1 } { :clone } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",250,-1,-1,-1 } true;
    call $z11693, $exception := boolean$java.io.File$createNewFile$3076(r51669);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",250,-1,-1,-1 } true;
    if ($z11693 == 0) {
        assert { :sourceloc "CsvReporter.java",250,-1,-1,-1 } { :comment "thenblock" } true;
        goto block170;
    } else {
        assert { :sourceloc "CsvReporter.java",250,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block169:
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $fakelocal_2 := $new(java.io.PrintWriter);
    $r151672 := $fakelocal_2;
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $fakelocal_3 := $new(java.io.OutputStreamWriter);
    $r171673 := $fakelocal_3;
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $fakelocal_4 := $new(java.io.FileOutputStream);
    $r161674 := $fakelocal_4;
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $exception := void$java.io.FileOutputStream$$la$init$ra$$3742($r161674, r51669, 1);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.FileNotFoundException) {
            $r161674 := $null;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    $r191675 := java.nio.charset.Charset$com.codahale.metrics.CsvReporter$UTF_8486;
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $exception := void$java.io.OutputStreamWriter$$la$init$ra$$2997($r171673, $r161674, $r191675);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            $r171673 := $null;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    call $exception := void$java.io.PrintWriter$$la$init$ra$$249($r151672, $r171673);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            $r151672 := $null;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",242,-1,-1,-1 } true;
    r61676 := $r151672;
  block171:
    assert { :sourceloc "CsvReporter.java",244,-1,-1,-1 } true;
    if (z01671 != 0) {
        assert { :sourceloc "CsvReporter.java",244,-1,-1,-1 } { :clone } { :comment "thenblock" } true;
        goto block172;
    } else {
        assert { :sourceloc "CsvReporter.java",244,-1,-1,-1 } { :clone } { :comment "elseblock" } true;
    }
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    call $fakelocal_5 := $new(java.lang.StringBuilder);
    $r241688 := $fakelocal_5;
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r241688);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            $r241688 := $null;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    call $r271689, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r241688, $StringConst58);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    if ($r271689 != $null) {
        assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block173;
    }
    call $r281691, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r271689, r21690);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    if ($r281691 != $null) {
        assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block173;
    }
    call $r261692, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r281691);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",245,-1,-1,-1 } true;
    call $exception := void$java.io.PrintWriter$println$287(r61676, $r261692);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
  block172:
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    $r211679 := $heap[r01661,java.util.Locale$com.codahale.metrics.CsvReporter$locale488];
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    $r201680 := $heap[r01661,java.util.Locale$com.codahale.metrics.CsvReporter$locale488];
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    call $fakelocal_6 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_6 := 2];
    $r181677 := $fakelocal_6;
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    call $r231683, $exception := java.lang.Long$java.lang.Long$valueOf$878(l01678);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    if (0 < $arrSizeHeap[$r181677] && 0 >= 0) {
        assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block173;
    }
    $refArrHeap := $refArrHeap[$r181677 := $refArrHeap[$r181677][0 := $r231683]];
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    if (1 < $arrSizeHeap[$r181677] && 1 >= 0) {
        assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block173;
    }
    $refArrHeap := $refArrHeap[$r181677 := $refArrHeap[$r181677][1 := r31684]];
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    call $r221685, $exception := java.lang.String$java.lang.String$format$127($r201680, $StringConst59, $r181677);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",247,-1,-1,-1 } true;
    call $fakelocal_7, $exception := java.io.PrintWriter$java.io.PrintWriter$printf$290(r61676, $r211679, $r221685, r41686);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block173;
        } else {
            assert { :clone } true;
        }
    }
  block174:
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } { :clone } true;
    call $exception := void$java.io.PrintWriter$close$260(r61676);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",250,-1,-1,-1 } true;
    goto block170;
  block173:
    assert { :sourceloc "CsvReporter.java",244,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r301694 := $exception;
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } { :clone } true;
    r71695 := $r301694;
  block175:
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } { :clone } true;
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } { :clone } r61676 != $null;
    call $exception := void$java.io.PrintWriter$close$260(r61676);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.io.IOException) {
            assert { :clone } true;
            goto block168;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } { :clone } true;
    $exception := r71695;
    return;
  block170:
    assert { :sourceloc "CsvReporter.java",254,-1,-1,-1 } true;
    goto block176;
  block168:
    assert { :sourceloc "CsvReporter.java",249,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r311696 := $exception;
    assert { :sourceloc "CsvReporter.java",252,-1,-1,-1 } true;
    r321698 := $r311696;
    assert { :sourceloc "CsvReporter.java",253,-1,-1,-1 } true;
    $r291697 := org.slf4j.Logger$com.codahale.metrics.CsvReporter$LOGGER485;
    assert { :sourceloc "CsvReporter.java",253,-1,-1,-1 } true;
    assert { :sourceloc "CsvReporter.java",253,-1,-1,-1 } $r291697 != $null;
    call $exception := void$org.slf4j.Logger$warn$6056($r291697, $StringConst60, r11664, r321698);
    if ($exception != $null) {
    }
  block176:
    assert { :sourceloc "CsvReporter.java",255,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.CsvReporter$sanitize$3548($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r11699 : ref;    
var r01700 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01700 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11699 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",258,-1,-1,-1 } true;
    $return := r11699;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$$la$init$ra$$3549($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref, $in_parameter__7:ref) returns ($exception:ref){
    
var r31704 : ref;    
var r11702 : ref;    
var r81709 : ref;    
var r01701 : ref;    
var r51706 : ref;    
var r71708 : ref;    
var r61707 : ref;    
var r41705 : ref;    
var r21703 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__6,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__1,$type] <: java.io.File;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__7,$type] <: com.codahale.metrics.CsvReporter$1;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__5,$type] <: com.codahale.metrics.Clock;
    assume $heap[$in_parameter__4,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__2,$type] <: java.util.Locale;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01701 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11702 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21703 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r31704 := $in_parameter__2;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r41705 := $in_parameter__3;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r51706 := $in_parameter__4;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r61707 := $in_parameter__5;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r71708 := $in_parameter__6;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r81709 := $in_parameter__7;
    assert { :sourceloc "CsvReporter.java",16,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$$la$init$ra$$3540(r01701, r11702, r21703, r31704, r41705, r51706, r61707, r71708);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",16,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$$la$clinit$ra$$3550() returns ($exception:ref){
    
var $r11711 : ref;    
var $r01710 : ref;
    assert { :sourceloc "CsvReporter.java",121,-1,-1,-1 } true;
    call $r01710, $exception := org.slf4j.Logger$org.slf4j.LoggerFactory$getLogger$6057(CC$com$_$codahale$_$metrics$_$CsvReporter);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",121,-1,-1,-1 } true;
    org.slf4j.Logger$com.codahale.metrics.CsvReporter$LOGGER485 := $r01710;
    assert { :sourceloc "CsvReporter.java",122,-1,-1,-1 } true;
    call $r11711, $exception := java.nio.charset.Charset$java.nio.charset.Charset$forName$3016($StringConst42);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",122,-1,-1,-1 } true;
    java.nio.charset.Charset$com.codahale.metrics.CsvReporter$UTF_8486 := $r11711;
    assert { :sourceloc "CsvReporter.java",122,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3551($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r41716 : ref;    
var r11713 : ref;    
var $r51717 : ref;    
var $r21714 : ref;    
var r01712 : ref;    
var $r31715 : ref;    
var $r61718 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01712 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11713 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",39,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01712);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",40,-1,-1,-1 } true;
    $heap := $heap[r01712,com.codahale.metrics.MetricRegistry$com.codahale.metrics.CsvReporter$Builder$registry490 := r11713];
    assert { :sourceloc "CsvReporter.java",41,-1,-1,-1 } true;
    call $r21714, $exception := java.util.Locale$java.util.Locale$getDefault$2458();
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",41,-1,-1,-1 } true;
    $heap := $heap[r01712,java.util.Locale$com.codahale.metrics.CsvReporter$Builder$locale491 := $r21714];
    assert { :sourceloc "CsvReporter.java",42,-1,-1,-1 } true;
    $r31715 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "CsvReporter.java",42,-1,-1,-1 } true;
    $heap := $heap[r01712,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$rateUnit492 := $r31715];
    assert { :sourceloc "CsvReporter.java",43,-1,-1,-1 } true;
    $r41716 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "CsvReporter.java",43,-1,-1,-1 } true;
    $heap := $heap[r01712,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$durationUnit493 := $r41716];
    assert { :sourceloc "CsvReporter.java",44,-1,-1,-1 } true;
    call $r51717, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",44,-1,-1,-1 } true;
    $heap := $heap[r01712,com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$Builder$clock494 := $r51717];
    assert { :sourceloc "CsvReporter.java",45,-1,-1,-1 } true;
    $r61718 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "CsvReporter.java",45,-1,-1,-1 } true;
    $heap := $heap[r01712,com.codahale.metrics.MetricFilter$com.codahale.metrics.CsvReporter$Builder$filter495 := $r61718];
    assert { :sourceloc "CsvReporter.java",46,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$formatFor$3552($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r01719 : ref;    
var r11720 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.Locale;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01719 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11720 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",55,-1,-1,-1 } true;
    $heap := $heap[r01719,java.util.Locale$com.codahale.metrics.CsvReporter$Builder$locale491 := r11720];
    assert { :sourceloc "CsvReporter.java",56,-1,-1,-1 } true;
    $return := r01719;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$convertRatesTo$3553($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r01721 : ref;    
var r11722 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01721 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11722 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",66,-1,-1,-1 } true;
    $heap := $heap[r01721,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$rateUnit492 := r11722];
    assert { :sourceloc "CsvReporter.java",67,-1,-1,-1 } true;
    $return := r01721;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$convertDurationsTo$3554($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r11724 : ref;    
var r01723 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01723 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11724 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",77,-1,-1,-1 } true;
    $heap := $heap[r01723,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$durationUnit493 := r11724];
    assert { :sourceloc "CsvReporter.java",78,-1,-1,-1 } true;
    $return := r01723;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$withClock$3555($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r11726 : ref;    
var r01725 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Clock;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01725 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11726 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",88,-1,-1,-1 } true;
    $heap := $heap[r01725,com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$Builder$clock494 := r11726];
    assert { :sourceloc "CsvReporter.java",89,-1,-1,-1 } true;
    $return := r01725;
    return;
}


implementation com.codahale.metrics.CsvReporter$Builder$com.codahale.metrics.CsvReporter$Builder$filter$3556($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r11728 : ref;    
var r01727 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter$Builder;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01727 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11728 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",99,-1,-1,-1 } true;
    $heap := $heap[r01727,com.codahale.metrics.MetricFilter$com.codahale.metrics.CsvReporter$Builder$filter495 := r11728];
    assert { :sourceloc "CsvReporter.java",100,-1,-1,-1 } true;
    $return := r01727;
    return;
}


implementation com.codahale.metrics.CsvReporter$com.codahale.metrics.CsvReporter$Builder$build$3557($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r51734 : ref;    
var $r61735 : ref;    
var $r41733 : ref;    
var r01730 : ref;    
var $r81737 : ref;    
var $fakelocal_0 : ref;    
var $r21729 : ref;    
var $r31732 : ref;    
var r11731 : ref;    
var $r71736 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.CsvReporter;
    assume $heap[$in_parameter__0,$type] <: java.io.File;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01730 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11731 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.CsvReporter);
    $r21729 := $fakelocal_0;
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r81737 := $heap[r01730,com.codahale.metrics.MetricRegistry$com.codahale.metrics.CsvReporter$Builder$registry490];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r71736 := $heap[r01730,java.util.Locale$com.codahale.metrics.CsvReporter$Builder$locale491];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r61735 := $heap[r01730,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$rateUnit492];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r51734 := $heap[r01730,java.util.concurrent.TimeUnit$com.codahale.metrics.CsvReporter$Builder$durationUnit493];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r41733 := $heap[r01730,com.codahale.metrics.Clock$com.codahale.metrics.CsvReporter$Builder$clock494];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $r31732 := $heap[r01730,com.codahale.metrics.MetricFilter$com.codahale.metrics.CsvReporter$Builder$filter495];
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$$la$init$ra$$3549($r21729, $r81737, r11731, $r71736, $r61735, $r51734, $r41733, $r31732, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",111,-1,-1,-1 } true;
    $return := $r21729;
    return;
}


implementation void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3558($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r01738 : ref;    
var r11739 : ref;    
var r21740 : ref;
    assume { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.CsvReporter$1;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r01738 := $this;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r11739 := $in_parameter__0;
    assert { :sourceloc "CsvReporter.java",-1,-1,-1,-1 } true;
    r21740 := $in_parameter__1;
    assert { :sourceloc "CsvReporter.java",31,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.CsvReporter$Builder$$la$init$ra$$3551(r01738, r11739);
    if ($exception != $null) {
    }
    assert { :sourceloc "CsvReporter.java",31,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.DerivativeGauge$$la$init$ra$$4038($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r11742 : ref;    
var r01741 : ref;
    assume { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Gauge;
    assert { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } true;
    r01741 := $this;
    assert { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } true;
    r11742 := $in_parameter__0;
    assert { :sourceloc "DerivativeGauge.java",17,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01741);
    if ($exception != $null) {
    }
    assert { :sourceloc "DerivativeGauge.java",18,-1,-1,-1 } true;
    $heap := $heap[r01741,com.codahale.metrics.Gauge$com.codahale.metrics.DerivativeGauge$base547 := r11742];
    assert { :sourceloc "DerivativeGauge.java",19,-1,-1,-1 } true;
    return;
}


implementation java.lang.Object$com.codahale.metrics.DerivativeGauge$getValue$4039($this:ref) returns ($return:ref, $exception:ref){
    
var $r11744 : ref;    
var r01743 : ref;    
var $r31746 : ref;    
var $r21745 : ref;
    assume { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "DerivativeGauge.java",-1,-1,-1,-1 } true;
    r01743 := $this;
    assert { :sourceloc "DerivativeGauge.java",23,-1,-1,-1 } true;
    $r11744 := $heap[r01743,com.codahale.metrics.Gauge$com.codahale.metrics.DerivativeGauge$base547];
    assert { :sourceloc "DerivativeGauge.java",23,-1,-1,-1 } true;
    assert { :sourceloc "DerivativeGauge.java",23,-1,-1,-1 } $r11744 != $null;
    call $r21745, $exception := java.lang.Object$com.codahale.metrics.Gauge$getValue$1894($r11744);
    if ($exception != $null) {
    }
    assert { :sourceloc "DerivativeGauge.java",23,-1,-1,-1 } true;
    call $r31746, $exception := java.lang.Object$com.codahale.metrics.DerivativeGauge$transform$4040(r01743, $r21745);
    if ($exception != $null) {
    }
    assert { :sourceloc "DerivativeGauge.java",23,-1,-1,-1 } true;
    $return := $r31746;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4116($this:ref) returns ($exception:ref){
    
var r01747 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01747 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",41,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4117(r01747, 1028, $DoubleConst11);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",42,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4117($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref){
    
var $r11751 : ref;    
var d01750 : int;    
var i01749 : int;    
var r01748 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01748 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    i01749 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    d01750 := $in_parameter__1;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",52,-1,-1,-1 } true;
    call $r11751, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",52,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4118(r01748, i01749, d01750, $r11751);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",53,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4118($this:ref, $in_parameter__0:int, $in_parameter__1:int, $in_parameter__2:ref) returns ($exception:ref){
    
var $r21753 : ref;    
var $r41758 : ref;    
var d01755 : int;    
var i01756 : int;    
var $fakelocal_0 : ref;    
var r11757 : ref;    
var $fakelocal_3 : ref;    
var $l11759 : int;    
var $r31754 : ref;    
var $l21761 : int;    
var $fakelocal_2 : ref;    
var $l31762 : int;    
var $l41763 : int;    
var $fakelocal_1 : ref;    
var r01752 : ref;    
var $r51760 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01752 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    i01756 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    d01755 := $in_parameter__1;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r11757 := $in_parameter__2;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",62,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01752);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",63,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.ConcurrentSkipListMap);
    $r21753 := $fakelocal_0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",63,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.ConcurrentSkipListMap$$la$init$ra$$4155($r21753);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",63,-1,-1,-1 } true;
    $heap := $heap[r01752,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553 := $r21753];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",64,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.util.concurrent.locks.ReentrantReadWriteLock);
    $r31754 := $fakelocal_1;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",64,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.locks.ReentrantReadWriteLock$$la$init$ra$$4218($r31754);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",64,-1,-1,-1 } true;
    $heap := $heap[r01752,java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554 := $r31754];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",65,-1,-1,-1 } true;
    $heap := $heap[r01752,double$com.codahale.metrics.ExponentiallyDecayingReservoir$alpha0 := d01755];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",66,-1,-1,-1 } true;
    $heap := $heap[r01752,int$com.codahale.metrics.ExponentiallyDecayingReservoir$size0 := i01756];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",67,-1,-1,-1 } true;
    $heap := $heap[r01752,com.codahale.metrics.Clock$com.codahale.metrics.ExponentiallyDecayingReservoir$clock557 := r11757];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",68,-1,-1,-1 } true;
    call $fakelocal_2 := $new(java.util.concurrent.atomic.AtomicLong);
    $r41758 := $fakelocal_2;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",68,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1901($r41758, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",68,-1,-1,-1 } true;
    $heap := $heap[r01752,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$count555 := $r41758];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",69,-1,-1,-1 } true;
    call $l11759, $exception := long$com.codahale.metrics.ExponentiallyDecayingReservoir$currentTimeInSeconds$4124(r01752);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",69,-1,-1,-1 } true;
    $heap := $heap[r01752,long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0 := $l11759];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    call $fakelocal_3 := $new(java.util.concurrent.atomic.AtomicLong);
    $r51760 := $fakelocal_3;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } r11757 != $null;
    call $l21761, $exception := long$com.codahale.metrics.Clock$getTick$1896(r11757);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    $l31762 := long$com.codahale.metrics.ExponentiallyDecayingReservoir$RESCALE_THRESHOLD0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    $l41763 := $l21761 + $l31762;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1901($r51760, $l41763);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",70,-1,-1,-1 } true;
    $heap := $heap[r01752,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$nextScaleTime556 := $r51760];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",71,-1,-1,-1 } true;
    return;
}


implementation int$com.codahale.metrics.ExponentiallyDecayingReservoir$size$4119($this:ref) returns ($return:int, $exception:ref){
    
var $l21768 : int;    
var r01764 : ref;    
var $i41770 : int;    
var $l31769 : int;    
var $r11766 : ref;    
var $l11767 : int;    
var $i01765 : int;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01764 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    $i01765 := $heap[r01764,int$com.codahale.metrics.ExponentiallyDecayingReservoir$size0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    $l11767 := $i01765;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    $r11766 := $heap[r01764,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$count555];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } $r11766 != $null;
    call $l21768, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r11766);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    call $l31769, $exception := long$java.lang.Math$min$4074($l11767, $l21768);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    $i41770 := $l31769;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",75,-1,-1,-1 } true;
    $return := $i41770;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$update$4120($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var l01772 : int;    
var r01771 : ref;    
var $l11773 : int;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01771 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l01772 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",80,-1,-1,-1 } true;
    call $l11773, $exception := long$com.codahale.metrics.ExponentiallyDecayingReservoir$currentTimeInSeconds$4124(r01771);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",80,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$update$4121(r01771, l01772, $l11773);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",81,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$update$4121($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref){
    
var r11790 : ref;    
var $r111797 : ref;    
var $r171802 : ref;    
var r21807 : ref;    
var $r191806 : ref;    
var $l31776 : int;    
var l01795 : int;    
var $d31791 : int;    
var $r151804 : ref;    
var $r121800 : ref;    
var $r91794 : ref;    
var r01774 : ref;    
var $r51788 : ref;    
var d01781 : int;    
var $l51786 : int;    
var $r81796 : ref;    
var l21784 : int;    
var $fakelocal_0 : ref;    
var l11775 : int;    
var $r31779 : ref;    
var $r161801 : ref;    
var $r141803 : ref;    
var $b81792 : int;    
var $d11778 : int;    
var $b71787 : int;    
var $d21780 : int;    
var $r41782 : ref;    
var $r101798 : ref;    
var $i61785 : int;    
var $r61789 : ref;    
var $r71793 : ref;    
var $r131799 : ref;    
var $l41777 : int;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01774 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l01795 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l11775 := $in_parameter__1;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",90,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescaleIfNeeded$4122(r01774);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",91,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRegularUsage$4129(r01774);
    if ($exception != $null) {
    }
  block177:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    $l31776 := $heap[r01774,long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    $l41777 := l11775 - $l31776;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    call $d11778, $exception := double$com.codahale.metrics.ExponentiallyDecayingReservoir$weight$4125(r01774, $l41777);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    call $r31779, $exception := com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$current$4345();
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    if ($r31779 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $d21780, $exception := double$java.util.Random$nextDouble$4110($r31779);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",93,-1,-1,-1 } true;
    d01781 := $realOp32241($d11778, $d21780);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",95,-1,-1,-1 } true;
    $r41782 := $heap[r01774,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$count555];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",95,-1,-1,-1 } true;
    if ($r41782 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",95,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",95,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call l21784, $exception := long$java.util.concurrent.atomic.AtomicLong$incrementAndGet$1912($r41782);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } true;
    $i61785 := $heap[r01774,int$com.codahale.metrics.ExponentiallyDecayingReservoir$size0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } true;
    $l51786 := $i61785;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } true;
    $b71787 := $cmpInt(l21784, $l51786);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } true;
    if ($b71787 > 0) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } { :comment "thenblock" } true;
        goto block179;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",96,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    $r171802 := $heap[r01774,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    call $r141803, $exception := java.lang.Double$java.lang.Double$valueOf$1057(d01781);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    call $r151804, $exception := java.lang.Long$java.lang.Long$valueOf$878(l01795);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    if ($r171802 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $fakelocal_0, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$put$4165($r171802, $r141803, $r151804);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",97,-1,-1,-1 } true;
    goto block180;
  block179:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
    $r51788 := $heap[r01774,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
    if ($r51788 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $r61789, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$firstKey$4183($r51788);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
    if ($heap[$r61789,$type] <: java.lang.Double) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",99,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ClassCastException);
        goto block178;
    }
    r11790 := $r61789;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } true;
    if (r11790 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $d31791, $exception := double$java.lang.Double$doubleValue$1071(r11790);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } true;
    $b81792 := $cmpInt($d31791, d01781);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } true;
    if ($b81792 >= 0) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } { :comment "thenblock" } true;
        goto block180;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",100,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    $r71793 := $heap[r01774,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    call $r91794, $exception := java.lang.Double$java.lang.Double$valueOf$1057(d01781);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    call $r81796, $exception := java.lang.Long$java.lang.Long$valueOf$878(l01795);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    if ($r71793 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $r111797, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$putIfAbsent$4178($r71793, $r91794, $r81796);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    if ($r111797 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } { :comment "thenblock" } true;
        goto block180;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block181:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } true;
    $r101798 := $heap[r01774,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } true;
    if ($r101798 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $r131799, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$remove$4166($r101798, r11790);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } true;
    if ($r131799 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } { :comment "thenblock" } true;
        goto block180;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",102,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    $r121800 := $heap[r01774,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    if ($r121800 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block178;
    }
    call $r161801, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$firstKey$4183($r121800);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block178;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    if ($heap[$r161801,$type] <: java.lang.Double) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ClassCastException);
        goto block178;
    }
    r11790 := $r161801;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",103,-1,-1,-1 } true;
    goto block181;
  block180:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",108,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130(r01774);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",109,-1,-1,-1 } true;
    goto block182;
  block178:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",109,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r191806 := $exception;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",108,-1,-1,-1 } true;
    r21807 := $r191806;
  block183:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",108,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",108,-1,-1,-1 } r01774 != $null;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130(r01774);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",108,-1,-1,-1 } true;
    $exception := r21807;
    return;
  block182:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",110,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescaleIfNeeded$4122($this:ref) returns ($exception:ref){
    
var $b21815 : int;    
var l01811 : int;    
var l11814 : int;    
var $r21812 : ref;    
var r01808 : ref;    
var $r11809 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01808 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",113,-1,-1,-1 } true;
    $r11809 := $heap[r01808,com.codahale.metrics.Clock$com.codahale.metrics.ExponentiallyDecayingReservoir$clock557];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",113,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",113,-1,-1,-1 } $r11809 != $null;
    call l01811, $exception := long$com.codahale.metrics.Clock$getTick$1896($r11809);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",114,-1,-1,-1 } true;
    $r21812 := $heap[r01808,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$nextScaleTime556];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",114,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",114,-1,-1,-1 } $r21812 != $null;
    call l11814, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r21812);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",115,-1,-1,-1 } true;
    $b21815 := $cmpInt(l01811, l11814);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",115,-1,-1,-1 } true;
    if ($b21815 < 0) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",115,-1,-1,-1 } { :comment "thenblock" } true;
        goto block184;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",115,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",116,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescale$4126(r01808, l01811, l11814);
    if ($exception != $null) {
    }
  block184:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",118,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.ExponentiallyDecayingReservoir$getSnapshot$4123($this:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var r11820 : ref;    
var $r31817 : ref;    
var r21822 : ref;    
var $r51819 : ref;    
var r01816 : ref;    
var $r61821 : ref;    
var $r41818 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01816 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",122,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRegularUsage$4129(r01816);
    if ($exception != $null) {
    }
  block185:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Snapshot);
    $r31817 := $fakelocal_0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    $r41818 := $heap[r01816,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    if ($r41818 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block186;
    }
    call $r51819, $exception := java.util.Collection$java.util.concurrent.ConcurrentSkipListMap$values$4173($r41818);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block186;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Snapshot$$la$init$ra$$3150($r31817, $r51819);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            $r31817 := $null;
            goto block186;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",124,-1,-1,-1 } true;
    r11820 := $r31817;
  block187:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130(r01816);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    $return := r11820;
    return;
  block186:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r61821 := $exception;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    r21822 := $r61821;
  block188:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } r01816 != $null;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130(r01816);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",126,-1,-1,-1 } true;
    $exception := r21822;
    return;
}


implementation long$com.codahale.metrics.ExponentiallyDecayingReservoir$currentTimeInSeconds$4124($this:ref) returns ($return:int, $exception:ref){
    
var $r21825 : ref;    
var $l11827 : int;    
var $r11824 : ref;    
var r01823 : ref;    
var $l01826 : int;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01823 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } true;
    $r21825 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } true;
    $r11824 := $heap[r01823,com.codahale.metrics.Clock$com.codahale.metrics.ExponentiallyDecayingReservoir$clock557];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } $r11824 != $null;
    call $l01826, $exception := long$com.codahale.metrics.Clock$getTime$1897($r11824);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } $r21825 != $null;
    call $l11827, $exception := long$java.util.concurrent.TimeUnit$toSeconds$1929($r21825, $l01826);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",131,-1,-1,-1 } true;
    $return := $l11827;
    return;
}


implementation double$com.codahale.metrics.ExponentiallyDecayingReservoir$weight$4125($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $d01830 : int;    
var $d21832 : int;    
var $d11831 : int;    
var l01829 : int;    
var $d31833 : int;    
var r01828 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01828 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l01829 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",135,-1,-1,-1 } true;
    $d11831 := $heap[r01828,double$com.codahale.metrics.ExponentiallyDecayingReservoir$alpha0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",135,-1,-1,-1 } true;
    $d01830 := l01829;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",135,-1,-1,-1 } true;
    $d21832 := $realOp32086($d11831, $d01830);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",135,-1,-1,-1 } true;
    call $d31833, $exception := double$java.lang.Math$exp$4050($d21832);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",135,-1,-1,-1 } true;
    $return := $d31833;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$rescale$4126($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref){
    
var $i71852 : int;    
var $z01840 : int;    
var r11846 : ref;    
var $d11860 : int;    
var $l31837 : int;    
var r01834 : ref;    
var r51872 : ref;    
var $z11849 : int;    
var $r131854 : ref;    
var $l91863 : int;    
var $r61839 : ref;    
var $d61867 : int;    
var $d21864 : int;    
var $r71843 : ref;    
var $r91844 : ref;    
var $l61853 : int;    
var $r121856 : ref;    
var $d41868 : int;    
var $r81845 : ref;    
var $d51866 : int;    
var $r161869 : ref;    
var $l81862 : int;    
var $r151857 : ref;    
var r21848 : ref;    
var r41858 : ref;    
var $r181871 : ref;    
var l01836 : int;    
var $r141859 : ref;    
var $d31865 : int;    
var r31855 : ref;    
var $l51842 : int;    
var $fakelocal_0 : ref;    
var $l41838 : int;    
var l21841 : int;    
var $fakelocal_1 : ref;    
var l11835 : int;    
var $d01861 : int;    
var $r111850 : ref;    
var $r101851 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01834 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l01836 := $in_parameter__0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    l11835 := $in_parameter__1;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } true;
    $r61839 := $heap[r01834,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$nextScaleTime556];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } true;
    $l31837 := long$com.codahale.metrics.ExponentiallyDecayingReservoir$RESCALE_THRESHOLD0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } true;
    $l41838 := l01836 + $l31837;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } $r61839 != $null;
    call $z01840, $exception := boolean$java.util.concurrent.atomic.AtomicLong$compareAndSet$1907($r61839, l11835, $l41838);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } true;
    if ($z01840 == 0) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } { :comment "thenblock" } true;
        goto block189;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",157,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",158,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRescale$4128(r01834);
    if ($exception != $null) {
    }
  block190:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",160,-1,-1,-1 } true;
    l21841 := $heap[r01834,long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",161,-1,-1,-1 } true;
    call $l51842, $exception := long$com.codahale.metrics.ExponentiallyDecayingReservoir$currentTimeInSeconds$4124(r01834);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",161,-1,-1,-1 } true;
    $heap := $heap[r01834,long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0 := $l51842];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.ArrayList);
    $r71843 := $fakelocal_0;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    $r91844 := $heap[r01834,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    if ($r91844 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $r81845, $exception := java.util.NavigableSet$java.util.concurrent.ConcurrentSkipListMap$keySet$4171($r91844);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    call $exception := void$java.util.ArrayList$$la$init$ra$$4276($r71843, $r81845);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            $r71843 := $null;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",162,-1,-1,-1 } true;
    r11846 := $r71843;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } true;
    call r21848, $exception := java.util.Iterator$java.util.ArrayList$iterator$4313(r11846);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
  block192:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } true;
    if (r21848 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $z11849, $exception := boolean$java.util.Iterator$hasNext$1051(r21848);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } true;
    if ($z11849 == 0) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } { :comment "thenblock" } true;
        goto block193;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",163,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",174,-1,-1,-1 } true;
    call $r131854, $exception := java.lang.Object$java.util.Iterator$next$1052(r21848);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",174,-1,-1,-1 } true;
    if ($heap[$r131854,$type] <: java.lang.Double) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",174,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",174,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ClassCastException);
        goto block191;
    }
    r31855 := $r131854;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
    $r121856 := $heap[r01834,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
    if ($r121856 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $r151857, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$remove$4166($r121856, r31855);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
    if ($heap[$r151857,$type] <: java.lang.Long) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",164,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ClassCastException);
        goto block191;
    }
    r41858 := $r151857;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $r141859 := $heap[r01834,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    if (r31855 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $d11860, $exception := double$java.lang.Double$doubleValue$1071(r31855);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $d01861 := $heap[r01834,double$com.codahale.metrics.ExponentiallyDecayingReservoir$alpha0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $d31865 := -$d01861;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $l81862 := $heap[r01834,long$com.codahale.metrics.ExponentiallyDecayingReservoir$startTime0];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $l91863 := $l81862 - l21841;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $d21864 := $l91863;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $d51866 := $realOp32086($d31865, $d21864);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    call $d61867, $exception := double$java.lang.Math$exp$4050($d51866);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    $d41868 := $realOp32086($d11860, $d61867);
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    call $r161869, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d41868);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    if ($r141859 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",165,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $fakelocal_1, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$put$4165($r141859, $r161869, r41858);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",166,-1,-1,-1 } true;
    goto block192;
  block193:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    $r101851 := $heap[r01834,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.ExponentiallyDecayingReservoir$count555];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    $r111850 := $heap[r01834,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.ExponentiallyDecayingReservoir$values553];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    if ($r111850 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $i71852, $exception := int$java.util.concurrent.ConcurrentSkipListMap$size$4168($r111850);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    $l61853 := $i71852;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    if ($r101851 != $null) {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "ExponentiallyDecayingReservoir.java",169,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.RuntimeException);
        goto block191;
    }
    call $exception := void$java.util.concurrent.atomic.AtomicLong$set$1904($r101851, $l61853);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Throwable) {
            assert { :clone } true;
            goto block191;
        } else {
            assert { :clone } true;
        }
    }
  block194:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",171,-1,-1,-1 } { :clone } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRescale$4127(r01834);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",172,-1,-1,-1 } true;
    goto block189;
  block191:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",166,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r181871 := $exception;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",171,-1,-1,-1 } { :clone } true;
    r51872 := $r181871;
  block195:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",171,-1,-1,-1 } { :clone } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",171,-1,-1,-1 } { :clone } r01834 != $null;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRescale$4127(r01834);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",171,-1,-1,-1 } { :clone } true;
    $exception := r51872;
    return;
  block189:
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",174,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRescale$4127($this:ref) returns ($exception:ref){
    
var $r21875 : ref;    
var $r11874 : ref;    
var r01873 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01873 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",177,-1,-1,-1 } true;
    $r11874 := $heap[r01873,java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",177,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",177,-1,-1,-1 } $r11874 != $null;
    call $r21875, $exception := java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$java.util.concurrent.locks.ReentrantReadWriteLock$writeLock$4220($r11874);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",177,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",177,-1,-1,-1 } $r21875 != $null;
    call $exception := void$java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$unlock$4339($r21875);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",178,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRescale$4128($this:ref) returns ($exception:ref){
    
var $r21878 : ref;    
var $r11877 : ref;    
var r01876 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01876 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",181,-1,-1,-1 } true;
    $r11877 := $heap[r01876,java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",181,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",181,-1,-1,-1 } $r11877 != $null;
    call $r21878, $exception := java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$java.util.concurrent.locks.ReentrantReadWriteLock$writeLock$4220($r11877);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",181,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",181,-1,-1,-1 } $r21878 != $null;
    call $exception := void$java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock$lock$4335($r21878);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",182,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$lockForRegularUsage$4129($this:ref) returns ($exception:ref){
    
var r01879 : ref;    
var $r21881 : ref;    
var $r11880 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01879 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",185,-1,-1,-1 } true;
    $r11880 := $heap[r01879,java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",185,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",185,-1,-1,-1 } $r11880 != $null;
    call $r21881, $exception := java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$java.util.concurrent.locks.ReentrantReadWriteLock$readLock$4221($r11880);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",185,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",185,-1,-1,-1 } $r21881 != $null;
    call $exception := void$java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$lock$4355($r21881);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",186,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$unlockForRegularUsage$4130($this:ref) returns ($exception:ref){
    
var r01882 : ref;    
var $r21884 : ref;    
var $r11883 : ref;
    assume { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",-1,-1,-1,-1 } true;
    r01882 := $this;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",189,-1,-1,-1 } true;
    $r11883 := $heap[r01882,java.util.concurrent.locks.ReentrantReadWriteLock$com.codahale.metrics.ExponentiallyDecayingReservoir$lock554];
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",189,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",189,-1,-1,-1 } $r11883 != $null;
    call $r21884, $exception := java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$java.util.concurrent.locks.ReentrantReadWriteLock$readLock$4221($r11883);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",189,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",189,-1,-1,-1 } $r21884 != $null;
    call $exception := void$java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock$unlock$4359($r21884);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",190,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$clinit$ra$$4131() returns ($exception:ref){
    
var $r01885 : ref;    
var $l01886 : int;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",24,-1,-1,-1 } true;
    $r01885 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$HOURS244;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",24,-1,-1,-1 } true;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",24,-1,-1,-1 } $r01885 != $null;
    call $l01886, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926($r01885, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",24,-1,-1,-1 } true;
    long$com.codahale.metrics.ExponentiallyDecayingReservoir$RESCALE_THRESHOLD0 := $l01886;
    assert { :sourceloc "ExponentiallyDecayingReservoir.java",24,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ThreadLocalRandom$$la$init$ra$$4344($this:ref) returns ($exception:ref){
    
var r01887 : ref;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01887 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",56,-1,-1,-1 } true;
    call $exception := void$java.util.Random$$la$init$ra$$4098(r01887);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",57,-1,-1,-1 } true;
    $heap := $heap[r01887,boolean$com.codahale.metrics.ThreadLocalRandom$initialized0 := 1];
    assert { :sourceloc "ThreadLocalRandom.java",58,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$current$4345() returns ($return:ref, $exception:ref){
    
var $r11889 : ref;    
var $r01888 : ref;    
var $r21890 : ref;
    assume $heap[$return,$type] <: com.codahale.metrics.ThreadLocalRandom;
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } true;
    $r01888 := java.lang.ThreadLocal$com.codahale.metrics.ThreadLocalRandom$localRandom573;
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } true;
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } $r01888 != $null;
    call $r11889, $exception := java.lang.Object$java.lang.ThreadLocal$get$3529($r01888);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } true;
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } $heap[$r11889,$type] <: com.codahale.metrics.ThreadLocalRandom;
    $r21890 := $r11889;
    assert { :sourceloc "ThreadLocalRandom.java",66,-1,-1,-1 } true;
    $return := $r21890;
    return;
}


implementation void$com.codahale.metrics.ThreadLocalRandom$setSeed$4346($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r11896 : ref;    
var $l11894 : int;    
var l01893 : int;    
var r01891 : ref;    
var $z01892 : int;    
var $l21895 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01891 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    l01893 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",76,-1,-1,-1 } true;
    $z01892 := $heap[r01891,boolean$com.codahale.metrics.ThreadLocalRandom$initialized0];
    assert { :sourceloc "ThreadLocalRandom.java",76,-1,-1,-1 } true;
    if ($z01892 == 0) {
        assert { :sourceloc "ThreadLocalRandom.java",76,-1,-1,-1 } { :comment "thenblock" } true;
        goto block196;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",76,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",77,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.UnsupportedOperationException);
    $r11896 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",77,-1,-1,-1 } true;
    call $exception := void$java.lang.UnsupportedOperationException$$la$init$ra$$6025($r11896);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",77,-1,-1,-1 } true;
    $exception := $r11896;
    return;
  block196:
    assert { :sourceloc "ThreadLocalRandom.java",78,-1,-1,-1 } true;
    $l11894 := $xorInt(l01893, $LongConst0);
    assert { :sourceloc "ThreadLocalRandom.java",78,-1,-1,-1 } true;
    $l21895 := $bitAnd($l11894, $LongConst1);
    assert { :sourceloc "ThreadLocalRandom.java",78,-1,-1,-1 } true;
    $heap := $heap[r01891,long$com.codahale.metrics.ThreadLocalRandom$rnd0 := $l21895];
    assert { :sourceloc "ThreadLocalRandom.java",79,-1,-1,-1 } true;
    return;
}


implementation int$com.codahale.metrics.ThreadLocalRandom$next$4347($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $l41901 : int;    
var r01897 : ref;    
var $i51903 : int;    
var $l31900 : int;    
var $l61904 : int;    
var $l11898 : int;    
var $l71905 : int;    
var $i81906 : int;    
var $l21899 : int;    
var i01902 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01897 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    i01902 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",82,-1,-1,-1 } true;
    $l11898 := $heap[r01897,long$com.codahale.metrics.ThreadLocalRandom$rnd0];
    assert { :sourceloc "ThreadLocalRandom.java",82,-1,-1,-1 } true;
    $l21899 := $l11898 * $LongConst0;
    assert { :sourceloc "ThreadLocalRandom.java",82,-1,-1,-1 } true;
    $l31900 := $l21899 + 11;
    assert { :sourceloc "ThreadLocalRandom.java",82,-1,-1,-1 } true;
    $l41901 := $bitAnd($l31900, $LongConst1);
    assert { :sourceloc "ThreadLocalRandom.java",82,-1,-1,-1 } true;
    $heap := $heap[r01897,long$com.codahale.metrics.ThreadLocalRandom$rnd0 := $l41901];
    assert { :sourceloc "ThreadLocalRandom.java",83,-1,-1,-1 } true;
    $l61904 := $heap[r01897,long$com.codahale.metrics.ThreadLocalRandom$rnd0];
    assert { :sourceloc "ThreadLocalRandom.java",83,-1,-1,-1 } true;
    $i51903 := 48 - i01902;
    assert { :sourceloc "ThreadLocalRandom.java",83,-1,-1,-1 } true;
    $l71905 := $ushrInt($l61904, $i51903);
    assert { :sourceloc "ThreadLocalRandom.java",83,-1,-1,-1 } true;
    $i81906 := $l71905;
    assert { :sourceloc "ThreadLocalRandom.java",83,-1,-1,-1 } true;
    $return := $i81906;
    return;
}


implementation int$com.codahale.metrics.ThreadLocalRandom$nextInt$4348($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var i01907 : int;    
var $i31911 : int;    
var $fakelocal_0 : ref;    
var $r11913 : ref;    
var $i21910 : int;    
var $i41912 : int;    
var r01909 : ref;    
var i11908 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01909 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    i01907 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    i11908 := $in_parameter__1;
    assert { :sourceloc "ThreadLocalRandom.java",96,-1,-1,-1 } true;
    if (i01907 < i11908) {
        assert { :sourceloc "ThreadLocalRandom.java",96,-1,-1,-1 } { :comment "thenblock" } true;
        goto block197;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",96,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",97,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11913 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",97,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$918($r11913);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",97,-1,-1,-1 } true;
    $exception := $r11913;
    return;
  block197:
    assert { :sourceloc "ThreadLocalRandom.java",98,-1,-1,-1 } true;
    $i21910 := i11908 - i01907;
    assert { :sourceloc "ThreadLocalRandom.java",98,-1,-1,-1 } true;
    call $i31911, $exception := int$java.util.Random$nextInt$4106(r01909, $i21910);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",98,-1,-1,-1 } true;
    $i41912 := $i31911 + i01907;
    assert { :sourceloc "ThreadLocalRandom.java",98,-1,-1,-1 } true;
    $return := $i41912;
    return;
}


implementation long$com.codahale.metrics.ThreadLocalRandom$nextLong$4349($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var l31925 : int;    
var $l121929 : int;    
var $i71919 : int;    
var $i111926 : int;    
var $l141930 : int;    
var $l101922 : int;    
var $l91921 : int;    
var $b51915 : int;    
var i21924 : int;    
var r01918 : ref;    
var l11916 : int;    
var $i131928 : int;    
var $b61917 : int;    
var l41927 : int;    
var $r11931 : ref;    
var $i81920 : int;    
var $fakelocal_0 : ref;    
var l01914 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01918 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    l01914 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",110,-1,-1,-1 } true;
    $b51915 := $cmpInt(l01914, 0);
    assert { :sourceloc "ThreadLocalRandom.java",110,-1,-1,-1 } true;
    if ($b51915 > 0) {
        assert { :sourceloc "ThreadLocalRandom.java",110,-1,-1,-1 } { :comment "thenblock" } true;
        goto block198;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",110,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",111,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11931 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",111,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r11931, $StringConst61);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",111,-1,-1,-1 } true;
    $exception := $r11931;
    return;
  block198:
    assert { :sourceloc "ThreadLocalRandom.java",117,-1,-1,-1 } true;
    l11916 := 0;
  block199:
    assert { :sourceloc "ThreadLocalRandom.java",118,-1,-1,-1 } true;
    $b61917 := $cmpInt(l01914, $LongConst2);
    assert { :sourceloc "ThreadLocalRandom.java",118,-1,-1,-1 } true;
    if ($b61917 < 0) {
        assert { :sourceloc "ThreadLocalRandom.java",118,-1,-1,-1 } { :comment "thenblock" } true;
        goto block200;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",118,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",119,-1,-1,-1 } true;
    call i21924, $exception := int$com.codahale.metrics.ThreadLocalRandom$next$4347(r01918, 2);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",120,-1,-1,-1 } true;
    l31925 := $ushrInt(l01914, 1);
    assert { :sourceloc "ThreadLocalRandom.java",121,-1,-1,-1 } true;
    $i111926 := $bitAnd(i21924, 2);
    assert { :sourceloc "ThreadLocalRandom.java",121,-1,-1,-1 } true;
    if ($i111926 != 0) {
        assert { :sourceloc "ThreadLocalRandom.java",121,-1,-1,-1 } { :comment "thenblock" } true;
        goto block201;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",121,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",125,-1,-1,-1 } true;
    $l141930 := l31925;
    assert { :sourceloc "ThreadLocalRandom.java",125,-1,-1,-1 } true;
    goto block202;
  block201:
    assert { :sourceloc "ThreadLocalRandom.java",125,-1,-1,-1 } true;
    $l141930 := l01914 - l31925;
  block202:
    assert { :sourceloc "ThreadLocalRandom.java",121,-1,-1,-1 } true;
    l41927 := $l141930;
    assert { :sourceloc "ThreadLocalRandom.java",122,-1,-1,-1 } true;
    $i131928 := $bitAnd(i21924, 1);
    assert { :sourceloc "ThreadLocalRandom.java",122,-1,-1,-1 } true;
    if ($i131928 != 0) {
        assert { :sourceloc "ThreadLocalRandom.java",122,-1,-1,-1 } { :comment "thenblock" } true;
        goto block203;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",122,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",123,-1,-1,-1 } true;
    $l121929 := l01914 - l41927;
    assert { :sourceloc "ThreadLocalRandom.java",123,-1,-1,-1 } true;
    l11916 := l11916 + $l121929;
  block203:
    assert { :sourceloc "ThreadLocalRandom.java",124,-1,-1,-1 } true;
    l01914 := l41927;
    assert { :sourceloc "ThreadLocalRandom.java",125,-1,-1,-1 } true;
    goto block199;
  block200:
    assert { :sourceloc "ThreadLocalRandom.java",126,-1,-1,-1 } true;
    $i71919 := l01914;
    assert { :sourceloc "ThreadLocalRandom.java",126,-1,-1,-1 } true;
    call $i81920, $exception := int$java.util.Random$nextInt$4106(r01918, $i71919);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",126,-1,-1,-1 } true;
    $l91921 := $i81920;
    assert { :sourceloc "ThreadLocalRandom.java",126,-1,-1,-1 } true;
    $l101922 := l11916 + $l91921;
    assert { :sourceloc "ThreadLocalRandom.java",126,-1,-1,-1 } true;
    $return := $l101922;
    return;
}


implementation long$com.codahale.metrics.ThreadLocalRandom$nextLong$4350($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var $b21934 : int;    
var l11933 : int;    
var $l41937 : int;    
var $r11939 : ref;    
var l01932 : int;    
var $fakelocal_0 : ref;    
var $l51938 : int;    
var r01935 : ref;    
var $l31936 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01935 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    l01932 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    l11933 := $in_parameter__1;
    assert { :sourceloc "ThreadLocalRandom.java",139,-1,-1,-1 } true;
    $b21934 := $cmpInt(l01932, l11933);
    assert { :sourceloc "ThreadLocalRandom.java",139,-1,-1,-1 } true;
    if ($b21934 < 0) {
        assert { :sourceloc "ThreadLocalRandom.java",139,-1,-1,-1 } { :comment "thenblock" } true;
        goto block204;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",139,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",140,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11939 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",140,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$918($r11939);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",140,-1,-1,-1 } true;
    $exception := $r11939;
    return;
  block204:
    assert { :sourceloc "ThreadLocalRandom.java",141,-1,-1,-1 } true;
    $l31936 := l11933 - l01932;
    assert { :sourceloc "ThreadLocalRandom.java",141,-1,-1,-1 } true;
    call $l41937, $exception := long$com.codahale.metrics.ThreadLocalRandom$nextLong$4349(r01935, $l31936);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",141,-1,-1,-1 } true;
    $l51938 := $l41937 + l01932;
    assert { :sourceloc "ThreadLocalRandom.java",141,-1,-1,-1 } true;
    $return := $l51938;
    return;
}


implementation double$com.codahale.metrics.ThreadLocalRandom$nextDouble$4351($this:ref, $in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $d11943 : int;    
var r01942 : ref;    
var $r11945 : ref;    
var $d21944 : int;    
var $fakelocal_0 : ref;    
var d01940 : int;    
var $b01941 : int;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01942 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    d01940 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",153,-1,-1,-1 } true;
    $b01941 := $cmpInt(d01940, $DoubleConst1);
    assert { :sourceloc "ThreadLocalRandom.java",153,-1,-1,-1 } true;
    if ($b01941 > 0) {
        assert { :sourceloc "ThreadLocalRandom.java",153,-1,-1,-1 } { :comment "thenblock" } true;
        goto block205;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",153,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",154,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11945 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",154,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$919($r11945, $StringConst61);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",154,-1,-1,-1 } true;
    $exception := $r11945;
    return;
  block205:
    assert { :sourceloc "ThreadLocalRandom.java",155,-1,-1,-1 } true;
    call $d11943, $exception := double$java.util.Random$nextDouble$4110(r01942);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",155,-1,-1,-1 } true;
    $d21944 := $realOp32086($d11943, d01940);
    assert { :sourceloc "ThreadLocalRandom.java",155,-1,-1,-1 } true;
    $return := $d21944;
    return;
}


implementation double$com.codahale.metrics.ThreadLocalRandom$nextDouble$4352($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($return:int, $exception:ref){
    
var d01946 : int;    
var r01949 : ref;    
var $d51953 : int;    
var d11947 : int;    
var $d41952 : int;    
var $d31951 : int;    
var $d21950 : int;    
var $b01948 : int;    
var $fakelocal_0 : ref;    
var $r11954 : ref;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r01949 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    d01946 := $in_parameter__0;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    d11947 := $in_parameter__1;
    assert { :sourceloc "ThreadLocalRandom.java",168,-1,-1,-1 } true;
    $b01948 := $cmpInt(d01946, d11947);
    assert { :sourceloc "ThreadLocalRandom.java",168,-1,-1,-1 } true;
    if ($b01948 < 0) {
        assert { :sourceloc "ThreadLocalRandom.java",168,-1,-1,-1 } { :comment "thenblock" } true;
        goto block206;
    } else {
        assert { :sourceloc "ThreadLocalRandom.java",168,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ThreadLocalRandom.java",169,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.IllegalArgumentException);
    $r11954 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",169,-1,-1,-1 } true;
    call $exception := void$java.lang.IllegalArgumentException$$la$init$ra$$918($r11954);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",169,-1,-1,-1 } true;
    $exception := $r11954;
    return;
  block206:
    assert { :sourceloc "ThreadLocalRandom.java",170,-1,-1,-1 } true;
    call $d21950, $exception := double$java.util.Random$nextDouble$4110(r01949);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",170,-1,-1,-1 } true;
    $d31951 := $realOp32179(d11947, d01946);
    assert { :sourceloc "ThreadLocalRandom.java",170,-1,-1,-1 } true;
    $d41952 := $realOp32086($d21950, $d31951);
    assert { :sourceloc "ThreadLocalRandom.java",170,-1,-1,-1 } true;
    $d51953 := $realOp32117($d41952, d01946);
    assert { :sourceloc "ThreadLocalRandom.java",170,-1,-1,-1 } true;
    $return := $d51953;
    return;
}


implementation void$com.codahale.metrics.ThreadLocalRandom$$la$clinit$ra$$4353() returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r01955 : ref;
    assert { :sourceloc "ThreadLocalRandom.java",44,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ThreadLocalRandom$1);
    $r01955 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",44,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ThreadLocalRandom$1$$la$init$ra$$6022($r01955);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",44,-1,-1,-1 } true;
    java.lang.ThreadLocal$com.codahale.metrics.ThreadLocalRandom$localRandom573 := $r01955;
    assert { :sourceloc "ThreadLocalRandom.java",44,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxAttributeGauge$$la$init$ra$$4583($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r21959 : ref;    
var r11958 : ref;    
var $r31957 : ref;    
var r01956 : ref;
    assume { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r01956 := $this;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r11958 := $in_parameter__0;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r21959 := $in_parameter__1;
    assert { :sourceloc "JmxAttributeGauge.java",23,-1,-1,-1 } true;
    call $r31957, $exception := javax.management.MBeanServer$java.lang.management.ManagementFactory$getPlatformMBeanServer$2115();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxAttributeGauge.java",23,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxAttributeGauge$$la$init$ra$$4584(r01956, $r31957, r11958, r21959);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxAttributeGauge.java",24,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxAttributeGauge$$la$init$ra$$4584($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r11961 : ref;    
var r21962 : ref;    
var r31963 : ref;    
var r01960 : ref;
    assume { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__2,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r01960 := $this;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r11961 := $in_parameter__0;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r21962 := $in_parameter__1;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r31963 := $in_parameter__2;
    assert { :sourceloc "JmxAttributeGauge.java",33,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01960);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxAttributeGauge.java",34,-1,-1,-1 } true;
    $heap := $heap[r01960,javax.management.MBeanServer$com.codahale.metrics.JmxAttributeGauge$mBeanServer595 := r11961];
    assert { :sourceloc "JmxAttributeGauge.java",35,-1,-1,-1 } true;
    $heap := $heap[r01960,javax.management.ObjectName$com.codahale.metrics.JmxAttributeGauge$objectName596 := r21962];
    assert { :sourceloc "JmxAttributeGauge.java",36,-1,-1,-1 } true;
    $heap := $heap[r01960,java.lang.String$com.codahale.metrics.JmxAttributeGauge$attributeName597 := r31963];
    assert { :sourceloc "JmxAttributeGauge.java",37,-1,-1,-1 } true;
    return;
}


implementation java.lang.Object$com.codahale.metrics.JmxAttributeGauge$getValue$4585($this:ref) returns ($return:ref, $exception:ref){
    
var $r51968 : ref;    
var $r21965 : ref;    
var $r41967 : ref;    
var $r31966 : ref;    
var $r61969 : ref;    
var r01964 : ref;
    assume { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "JmxAttributeGauge.java",-1,-1,-1,-1 } true;
    r01964 := $this;
  block207:
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    $r41967 := $heap[r01964,javax.management.MBeanServer$com.codahale.metrics.JmxAttributeGauge$mBeanServer595];
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    $r31966 := $heap[r01964,javax.management.ObjectName$com.codahale.metrics.JmxAttributeGauge$objectName596];
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    $r21965 := $heap[r01964,java.lang.String$com.codahale.metrics.JmxAttributeGauge$attributeName597];
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } $r41967 != $null;
    call $r51968, $exception := java.lang.Object$javax.management.MBeanServer$getAttribute$2157($r41967, $r31966, $r21965);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.ReflectionException) {
            goto block208;
        } else {
            assert { :clone } true;
        }
    }
  block209:
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    $return := $r51968;
    return;
  block208:
    assert { :sourceloc "JmxAttributeGauge.java",42,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r61969 := $exception;
    assert { :sourceloc "JmxAttributeGauge.java",44,-1,-1,-1 } true;
    $return := $null;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$forRegistry$4692($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r11971 : ref;    
var $fakelocal_0 : ref;    
var r01972 : ref;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01972 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",26,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$Builder);
    $r11971 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",26,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4722($r11971, r01972, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",26,-1,-1,-1 } true;
    $return := $r11971;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$$la$init$ra$$4693($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var r51979 : ref;    
var $r61975 : ref;    
var r11976 : ref;    
var r41978 : ref;    
var r31974 : ref;    
var r21977 : ref;    
var $fakelocal_0 : ref;    
var r01973 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assume $heap[$in_parameter__4,$type] <: com.codahale.metrics.JmxReporter$MetricTimeUnits;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01973 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r11976 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r21977 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r31974 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r41978 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r51979 := $in_parameter__4;
    assert { :sourceloc "JmxReporter.java",687,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01973);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",688,-1,-1,-1 } true;
    $heap := $heap[r01973,com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$registry617 := r31974];
    assert { :sourceloc "JmxReporter.java",689,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxListener);
    $r61975 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",689,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4712($r61975, r11976, r21977, r41978, r51979, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",689,-1,-1,-1 } true;
    $heap := $heap[r01973,com.codahale.metrics.JmxReporter$JmxListener$com.codahale.metrics.JmxReporter$listener618 := $r61975];
    assert { :sourceloc "JmxReporter.java",690,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$start$4694($this:ref) returns ($exception:ref){
    
var $r21982 : ref;    
var r01980 : ref;    
var $r11981 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01980 := $this;
    assert { :sourceloc "JmxReporter.java",696,-1,-1,-1 } true;
    $r21982 := $heap[r01980,com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$registry617];
    assert { :sourceloc "JmxReporter.java",696,-1,-1,-1 } true;
    $r11981 := $heap[r01980,com.codahale.metrics.JmxReporter$JmxListener$com.codahale.metrics.JmxReporter$listener618];
    assert { :sourceloc "JmxReporter.java",696,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",696,-1,-1,-1 } $r21982 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistry$addListener$2565($r21982, $r11981);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",697,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$stop$4695($this:ref) returns ($exception:ref){
    
var $r11984 : ref;    
var $r21985 : ref;    
var r01983 : ref;    
var $r31986 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01983 := $this;
    assert { :sourceloc "JmxReporter.java",703,-1,-1,-1 } true;
    $r21985 := $heap[r01983,com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$registry617];
    assert { :sourceloc "JmxReporter.java",703,-1,-1,-1 } true;
    $r11984 := $heap[r01983,com.codahale.metrics.JmxReporter$JmxListener$com.codahale.metrics.JmxReporter$listener618];
    assert { :sourceloc "JmxReporter.java",703,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",703,-1,-1,-1 } $r21985 != $null;
    call $exception := void$com.codahale.metrics.MetricRegistry$removeListener$2566($r21985, $r11984);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",704,-1,-1,-1 } true;
    $r31986 := $heap[r01983,com.codahale.metrics.JmxReporter$JmxListener$com.codahale.metrics.JmxReporter$listener618];
    assert { :sourceloc "JmxReporter.java",704,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",704,-1,-1,-1 } $r31986 != $null;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxListener$unregisterAll$4711($r31986);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",705,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$$la$init$ra$$4696($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref) returns ($exception:ref){
    
var r31990 : ref;    
var r01987 : ref;    
var r61993 : ref;    
var r11988 : ref;    
var r41991 : ref;    
var r21989 : ref;    
var r51992 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__4,$type] <: com.codahale.metrics.JmxReporter$MetricTimeUnits;
    assume $heap[$in_parameter__5,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01987 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r11988 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r21989 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r31990 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r41991 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r51992 := $in_parameter__4;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r61993 := $in_parameter__5;
    assert { :sourceloc "JmxReporter.java",18,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$$la$init$ra$$4693(r01987, r11988, r21989, r31990, r41991, r51992);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",18,-1,-1,-1 } true;
    return;
}


implementation org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697() returns ($return:ref, $exception:ref){
    
var $r01994 : ref;
    assume $heap[$return,$type] <: org.slf4j.Logger;
    assert { :sourceloc "JmxReporter.java",18,-1,-1,-1 } true;
    $r01994 := org.slf4j.Logger$com.codahale.metrics.JmxReporter$LOGGER616;
    assert { :sourceloc "JmxReporter.java",18,-1,-1,-1 } true;
    $return := $r01994;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$$la$clinit$ra$$4698() returns ($exception:ref){
    
var $r01995 : ref;
    assert { :sourceloc "JmxReporter.java",135,-1,-1,-1 } true;
    call $r01995, $exception := org.slf4j.Logger$org.slf4j.LoggerFactory$getLogger$6057(CC$com$_$codahale$_$metrics$_$JmxReporter);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",135,-1,-1,-1 } true;
    org.slf4j.Logger$com.codahale.metrics.JmxReporter$LOGGER616 := $r01995;
    assert { :sourceloc "JmxReporter.java",135,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4699($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref){
    
var r11997 : ref;    
var $fakelocal_0 : ref;    
var r21998 : ref;    
var r31999 : ref;    
var $r52001 : ref;    
var r01996 : ref;    
var r42000 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.JmxReporter$MetricTimeUnits;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r01996 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r11997 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r21998 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r31999 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42000 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",480,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r01996);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",481,-1,-1,-1 } true;
    $heap := $heap[r01996,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620 := r11997];
    assert { :sourceloc "JmxReporter.java",482,-1,-1,-1 } true;
    $heap := $heap[r01996,java.lang.String$com.codahale.metrics.JmxReporter$JmxListener$name619 := r21998];
    assert { :sourceloc "JmxReporter.java",483,-1,-1,-1 } true;
    $heap := $heap[r01996,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621 := r31999];
    assert { :sourceloc "JmxReporter.java",484,-1,-1,-1 } true;
    $heap := $heap[r01996,com.codahale.metrics.JmxReporter$MetricTimeUnits$com.codahale.metrics.JmxReporter$JmxListener$timeUnits622 := r42000];
    assert { :sourceloc "JmxReporter.java",485,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.CopyOnWriteArraySet);
    $r52001 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",485,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.CopyOnWriteArraySet$$la$init$ra$$4884($r52001);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",485,-1,-1,-1 } true;
    $heap := $heap[r01996,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623 := $r52001];
    assert { :sourceloc "JmxReporter.java",486,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onGaugeAdded$4700($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r32008 : ref;    
var $fakelocal_1 : ref;    
var r12003 : ref;    
var $r82012 : ref;    
var $r42005 : ref;    
var $r62010 : ref;    
var $r52009 : ref;    
var r142019 : ref;    
var $r102015 : ref;    
var $z02006 : int;    
var r22004 : ref;    
var r132018 : ref;    
var $r112016 : ref;    
var $fakelocal_2 : int;    
var $r92014 : ref;    
var r02002 : ref;    
var $r122017 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Gauge;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02002 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12003 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22004 := $in_parameter__1;
  block210:
    assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } true;
    $r42005 := $heap[r02002,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621];
    assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } $r42005 != $null;
    call $z02006, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620($r42005, r12003, r22004);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block211;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block212;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } true;
    if ($z02006 == 0) {
        assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } { :comment "thenblock" } true;
        goto block213;
    } else {
        assert { :sourceloc "JmxReporter.java",491,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",492,-1,-1,-1 } true;
    call r32008, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02002, $StringConst62, r12003);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",493,-1,-1,-1 } true;
    $r62010 := $heap[r02002,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",493,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxGauge);
    $r52009 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",493,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4841($r52009, r22004, r32008, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",493,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",493,-1,-1,-1 } $r62010 != $null;
    call $fakelocal_1, $exception := javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($r62010, $r52009, r32008);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.NotCompliantMBeanException) {
            goto block212;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",494,-1,-1,-1 } true;
    $r82012 := $heap[r02002,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",494,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",494,-1,-1,-1 } $r82012 != $null;
    call $fakelocal_2, $exception := boolean$java.util.Set$add$239($r82012, r32008);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block211;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block212;
        } else {
            assert { :clone } true;
        }
    }
  block213:
    assert { :sourceloc "JmxReporter.java",500,-1,-1,-1 } { :clone } true;
    goto block214;
  block211:
    assert { :sourceloc "JmxReporter.java",501,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r112016 := $exception;
    assert { :sourceloc "JmxReporter.java",496,-1,-1,-1 } true;
    r132018 := $r112016;
    assert { :sourceloc "JmxReporter.java",497,-1,-1,-1 } true;
    call $r122017, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",497,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",497,-1,-1,-1 } $r122017 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r122017, $StringConst63, r132018);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",500,-1,-1,-1 } { :clone } true;
    goto block214;
  block212:
    assert { :sourceloc "JmxReporter.java",500,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r92014 := $exception;
    assert { :sourceloc "JmxReporter.java",498,-1,-1,-1 } true;
    r142019 := $r92014;
    assert { :sourceloc "JmxReporter.java",499,-1,-1,-1 } true;
    call $r102015, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",499,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",499,-1,-1,-1 } $r102015 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r102015, $StringConst63, r142019);
    if ($exception != $null) {
    }
  block214:
    assert { :sourceloc "JmxReporter.java",501,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onGaugeRemoved$4701($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r72029 : ref;    
var r102032 : ref;    
var r02020 : ref;    
var r22023 : ref;    
var r12021 : ref;    
var $r32024 : ref;    
var $r82030 : ref;    
var $fakelocal_0 : int;    
var r92031 : ref;    
var $r62028 : ref;    
var $r52027 : ref;    
var $r42025 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02020 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12021 := $in_parameter__0;
  block215:
    assert { :sourceloc "JmxReporter.java",506,-1,-1,-1 } true;
    call r22023, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02020, $StringConst62, r12021);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",507,-1,-1,-1 } true;
    $r32024 := $heap[r02020,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",507,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",507,-1,-1,-1 } $r32024 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r32024, r22023);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block216;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",508,-1,-1,-1 } true;
    $r42025 := $heap[r02020,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",508,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",508,-1,-1,-1 } $r42025 != $null;
    call $fakelocal_0, $exception := boolean$java.util.Set$remove$240($r42025, r22023);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceNotFoundException) {
            assert { :clone } true;
            goto block217;
        } else {
            assert { :clone } true;
        }
    }
  block218:
    assert { :sourceloc "JmxReporter.java",513,-1,-1,-1 } true;
    goto block219;
  block217:
    assert { :sourceloc "JmxReporter.java",514,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r52027 := $exception;
    assert { :sourceloc "JmxReporter.java",509,-1,-1,-1 } true;
    r92031 := $r52027;
    assert { :sourceloc "JmxReporter.java",510,-1,-1,-1 } true;
    call $r62028, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",510,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",510,-1,-1,-1 } $r62028 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r62028, $StringConst64, r92031);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",513,-1,-1,-1 } true;
    goto block219;
  block216:
    assert { :sourceloc "JmxReporter.java",514,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72029 := $exception;
    assert { :sourceloc "JmxReporter.java",511,-1,-1,-1 } true;
    r102032 := $r72029;
    assert { :sourceloc "JmxReporter.java",512,-1,-1,-1 } true;
    call $r82030, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",512,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",512,-1,-1,-1 } $r82030 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r82030, $StringConst64, r102032);
    if ($exception != $null) {
    }
  block219:
    assert { :sourceloc "JmxReporter.java",514,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onCounterAdded$4702($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $fakelocal_1 : ref;    
var r02033 : ref;    
var $r42036 : ref;    
var r142050 : ref;    
var $r92045 : ref;    
var $z02037 : int;    
var $r52040 : ref;    
var $r82043 : ref;    
var $r62041 : ref;    
var $r112047 : ref;    
var r12034 : ref;    
var $fakelocal_0 : ref;    
var r22035 : ref;    
var r32039 : ref;    
var $r102046 : ref;    
var r132049 : ref;    
var $fakelocal_2 : int;    
var $r122048 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02033 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12034 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22035 := $in_parameter__1;
  block220:
    assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } true;
    $r42036 := $heap[r02033,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621];
    assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } $r42036 != $null;
    call $z02037, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620($r42036, r12034, r22035);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block221;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block222;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } true;
    if ($z02037 == 0) {
        assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } { :comment "thenblock" } true;
        goto block223;
    } else {
        assert { :sourceloc "JmxReporter.java",519,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",520,-1,-1,-1 } true;
    call r32039, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02033, $StringConst65, r12034);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",521,-1,-1,-1 } true;
    $r62041 := $heap[r02033,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",521,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxCounter);
    $r52040 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",521,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4837($r52040, r22035, r32039, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",521,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",521,-1,-1,-1 } $r62041 != $null;
    call $fakelocal_1, $exception := javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($r62041, $r52040, r32039);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.NotCompliantMBeanException) {
            goto block222;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",522,-1,-1,-1 } true;
    $r82043 := $heap[r02033,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",522,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",522,-1,-1,-1 } $r82043 != $null;
    call $fakelocal_2, $exception := boolean$java.util.Set$add$239($r82043, r32039);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block221;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block222;
        } else {
            assert { :clone } true;
        }
    }
  block223:
    assert { :sourceloc "JmxReporter.java",528,-1,-1,-1 } { :clone } true;
    goto block224;
  block221:
    assert { :sourceloc "JmxReporter.java",529,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r112047 := $exception;
    assert { :sourceloc "JmxReporter.java",524,-1,-1,-1 } true;
    r132049 := $r112047;
    assert { :sourceloc "JmxReporter.java",525,-1,-1,-1 } true;
    call $r122048, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",525,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",525,-1,-1,-1 } $r122048 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r122048, $StringConst66, r132049);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",528,-1,-1,-1 } { :clone } true;
    goto block224;
  block222:
    assert { :sourceloc "JmxReporter.java",528,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r92045 := $exception;
    assert { :sourceloc "JmxReporter.java",526,-1,-1,-1 } true;
    r142050 := $r92045;
    assert { :sourceloc "JmxReporter.java",527,-1,-1,-1 } true;
    call $r102046, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",527,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",527,-1,-1,-1 } $r102046 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r102046, $StringConst66, r142050);
    if ($exception != $null) {
    }
  block224:
    assert { :sourceloc "JmxReporter.java",529,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onCounterRemoved$4703($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r32055 : ref;    
var $r72060 : ref;    
var r02051 : ref;    
var $fakelocal_0 : int;    
var r22054 : ref;    
var r92062 : ref;    
var $r82061 : ref;    
var r12052 : ref;    
var $r62059 : ref;    
var $r52058 : ref;    
var $r42056 : ref;    
var r102063 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02051 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12052 := $in_parameter__0;
  block225:
    assert { :sourceloc "JmxReporter.java",534,-1,-1,-1 } true;
    call r22054, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02051, $StringConst65, r12052);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",535,-1,-1,-1 } true;
    $r32055 := $heap[r02051,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",535,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",535,-1,-1,-1 } $r32055 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r32055, r22054);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block226;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",536,-1,-1,-1 } true;
    $r42056 := $heap[r02051,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",536,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",536,-1,-1,-1 } $r42056 != $null;
    call $fakelocal_0, $exception := boolean$java.util.Set$remove$240($r42056, r22054);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceNotFoundException) {
            assert { :clone } true;
            goto block227;
        } else {
            assert { :clone } true;
        }
    }
  block228:
    assert { :sourceloc "JmxReporter.java",541,-1,-1,-1 } true;
    goto block229;
  block227:
    assert { :sourceloc "JmxReporter.java",542,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r52058 := $exception;
    assert { :sourceloc "JmxReporter.java",537,-1,-1,-1 } true;
    r92062 := $r52058;
    assert { :sourceloc "JmxReporter.java",538,-1,-1,-1 } true;
    call $r62059, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",538,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",538,-1,-1,-1 } $r62059 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r62059, $StringConst67, r92062);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",541,-1,-1,-1 } true;
    goto block229;
  block226:
    assert { :sourceloc "JmxReporter.java",542,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72060 := $exception;
    assert { :sourceloc "JmxReporter.java",539,-1,-1,-1 } true;
    r102063 := $r72060;
    assert { :sourceloc "JmxReporter.java",540,-1,-1,-1 } true;
    call $r82061, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",540,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",540,-1,-1,-1 } $r82061 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r82061, $StringConst67, r102063);
    if ($exception != $null) {
    }
  block229:
    assert { :sourceloc "JmxReporter.java",542,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onHistogramAdded$4704($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r62072 : ref;    
var $r112078 : ref;    
var $z02068 : int;    
var r142081 : ref;    
var $r102077 : ref;    
var r22066 : ref;    
var $fakelocal_1 : ref;    
var $r92076 : ref;    
var $r122079 : ref;    
var r32070 : ref;    
var $r52071 : ref;    
var r12065 : ref;    
var $r42067 : ref;    
var r02064 : ref;    
var $fakelocal_0 : ref;    
var $r82074 : ref;    
var $fakelocal_2 : int;    
var r132080 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Histogram;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02064 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12065 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22066 := $in_parameter__1;
  block230:
    assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } true;
    $r42067 := $heap[r02064,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621];
    assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } $r42067 != $null;
    call $z02068, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620($r42067, r12065, r22066);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block231;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block232;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } true;
    if ($z02068 == 0) {
        assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } { :comment "thenblock" } true;
        goto block233;
    } else {
        assert { :sourceloc "JmxReporter.java",547,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",548,-1,-1,-1 } true;
    call r32070, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02064, $StringConst68, r12065);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",549,-1,-1,-1 } true;
    $r62072 := $heap[r02064,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",549,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxHistogram);
    $r52071 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",549,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4857($r52071, r22066, r32070, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",549,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",549,-1,-1,-1 } $r62072 != $null;
    call $fakelocal_1, $exception := javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($r62072, $r52071, r32070);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.NotCompliantMBeanException) {
            goto block232;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",550,-1,-1,-1 } true;
    $r82074 := $heap[r02064,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",550,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",550,-1,-1,-1 } $r82074 != $null;
    call $fakelocal_2, $exception := boolean$java.util.Set$add$239($r82074, r32070);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block231;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block232;
        } else {
            assert { :clone } true;
        }
    }
  block233:
    assert { :sourceloc "JmxReporter.java",556,-1,-1,-1 } { :clone } true;
    goto block234;
  block231:
    assert { :sourceloc "JmxReporter.java",557,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r112078 := $exception;
    assert { :sourceloc "JmxReporter.java",552,-1,-1,-1 } true;
    r132080 := $r112078;
    assert { :sourceloc "JmxReporter.java",553,-1,-1,-1 } true;
    call $r122079, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",553,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",553,-1,-1,-1 } $r122079 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r122079, $StringConst69, r132080);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",556,-1,-1,-1 } { :clone } true;
    goto block234;
  block232:
    assert { :sourceloc "JmxReporter.java",556,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r92076 := $exception;
    assert { :sourceloc "JmxReporter.java",554,-1,-1,-1 } true;
    r142081 := $r92076;
    assert { :sourceloc "JmxReporter.java",555,-1,-1,-1 } true;
    call $r102077, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",555,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",555,-1,-1,-1 } $r102077 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r102077, $StringConst69, r142081);
    if ($exception != $null) {
    }
  block234:
    assert { :sourceloc "JmxReporter.java",557,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onHistogramRemoved$4705($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r42087 : ref;    
var $r32086 : ref;    
var r102094 : ref;    
var r92093 : ref;    
var $r62090 : ref;    
var r12083 : ref;    
var $r52089 : ref;    
var r02082 : ref;    
var $fakelocal_0 : int;    
var r22085 : ref;    
var $r72091 : ref;    
var $r82092 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02082 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12083 := $in_parameter__0;
  block235:
    assert { :sourceloc "JmxReporter.java",562,-1,-1,-1 } true;
    call r22085, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02082, $StringConst68, r12083);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",563,-1,-1,-1 } true;
    $r32086 := $heap[r02082,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",563,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",563,-1,-1,-1 } $r32086 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r32086, r22085);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block236;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",564,-1,-1,-1 } true;
    $r42087 := $heap[r02082,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",564,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",564,-1,-1,-1 } $r42087 != $null;
    call $fakelocal_0, $exception := boolean$java.util.Set$remove$240($r42087, r22085);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceNotFoundException) {
            assert { :clone } true;
            goto block237;
        } else {
            assert { :clone } true;
        }
    }
  block238:
    assert { :sourceloc "JmxReporter.java",569,-1,-1,-1 } true;
    goto block239;
  block237:
    assert { :sourceloc "JmxReporter.java",570,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r52089 := $exception;
    assert { :sourceloc "JmxReporter.java",565,-1,-1,-1 } true;
    r92093 := $r52089;
    assert { :sourceloc "JmxReporter.java",566,-1,-1,-1 } true;
    call $r62090, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",566,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",566,-1,-1,-1 } $r62090 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r62090, $StringConst70, r92093);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",569,-1,-1,-1 } true;
    goto block239;
  block236:
    assert { :sourceloc "JmxReporter.java",570,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72091 := $exception;
    assert { :sourceloc "JmxReporter.java",567,-1,-1,-1 } true;
    r102094 := $r72091;
    assert { :sourceloc "JmxReporter.java",568,-1,-1,-1 } true;
    call $r82092, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",568,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",568,-1,-1,-1 } $r82092 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r82092, $StringConst70, r102094);
    if ($exception != $null) {
    }
  block239:
    assert { :sourceloc "JmxReporter.java",570,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onMeterAdded$4706($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r62103 : ref;    
var $r52102 : ref;    
var $r132112 : ref;    
var $r82105 : ref;    
var $r142111 : ref;    
var $r72104 : ref;    
var r32101 : ref;    
var $r102107 : ref;    
var $r112109 : ref;    
var $z02099 : int;    
var $fakelocal_0 : ref;    
var $r42098 : ref;    
var $fakelocal_1 : ref;    
var r162114 : ref;    
var $fakelocal_2 : int;    
var r22097 : ref;    
var r02095 : ref;    
var r152113 : ref;    
var r12096 : ref;    
var $r122110 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Meter;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02095 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12096 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22097 := $in_parameter__1;
  block240:
    assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } true;
    $r42098 := $heap[r02095,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621];
    assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } $r42098 != $null;
    call $z02099, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620($r42098, r12096, r22097);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block241;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block242;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } true;
    if ($z02099 == 0) {
        assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } { :comment "thenblock" } true;
        goto block243;
    } else {
        assert { :sourceloc "JmxReporter.java",575,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",576,-1,-1,-1 } true;
    call r32101, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02095, $StringConst71, r12096);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    $r72104 := $heap[r02095,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxMeter);
    $r52102 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    $r62103 := $heap[r02095,com.codahale.metrics.JmxReporter$MetricTimeUnits$com.codahale.metrics.JmxReporter$JmxListener$timeUnits622];
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } $r62103 != $null;
    call $r82105, $exception := java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateFor$4725($r62103, r12096);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4909($r52102, r22097, r32101, $r82105, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",577,-1,-1,-1 } $r72104 != $null;
    call $fakelocal_1, $exception := javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($r72104, $r52102, r32101);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.NotCompliantMBeanException) {
            goto block242;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",578,-1,-1,-1 } true;
    $r102107 := $heap[r02095,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",578,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",578,-1,-1,-1 } $r102107 != $null;
    call $fakelocal_2, $exception := boolean$java.util.Set$add$239($r102107, r32101);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block241;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block242;
        } else {
            assert { :clone } true;
        }
    }
  block243:
    assert { :sourceloc "JmxReporter.java",584,-1,-1,-1 } { :clone } true;
    goto block244;
  block241:
    assert { :sourceloc "JmxReporter.java",585,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r142111 := $exception;
    assert { :sourceloc "JmxReporter.java",580,-1,-1,-1 } true;
    r152113 := $r142111;
    assert { :sourceloc "JmxReporter.java",581,-1,-1,-1 } true;
    call $r132112, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",581,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",581,-1,-1,-1 } $r132112 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r132112, $StringConst72, r152113);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",584,-1,-1,-1 } { :clone } true;
    goto block244;
  block242:
    assert { :sourceloc "JmxReporter.java",584,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r112109 := $exception;
    assert { :sourceloc "JmxReporter.java",582,-1,-1,-1 } true;
    r162114 := $r112109;
    assert { :sourceloc "JmxReporter.java",583,-1,-1,-1 } true;
    call $r122110, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",583,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",583,-1,-1,-1 } $r122110 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r122110, $StringConst72, r162114);
    if ($exception != $null) {
    }
  block244:
    assert { :sourceloc "JmxReporter.java",585,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onMeterRemoved$4707($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r92126 : ref;    
var $r62123 : ref;    
var $r82125 : ref;    
var $fakelocal_0 : int;    
var $r52122 : ref;    
var r102127 : ref;    
var $r32119 : ref;    
var r22118 : ref;    
var r12116 : ref;    
var r02115 : ref;    
var $r72124 : ref;    
var $r42120 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02115 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12116 := $in_parameter__0;
  block245:
    assert { :sourceloc "JmxReporter.java",590,-1,-1,-1 } true;
    call r22118, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02115, $StringConst71, r12116);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",591,-1,-1,-1 } true;
    $r32119 := $heap[r02115,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",591,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",591,-1,-1,-1 } $r32119 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r32119, r22118);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block246;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",592,-1,-1,-1 } true;
    $r42120 := $heap[r02115,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",592,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",592,-1,-1,-1 } $r42120 != $null;
    call $fakelocal_0, $exception := boolean$java.util.Set$remove$240($r42120, r22118);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceNotFoundException) {
            assert { :clone } true;
            goto block247;
        } else {
            assert { :clone } true;
        }
    }
  block248:
    assert { :sourceloc "JmxReporter.java",597,-1,-1,-1 } true;
    goto block249;
  block247:
    assert { :sourceloc "JmxReporter.java",598,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72124 := $exception;
    assert { :sourceloc "JmxReporter.java",593,-1,-1,-1 } true;
    r92126 := $r72124;
    assert { :sourceloc "JmxReporter.java",594,-1,-1,-1 } true;
    call $r82125, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",594,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",594,-1,-1,-1 } $r82125 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r82125, $StringConst73, r92126);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",597,-1,-1,-1 } true;
    goto block249;
  block246:
    assert { :sourceloc "JmxReporter.java",598,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r52122 := $exception;
    assert { :sourceloc "JmxReporter.java",595,-1,-1,-1 } true;
    r102127 := $r52122;
    assert { :sourceloc "JmxReporter.java",596,-1,-1,-1 } true;
    call $r62123, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",596,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",596,-1,-1,-1 } $r62123 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r62123, $StringConst73, r102127);
    if ($exception != $null) {
    }
  block249:
    assert { :sourceloc "JmxReporter.java",598,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onTimerAdded$4708($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r62136 : ref;    
var r22130 : ref;    
var $r72137 : ref;    
var $r152147 : ref;    
var $z02132 : int;    
var r32134 : ref;    
var $r142144 : ref;    
var r12129 : ref;    
var r172148 : ref;    
var r02128 : ref;    
var $r132145 : ref;    
var $fakelocal_0 : ref;    
var $r42131 : ref;    
var $fakelocal_1 : ref;    
var $r52135 : ref;    
var $fakelocal_2 : int;    
var r182149 : ref;    
var $r122142 : ref;    
var $r162146 : ref;    
var $r102140 : ref;    
var $r82138 : ref;    
var $r92139 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02128 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12129 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22130 := $in_parameter__1;
  block250:
    assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } true;
    $r42131 := $heap[r02128,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$JmxListener$filter621];
    assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } $r42131 != $null;
    call $z02132, $exception := boolean$com.codahale.metrics.MetricFilter$matches$2620($r42131, r12129, r22130);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block251;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block252;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } true;
    if ($z02132 == 0) {
        assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } { :comment "thenblock" } true;
        goto block253;
    } else {
        assert { :sourceloc "JmxReporter.java",603,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",604,-1,-1,-1 } true;
    call r32134, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02128, $StringConst74, r12129);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    $r72137 := $heap[r02128,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$JmxTimer);
    $r52135 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    $r62136 := $heap[r02128,com.codahale.metrics.JmxReporter$MetricTimeUnits$com.codahale.metrics.JmxReporter$JmxListener$timeUnits622];
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } $r62136 != $null;
    call $r82138, $exception := java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateFor$4725($r62136, r12129);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    $r92139 := $heap[r02128,com.codahale.metrics.JmxReporter$MetricTimeUnits$com.codahale.metrics.JmxReporter$JmxListener$timeUnits622];
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } $r92139 != $null;
    call $r102140, $exception := java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationFor$4724($r92139, r12129);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4883($r52135, r22130, r32134, $r82138, $r102140, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",605,-1,-1,-1 } $r72137 != $null;
    call $fakelocal_1, $exception := javax.management.ObjectInstance$javax.management.MBeanServer$registerMBean$2150($r72137, $r52135, r32134);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.NotCompliantMBeanException) {
            goto block252;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",606,-1,-1,-1 } true;
    $r122142 := $heap[r02128,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",606,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",606,-1,-1,-1 } $r122142 != $null;
    call $fakelocal_2, $exception := boolean$java.util.Set$add$239($r122142, r32134);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceAlreadyExistsException) {
            assert { :clone } true;
            goto block251;
        } else {
            assert { :clone } true;
        }
        if ($heap[$exception,$type] <: javax.management.JMException) {
            assert { :clone } true;
            goto block252;
        } else {
            assert { :clone } true;
        }
    }
  block253:
    assert { :sourceloc "JmxReporter.java",612,-1,-1,-1 } { :clone } true;
    goto block254;
  block251:
    assert { :sourceloc "JmxReporter.java",613,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r162146 := $exception;
    assert { :sourceloc "JmxReporter.java",608,-1,-1,-1 } true;
    r172148 := $r162146;
    assert { :sourceloc "JmxReporter.java",609,-1,-1,-1 } true;
    call $r152147, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",609,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",609,-1,-1,-1 } $r152147 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r152147, $StringConst75, r172148);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",612,-1,-1,-1 } { :clone } true;
    goto block254;
  block252:
    assert { :sourceloc "JmxReporter.java",612,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r142144 := $exception;
    assert { :sourceloc "JmxReporter.java",610,-1,-1,-1 } true;
    r182149 := $r142144;
    assert { :sourceloc "JmxReporter.java",611,-1,-1,-1 } true;
    call $r132145, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",611,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",611,-1,-1,-1 } $r132145 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r132145, $StringConst75, r182149);
    if ($exception != $null) {
    }
  block254:
    assert { :sourceloc "JmxReporter.java",613,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$onTimerRemoved$4709($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $fakelocal_0 : int;    
var r12151 : ref;    
var $r42155 : ref;    
var r102162 : ref;    
var $r32154 : ref;    
var $r82160 : ref;    
var $r62158 : ref;    
var r02150 : ref;    
var r22153 : ref;    
var $r72159 : ref;    
var $r52157 : ref;    
var r92161 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02150 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12151 := $in_parameter__0;
  block255:
    assert { :sourceloc "JmxReporter.java",618,-1,-1,-1 } true;
    call r22153, $exception := javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710(r02150, $StringConst74, r12151);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",619,-1,-1,-1 } true;
    $r32154 := $heap[r02150,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",619,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",619,-1,-1,-1 } $r32154 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r32154, r22153);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block256;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",620,-1,-1,-1 } true;
    $r42155 := $heap[r02150,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",620,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",620,-1,-1,-1 } $r42155 != $null;
    call $fakelocal_0, $exception := boolean$java.util.Set$add$239($r42155, r22153);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.InstanceNotFoundException) {
            assert { :clone } true;
            goto block257;
        } else {
            assert { :clone } true;
        }
    }
  block258:
    assert { :sourceloc "JmxReporter.java",625,-1,-1,-1 } true;
    goto block259;
  block257:
    assert { :sourceloc "JmxReporter.java",626,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72159 := $exception;
    assert { :sourceloc "JmxReporter.java",621,-1,-1,-1 } true;
    r92161 := $r72159;
    assert { :sourceloc "JmxReporter.java",622,-1,-1,-1 } true;
    call $r82160, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",622,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",622,-1,-1,-1 } $r82160 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r82160, $StringConst76, r92161);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",625,-1,-1,-1 } true;
    goto block259;
  block256:
    assert { :sourceloc "JmxReporter.java",626,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r52157 := $exception;
    assert { :sourceloc "JmxReporter.java",623,-1,-1,-1 } true;
    r102162 := $r52157;
    assert { :sourceloc "JmxReporter.java",624,-1,-1,-1 } true;
    call $r62158, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",624,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",624,-1,-1,-1 } $r62158 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r62158, $StringConst76, r102162);
    if ($exception != $null) {
    }
  block259:
    assert { :sourceloc "JmxReporter.java",626,-1,-1,-1 } true;
    return;
}


implementation javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxListener$createName$4710($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var r12177 : ref;    
var r22165 : ref;    
var $r52163 : ref;    
var $r92170 : ref;    
var $fakelocal_0 : ref;    
var $r62166 : ref;    
var $r122175 : ref;    
var $fakelocal_1 : ref;    
var $r112173 : ref;    
var $r72167 : ref;    
var $r82169 : ref;    
var r42174 : ref;    
var $r132176 : ref;    
var r02164 : ref;    
var $r102172 : ref;    
var $fakelocal_3 : ref;    
var $r142178 : ref;    
var $fakelocal_2 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02164 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12177 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22165 := $in_parameter__1;
  block260:
    assert { :sourceloc "JmxReporter.java",630,-1,-1,-1 } true;
    call $fakelocal_0 := $new(javax.management.ObjectName);
    $r52163 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",630,-1,-1,-1 } true;
    $r62166 := $heap[r02164,java.lang.String$com.codahale.metrics.JmxReporter$JmxListener$name619];
    assert { :sourceloc "JmxReporter.java",630,-1,-1,-1 } true;
    call $exception := void$javax.management.ObjectName$$la$init$ra$$2258($r52163, $r62166, $StringConst77, r22165);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MalformedObjectNameException) {
            $r52163 := $null;
            goto block261;
        } else {
            assert { :clone } true;
        }
    }
  block262:
    assert { :sourceloc "JmxReporter.java",630,-1,-1,-1 } true;
    $return := $r52163;
    return;
  block261:
    assert { :sourceloc "JmxReporter.java",630,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r72167 := $exception;
  block263:
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    call $fakelocal_1 := $new(javax.management.ObjectName);
    $r82169 := $fakelocal_1;
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    $r92170 := $heap[r02164,java.lang.String$com.codahale.metrics.JmxReporter$JmxListener$name619];
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    call $r102172, $exception := java.lang.String$javax.management.ObjectName$quote$2278(r22165);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MalformedObjectNameException) {
            assert { :clone } true;
            goto block264;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    call $exception := void$javax.management.ObjectName$$la$init$ra$$2258($r82169, $r92170, $StringConst77, $r102172);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MalformedObjectNameException) {
            $r82169 := $null;
            goto block264;
        } else {
            assert { :clone } true;
        }
    }
  block265:
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    $return := $r82169;
    return;
  block264:
    assert { :sourceloc "JmxReporter.java",633,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r112173 := $exception;
    assert { :sourceloc "JmxReporter.java",634,-1,-1,-1 } true;
    r42174 := $r112173;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    call $r122175, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    call $fakelocal_2 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_2 := 3];
    $r132176 := $fakelocal_2;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } 0 < $arrSizeHeap[$r132176] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r132176 := $refArrHeap[$r132176][0 := r12177]];
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } 1 < $arrSizeHeap[$r132176] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r132176 := $refArrHeap[$r132176][1 := r22165]];
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } 2 < $arrSizeHeap[$r132176] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r132176 := $refArrHeap[$r132176][2 := r42174]];
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",635,-1,-1,-1 } $r122175 != $null;
    call $exception := void$org.slf4j.Logger$warn$6060($r122175, $StringConst78, $r132176);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",636,-1,-1,-1 } true;
    call $fakelocal_3 := $new(java.lang.RuntimeException);
    $r142178 := $fakelocal_3;
    assert { :sourceloc "JmxReporter.java",636,-1,-1,-1 } true;
    call $exception := void$java.lang.RuntimeException$$la$init$ra$$925($r142178, r42174);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",636,-1,-1,-1 } true;
    $exception := $r142178;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$unregisterAll$4711($this:ref) returns ($exception:ref){
    
var $r102191 : ref;    
var r22186 : ref;    
var r02179 : ref;    
var r32189 : ref;    
var r122193 : ref;    
var $r62185 : ref;    
var $r72187 : ref;    
var $r52184 : ref;    
var $r42180 : ref;    
var r12182 : ref;    
var $z02183 : int;    
var $r92190 : ref;    
var $r82188 : ref;    
var $r112192 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02179 := $this;
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } true;
    $r42180 := $heap[r02179,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } $r42180 != $null;
    call r12182, $exception := java.util.Iterator$java.util.Set$iterator$236($r42180);
    if ($exception != $null) {
    }
  block266:
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } r12182 != $null;
    call $z02183, $exception := boolean$java.util.Iterator$hasNext$1051(r12182);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } true;
    if ($z02183 == 0) {
        assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } { :comment "thenblock" } true;
        goto block267;
    } else {
        assert { :sourceloc "JmxReporter.java",642,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",652,-1,-1,-1 } true;
    call $r62185, $exception := java.lang.Object$java.util.Iterator$next$1052(r12182);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",652,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",652,-1,-1,-1 } $heap[$r62185,$type] <: javax.management.ObjectName;
    r22186 := $r62185;
  block268:
    assert { :sourceloc "JmxReporter.java",644,-1,-1,-1 } true;
    $r72187 := $heap[r02179,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$JmxListener$mBeanServer620];
    assert { :sourceloc "JmxReporter.java",644,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",644,-1,-1,-1 } $r72187 != $null;
    call $exception := void$javax.management.MBeanServer$unregisterMBean$2151($r72187, r22186);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: javax.management.MBeanRegistrationException) {
            goto block269;
        } else {
            assert { :clone } true;
        }
    }
  block271:
    assert { :sourceloc "JmxReporter.java",649,-1,-1,-1 } true;
    goto block272;
  block270:
    assert { :sourceloc "JmxReporter.java",650,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r102191 := $exception;
    assert { :sourceloc "JmxReporter.java",645,-1,-1,-1 } true;
    r32189 := $r102191;
    assert { :sourceloc "JmxReporter.java",646,-1,-1,-1 } true;
    call $r112192, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",646,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",646,-1,-1,-1 } $r112192 != $null;
    call $exception := void$org.slf4j.Logger$debug$6058($r112192, $StringConst79, r32189);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",649,-1,-1,-1 } true;
    goto block272;
  block269:
    assert { :sourceloc "JmxReporter.java",650,-1,-1,-1 } { :clone } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r82188 := $exception;
    assert { :sourceloc "JmxReporter.java",647,-1,-1,-1 } true;
    r122193 := $r82188;
    assert { :sourceloc "JmxReporter.java",648,-1,-1,-1 } true;
    call $r92190, $exception := org.slf4j.Logger$com.codahale.metrics.JmxReporter$access$400$4697();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",648,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",648,-1,-1,-1 } $r92190 != $null;
    call $exception := void$org.slf4j.Logger$warn$6059($r92190, $StringConst79, r122193);
    if ($exception != $null) {
    }
  block272:
    assert { :sourceloc "JmxReporter.java",650,-1,-1,-1 } true;
    goto block266;
  block267:
    assert { :sourceloc "JmxReporter.java",651,-1,-1,-1 } true;
    $r52184 := $heap[r02179,java.util.Set$com.codahale.metrics.JmxReporter$JmxListener$registered623];
    assert { :sourceloc "JmxReporter.java",651,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",651,-1,-1,-1 } $r52184 != $null;
    call $exception := void$java.util.Set$clear$245($r52184);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",652,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4712($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var r32197 : ref;    
var r42198 : ref;    
var r22196 : ref;    
var r52199 : ref;    
var r12195 : ref;    
var r02194 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assume $heap[$in_parameter__4,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__1,$type] <: java.lang.String;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.JmxReporter$MetricTimeUnits;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02194 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12195 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22196 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32197 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42198 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r52199 := $in_parameter__4;
    assert { :sourceloc "JmxReporter.java",473,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxListener$$la$init$ra$$4699(r02194, r12195, r22196, r32197, r42198);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",473,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4713($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r32202 : ref;    
var $r62206 : ref;    
var $fakelocal_0 : ref;    
var $r42204 : ref;    
var $r72207 : ref;    
var $r22201 : ref;    
var r12203 : ref;    
var r02200 : ref;    
var $r52205 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02200 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12203 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",43,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02200);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",35,-1,-1,-1 } true;
    call $r22201, $exception := javax.management.MBeanServer$java.lang.management.ManagementFactory$getPlatformMBeanServer$2115();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",35,-1,-1,-1 } true;
    $heap := $heap[r02200,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$Builder$mBeanServer625 := $r22201];
    assert { :sourceloc "JmxReporter.java",38,-1,-1,-1 } true;
    $r32202 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "JmxReporter.java",38,-1,-1,-1 } true;
    $heap := $heap[r02200,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$Builder$filter628 := $r32202];
    assert { :sourceloc "JmxReporter.java",44,-1,-1,-1 } true;
    $heap := $heap[r02200,com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$Builder$registry624 := r12203];
    assert { :sourceloc "JmxReporter.java",45,-1,-1,-1 } true;
    $r42204 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "JmxReporter.java",45,-1,-1,-1 } true;
    $heap := $heap[r02200,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$rateUnit626 := $r42204];
    assert { :sourceloc "JmxReporter.java",46,-1,-1,-1 } true;
    $r52205 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "JmxReporter.java",46,-1,-1,-1 } true;
    $heap := $heap[r02200,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$durationUnit627 := $r52205];
    assert { :sourceloc "JmxReporter.java",47,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.String);
    $stringSizeHeap := $stringSizeHeap[$fakelocal_0 := 7];
    $heap := $heap[r02200,java.lang.String$com.codahale.metrics.JmxReporter$Builder$domain629 := $fakelocal_0];
    assert { :sourceloc "JmxReporter.java",48,-1,-1,-1 } true;
    call $r62206, $exception := java.util.Map$java.util.Collections$emptyMap$4783();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",48,-1,-1,-1 } true;
    $heap := $heap[r02200,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits630 := $r62206];
    assert { :sourceloc "JmxReporter.java",49,-1,-1,-1 } true;
    call $r72207, $exception := java.util.Map$java.util.Collections$emptyMap$4783();
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",49,-1,-1,-1 } true;
    $heap := $heap[r02200,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificRateUnits631 := $r72207];
    assert { :sourceloc "JmxReporter.java",50,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$registerWith$4714($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12209 : ref;    
var r02208 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: javax.management.MBeanServer;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02208 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12209 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",59,-1,-1,-1 } true;
    $heap := $heap[r02208,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$Builder$mBeanServer625 := r12209];
    assert { :sourceloc "JmxReporter.java",60,-1,-1,-1 } true;
    $return := r02208;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$convertRatesTo$4715($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12211 : ref;    
var r02210 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02210 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12211 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",70,-1,-1,-1 } true;
    $heap := $heap[r02210,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$rateUnit626 := r12211];
    assert { :sourceloc "JmxReporter.java",71,-1,-1,-1 } true;
    $return := r02210;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$convertDurationsTo$4716($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02212 : ref;    
var r12213 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02212 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12213 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",81,-1,-1,-1 } true;
    $heap := $heap[r02212,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$durationUnit627 := r12213];
    assert { :sourceloc "JmxReporter.java",82,-1,-1,-1 } true;
    $return := r02212;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$filter$4717($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12215 : ref;    
var r02214 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02214 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12215 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",92,-1,-1,-1 } true;
    $heap := $heap[r02214,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$Builder$filter628 := r12215];
    assert { :sourceloc "JmxReporter.java",93,-1,-1,-1 } true;
    $return := r02214;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$inDomain$4718($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02216 : ref;    
var r12217 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02216 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12217 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",97,-1,-1,-1 } true;
    $heap := $heap[r02216,java.lang.String$com.codahale.metrics.JmxReporter$Builder$domain629 := r12217];
    assert { :sourceloc "JmxReporter.java",98,-1,-1,-1 } true;
    $return := r02216;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits$4719($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02218 : ref;    
var r12219 : ref;    
var $r22220 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.Map;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02218 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12219 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",108,-1,-1,-1 } true;
    call $r22220, $exception := java.util.Map$java.util.Collections$unmodifiableMap$4760(r12219);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",108,-1,-1,-1 } true;
    $heap := $heap[r02218,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits630 := $r22220];
    assert { :sourceloc "JmxReporter.java",109,-1,-1,-1 } true;
    $return := r02218;
    return;
}


implementation com.codahale.metrics.JmxReporter$Builder$com.codahale.metrics.JmxReporter$Builder$specificRateUnits$4720($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12222 : ref;    
var $r22223 : ref;    
var r02221 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: java.util.Map;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02221 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12222 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",120,-1,-1,-1 } true;
    call $r22223, $exception := java.util.Map$java.util.Collections$unmodifiableMap$4760(r12222);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",120,-1,-1,-1 } true;
    $heap := $heap[r02221,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificRateUnits631 := $r22223];
    assert { :sourceloc "JmxReporter.java",121,-1,-1,-1 } true;
    $return := r02221;
    return;
}


implementation com.codahale.metrics.JmxReporter$com.codahale.metrics.JmxReporter$Builder$build$4721($this:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var r12230 : ref;    
var $r42227 : ref;    
var $r92233 : ref;    
var $r72231 : ref;    
var $fakelocal_1 : ref;    
var $r82232 : ref;    
var $r52228 : ref;    
var $r112235 : ref;    
var $r22224 : ref;    
var $r62229 : ref;    
var $r32226 : ref;    
var r02225 : ref;    
var $r102234 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.JmxReporter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02225 := $this;
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.JmxReporter$MetricTimeUnits);
    $r22224 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    $r62229 := $heap[r02225,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$rateUnit626];
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    $r52228 := $heap[r02225,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$Builder$durationUnit627];
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    $r42227 := $heap[r02225,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificRateUnits631];
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    $r32226 := $heap[r02225,java.util.Map$com.codahale.metrics.JmxReporter$Builder$specificDurationUnits630];
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$MetricTimeUnits$$la$init$ra$$4723($r22224, $r62229, $r52228, $r42227, $r32226);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",130,-1,-1,-1 } true;
    r12230 := $r22224;
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.JmxReporter);
    $r72231 := $fakelocal_1;
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    $r112235 := $heap[r02225,javax.management.MBeanServer$com.codahale.metrics.JmxReporter$Builder$mBeanServer625];
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    $r102234 := $heap[r02225,java.lang.String$com.codahale.metrics.JmxReporter$Builder$domain629];
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    $r92233 := $heap[r02225,com.codahale.metrics.MetricRegistry$com.codahale.metrics.JmxReporter$Builder$registry624];
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    $r82232 := $heap[r02225,com.codahale.metrics.MetricFilter$com.codahale.metrics.JmxReporter$Builder$filter628];
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$$la$init$ra$$4696($r72231, $r112235, $r102234, $r92233, $r82232, r12230, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",131,-1,-1,-1 } true;
    $return := $r72231;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4722($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22238 : ref;    
var r12237 : ref;    
var r02236 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02236 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12237 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22238 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",33,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$Builder$$la$init$ra$$4713(r02236, r12237);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",33,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$MetricTimeUnits$$la$init$ra$$4723($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref){
    
var r42243 : ref;    
var r02239 : ref;    
var r32242 : ref;    
var r22241 : ref;    
var r12240 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__3,$type] <: java.util.Map;
    assume $heap[$in_parameter__2,$type] <: java.util.Map;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02239 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12240 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22241 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32242 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42243 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",664,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02239);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",665,-1,-1,-1 } true;
    $heap := $heap[r02239,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultRate632 := r12240];
    assert { :sourceloc "JmxReporter.java",666,-1,-1,-1 } true;
    $heap := $heap[r02239,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultDuration633 := r22241];
    assert { :sourceloc "JmxReporter.java",667,-1,-1,-1 } true;
    $heap := $heap[r02239,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateOverrides634 := r32242];
    assert { :sourceloc "JmxReporter.java",668,-1,-1,-1 } true;
    $heap := $heap[r02239,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationOverrides635 := r42243];
    assert { :sourceloc "JmxReporter.java",669,-1,-1,-1 } true;
    return;
}


implementation java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationFor$4724($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r52250 : ref;    
var r02244 : ref;    
var $z02247 : int;    
var $r32248 : ref;    
var $r22246 : ref;    
var $r42249 : ref;    
var r12245 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02244 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12245 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    $r22246 := $heap[r02244,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationOverrides635];
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } $r22246 != $null;
    call $z02247, $exception := boolean$java.util.Map$containsKey$1158($r22246, r12245);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    if ($z02247 == 0) {
        assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } { :comment "thenblock" } true;
        goto block273;
    } else {
        assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    $r42249 := $heap[r02244,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$durationOverrides635];
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } $r42249 != $null;
    call $r52250, $exception := java.lang.Object$java.util.Map$get$1160($r42249, r12245);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } $heap[$r52250,$type] <: java.util.concurrent.TimeUnit;
    $r32248 := $r52250;
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    goto block274;
  block273:
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    $r32248 := $heap[r02244,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultDuration633];
  block274:
    assert { :sourceloc "JmxReporter.java",672,-1,-1,-1 } true;
    $return := $r32248;
    return;
}


implementation java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateFor$4725($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $r42256 : ref;    
var $r52257 : ref;    
var r12252 : ref;    
var $z02254 : int;    
var r02251 : ref;    
var $r22253 : ref;    
var $r32255 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02251 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12252 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    $r22253 := $heap[r02251,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateOverrides634];
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } $r22253 != $null;
    call $z02254, $exception := boolean$java.util.Map$containsKey$1158($r22253, r12252);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    if ($z02254 == 0) {
        assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } { :comment "thenblock" } true;
        goto block275;
    } else {
        assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    $r42256 := $heap[r02251,java.util.Map$com.codahale.metrics.JmxReporter$MetricTimeUnits$rateOverrides634];
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } $r42256 != $null;
    call $r52257, $exception := java.lang.Object$java.util.Map$get$1160($r42256, r12252);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } $heap[$r52257,$type] <: java.util.concurrent.TimeUnit;
    $r32255 := $r52257;
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    goto block276;
  block275:
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    $r32255 := $heap[r02251,java.util.concurrent.TimeUnit$com.codahale.metrics.JmxReporter$MetricTimeUnits$defaultRate632];
  block276:
    assert { :sourceloc "JmxReporter.java",676,-1,-1,-1 } true;
    $return := $r32255;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$AbstractBean$$la$init$ra$$4726($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12259 : ref;    
var r02258 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02258 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12259 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",148,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02258);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",149,-1,-1,-1 } true;
    $heap := $heap[r02258,javax.management.ObjectName$com.codahale.metrics.JmxReporter$AbstractBean$objectName636 := r12259];
    assert { :sourceloc "JmxReporter.java",150,-1,-1,-1 } true;
    return;
}


implementation javax.management.ObjectName$com.codahale.metrics.JmxReporter$AbstractBean$objectName$4727($this:ref) returns ($return:ref, $exception:ref){
    
var $r12261 : ref;    
var r02260 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02260 := $this;
    assert { :sourceloc "JmxReporter.java",154,-1,-1,-1 } true;
    $r12261 := $heap[r02260,javax.management.ObjectName$com.codahale.metrics.JmxReporter$AbstractBean$objectName636];
    assert { :sourceloc "JmxReporter.java",154,-1,-1,-1 } true;
    $return := $r12261;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4835($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22263 : ref;    
var r12264 : ref;    
var r02262 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02262 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12264 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22263 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",190,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$AbstractBean$$la$init$ra$$4726(r02262, r22263);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",191,-1,-1,-1 } true;
    $heap := $heap[r02262,com.codahale.metrics.Counter$com.codahale.metrics.JmxReporter$JmxCounter$metric641 := r12264];
    assert { :sourceloc "JmxReporter.java",192,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.JmxReporter$JmxCounter$getCount$4836($this:ref) returns ($return:int, $exception:ref){
    
var $l02267 : int;    
var $r12266 : ref;    
var r02265 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02265 := $this;
    assert { :sourceloc "JmxReporter.java",196,-1,-1,-1 } true;
    $r12266 := $heap[r02265,com.codahale.metrics.Counter$com.codahale.metrics.JmxReporter$JmxCounter$metric641];
    assert { :sourceloc "JmxReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",196,-1,-1,-1 } $r12266 != $null;
    call $l02267, $exception := long$com.codahale.metrics.Counter$getCount$2847($r12266);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",196,-1,-1,-1 } true;
    $return := $l02267;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4837($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r02268 : ref;    
var r32271 : ref;    
var r22270 : ref;    
var r12269 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02268 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12269 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22270 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32271 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",186,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxCounter$$la$init$ra$$4835(r02268, r12269, r22270);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",186,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4839($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22273 : ref;    
var r02272 : ref;    
var r12274 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Gauge;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02272 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12274 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22273 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",169,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$AbstractBean$$la$init$ra$$4726(r02272, r22273);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",170,-1,-1,-1 } true;
    $heap := $heap[r02272,com.codahale.metrics.Gauge$com.codahale.metrics.JmxReporter$JmxGauge$metric642 := r12274];
    assert { :sourceloc "JmxReporter.java",171,-1,-1,-1 } true;
    return;
}


implementation java.lang.Object$com.codahale.metrics.JmxReporter$JmxGauge$getValue$4840($this:ref) returns ($return:ref, $exception:ref){
    
var $r22277 : ref;    
var r02275 : ref;    
var $r12276 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02275 := $this;
    assert { :sourceloc "JmxReporter.java",175,-1,-1,-1 } true;
    $r12276 := $heap[r02275,com.codahale.metrics.Gauge$com.codahale.metrics.JmxReporter$JmxGauge$metric642];
    assert { :sourceloc "JmxReporter.java",175,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",175,-1,-1,-1 } $r12276 != $null;
    call $r22277, $exception := java.lang.Object$com.codahale.metrics.Gauge$getValue$1894($r12276);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",175,-1,-1,-1 } true;
    $return := $r22277;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4841($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r12279 : ref;    
var r32281 : ref;    
var r22280 : ref;    
var r02278 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Gauge;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02278 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12279 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22280 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32281 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",165,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxGauge$$la$init$ra$$4839(r02278, r12279, r22280);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",165,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4843($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r12283 : ref;    
var r22284 : ref;    
var r02282 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Histogram;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02282 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12283 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22284 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",233,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02282);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",234,-1,-1,-1 } true;
    $heap := $heap[r02282,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644 := r12283];
    assert { :sourceloc "JmxReporter.java",235,-1,-1,-1 } true;
    $heap := $heap[r02282,javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxHistogram$objectName643 := r22284];
    assert { :sourceloc "JmxReporter.java",236,-1,-1,-1 } true;
    return;
}


implementation javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxHistogram$objectName$4844($this:ref) returns ($return:ref, $exception:ref){
    
var $r12286 : ref;    
var r02285 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02285 := $this;
    assert { :sourceloc "JmxReporter.java",240,-1,-1,-1 } true;
    $r12286 := $heap[r02285,javax.management.ObjectName$com.codahale.metrics.JmxReporter$JmxHistogram$objectName643];
    assert { :sourceloc "JmxReporter.java",240,-1,-1,-1 } true;
    $return := $r12286;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get50thPercentile$4845($this:ref) returns ($return:int, $exception:ref){
    
var $d02290 : int;    
var $r22289 : ref;    
var $r12288 : ref;    
var r02287 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02287 := $this;
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } true;
    $r12288 := $heap[r02287,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } $r12288 != $null;
    call $r22289, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12288);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } $r22289 != $null;
    call $d02290, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154($r22289);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",245,-1,-1,-1 } true;
    $return := $d02290;
    return;
}


implementation long$com.codahale.metrics.JmxReporter$JmxHistogram$getCount$4846($this:ref) returns ($return:int, $exception:ref){
    
var r02291 : ref;    
var $l02293 : int;    
var $r12292 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02291 := $this;
    assert { :sourceloc "JmxReporter.java",250,-1,-1,-1 } true;
    $r12292 := $heap[r02291,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",250,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",250,-1,-1,-1 } $r12292 != $null;
    call $l02293, $exception := long$com.codahale.metrics.Histogram$getCount$2650($r12292);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",250,-1,-1,-1 } true;
    $return := $l02293;
    return;
}


implementation long$com.codahale.metrics.JmxReporter$JmxHistogram$getMin$4847($this:ref) returns ($return:int, $exception:ref){
    
var r02294 : ref;    
var $r22296 : ref;    
var $r12295 : ref;    
var $l02297 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02294 := $this;
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } true;
    $r12295 := $heap[r02294,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } $r12295 != $null;
    call $r22296, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12295);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } $r22296 != $null;
    call $l02297, $exception := long$com.codahale.metrics.Snapshot$getMin$3162($r22296);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",255,-1,-1,-1 } true;
    $return := $l02297;
    return;
}


implementation long$com.codahale.metrics.JmxReporter$JmxHistogram$getMax$4848($this:ref) returns ($return:int, $exception:ref){
    
var $r12299 : ref;    
var $l02301 : int;    
var r02298 : ref;    
var $r22300 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02298 := $this;
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } true;
    $r12299 := $heap[r02298,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } $r12299 != $null;
    call $r22300, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12299);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } $r22300 != $null;
    call $l02301, $exception := long$com.codahale.metrics.Snapshot$getMax$3161($r22300);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",260,-1,-1,-1 } true;
    $return := $l02301;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$getMean$4849($this:ref) returns ($return:int, $exception:ref){
    
var $d02305 : int;    
var $r22304 : ref;    
var $r12303 : ref;    
var r02302 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02302 := $this;
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } true;
    $r12303 := $heap[r02302,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } $r12303 != $null;
    call $r22304, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12303);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } $r22304 != $null;
    call $d02305, $exception := double$com.codahale.metrics.Snapshot$getMean$3163($r22304);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",265,-1,-1,-1 } true;
    $return := $d02305;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$getStdDev$4850($this:ref) returns ($return:int, $exception:ref){
    
var $r12307 : ref;    
var r02306 : ref;    
var $r22308 : ref;    
var $d02309 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02306 := $this;
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } true;
    $r12307 := $heap[r02306,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } $r12307 != $null;
    call $r22308, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12307);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } $r22308 != $null;
    call $d02309, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164($r22308);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",270,-1,-1,-1 } true;
    $return := $d02309;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get75thPercentile$4851($this:ref) returns ($return:int, $exception:ref){
    
var $r22312 : ref;    
var $r12311 : ref;    
var r02310 : ref;    
var $d02313 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02310 := $this;
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } true;
    $r12311 := $heap[r02310,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } $r12311 != $null;
    call $r22312, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12311);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } $r22312 != $null;
    call $d02313, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155($r22312);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",275,-1,-1,-1 } true;
    $return := $d02313;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get95thPercentile$4852($this:ref) returns ($return:int, $exception:ref){
    
var $d02317 : int;    
var $r12315 : ref;    
var $r22316 : ref;    
var r02314 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02314 := $this;
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } true;
    $r12315 := $heap[r02314,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } $r12315 != $null;
    call $r22316, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12315);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } $r22316 != $null;
    call $d02317, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156($r22316);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",280,-1,-1,-1 } true;
    $return := $d02317;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get98thPercentile$4853($this:ref) returns ($return:int, $exception:ref){
    
var r02318 : ref;    
var $d02321 : int;    
var $r12319 : ref;    
var $r22320 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02318 := $this;
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } true;
    $r12319 := $heap[r02318,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } $r12319 != $null;
    call $r22320, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12319);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } $r22320 != $null;
    call $d02321, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157($r22320);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",285,-1,-1,-1 } true;
    $return := $d02321;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get99thPercentile$4854($this:ref) returns ($return:int, $exception:ref){
    
var $r22324 : ref;    
var $d02325 : int;    
var $r12323 : ref;    
var r02322 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02322 := $this;
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } true;
    $r12323 := $heap[r02322,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } $r12323 != $null;
    call $r22324, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12323);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } $r22324 != $null;
    call $d02325, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158($r22324);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",290,-1,-1,-1 } true;
    $return := $d02325;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxHistogram$get999thPercentile$4855($this:ref) returns ($return:int, $exception:ref){
    
var r02326 : ref;    
var $r12327 : ref;    
var $d02329 : int;    
var $r22328 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02326 := $this;
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } true;
    $r12327 := $heap[r02326,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } $r12327 != $null;
    call $r22328, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12327);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } $r22328 != $null;
    call $d02329, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159($r22328);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",295,-1,-1,-1 } true;
    $return := $d02329;
    return;
}


implementation long$lp$$rp$$com.codahale.metrics.JmxReporter$JmxHistogram$values$4856($this:ref) returns ($return:ref, $exception:ref){
    
var $r22332 : ref;    
var $r12331 : ref;    
var $r32333 : ref;    
var r02330 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02330 := $this;
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } true;
    $r12331 := $heap[r02330,com.codahale.metrics.Histogram$com.codahale.metrics.JmxReporter$JmxHistogram$metric644];
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } $r12331 != $null;
    call $r22332, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651($r12331);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } $r22332 != $null;
    call $r32333, $exception := long$lp$$rp$$com.codahale.metrics.Snapshot$getValues$3160($r22332);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",300,-1,-1,-1 } true;
    $return := $r32333;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4857($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var r12335 : ref;    
var r22336 : ref;    
var r02334 : ref;    
var r32337 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Histogram;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02334 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12335 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22336 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32337 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",229,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxHistogram$$la$init$ra$$4843(r02334, r12335, r22336);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",229,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4870($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref){
    
var r22340 : ref;    
var $d12346 : int;    
var r02338 : ref;    
var r12339 : ref;    
var $r52347 : ref;    
var $d02345 : int;    
var r32341 : ref;    
var $l02344 : int;    
var $r62348 : ref;    
var $r72349 : ref;    
var r42342 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02338 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12339 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22340 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32341 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42342 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",406,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4909(r02338, r12339, r22340, r32341, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",407,-1,-1,-1 } true;
    $heap := $heap[r02338,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645 := r12339];
    assert { :sourceloc "JmxReporter.java",408,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",408,-1,-1,-1 } r42342 != $null;
    call $l02344, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r42342, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",408,-1,-1,-1 } true;
    $d02345 := $l02344;
    assert { :sourceloc "JmxReporter.java",408,-1,-1,-1 } true;
    $d12346 := $realOp32241($DoubleConst0, $d02345);
    assert { :sourceloc "JmxReporter.java",408,-1,-1,-1 } true;
    $heap := $heap[r02338,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0 := $d12346];
    assert { :sourceloc "JmxReporter.java",409,-1,-1,-1 } true;
    call $r52347, $exception := java.lang.String$java.lang.Enum$toString$1942(r42342);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",409,-1,-1,-1 } true;
    $r62348 := java.util.Locale$java.util.Locale$US331;
    assert { :sourceloc "JmxReporter.java",409,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",409,-1,-1,-1 } $r52347 != $null;
    call $r72349, $exception := java.lang.String$java.lang.String$toLowerCase$119($r52347, $r62348);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",409,-1,-1,-1 } true;
    $heap := $heap[r02338,java.lang.String$com.codahale.metrics.JmxReporter$JmxTimer$durationUnit646 := $r72349];
    assert { :sourceloc "JmxReporter.java",410,-1,-1,-1 } true;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get50thPercentile$4871($this:ref) returns ($return:int, $exception:ref){
    
var $r22352 : ref;    
var $d22355 : int;    
var r02350 : ref;    
var $d12354 : int;    
var $r12351 : ref;    
var $d02353 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02350 := $this;
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    $r12351 := $heap[r02350,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } $r12351 != $null;
    call $r22352, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12351);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } $r22352 != $null;
    call $d02353, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154($r22352);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    $d12354 := $heap[r02350,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    $d22355 := $realOp32086($d02353, $d12354);
    assert { :sourceloc "JmxReporter.java",414,-1,-1,-1 } true;
    $return := $d22355;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$getMin$4872($this:ref) returns ($return:int, $exception:ref){
    
var $d02360 : int;    
var $r22358 : ref;    
var $d22362 : int;    
var $d12361 : int;    
var $l02359 : int;    
var $r12357 : ref;    
var r02356 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02356 := $this;
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    $r12357 := $heap[r02356,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } $r12357 != $null;
    call $r22358, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12357);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } $r22358 != $null;
    call $l02359, $exception := long$com.codahale.metrics.Snapshot$getMin$3162($r22358);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    $d12361 := $l02359;
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    $d02360 := $heap[r02356,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    $d22362 := $realOp32086($d12361, $d02360);
    assert { :sourceloc "JmxReporter.java",419,-1,-1,-1 } true;
    $return := $d22362;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$getMax$4873($this:ref) returns ($return:int, $exception:ref){
    
var $d02367 : int;    
var $l02366 : int;    
var $r22365 : ref;    
var $d12368 : int;    
var $r12364 : ref;    
var $d22369 : int;    
var r02363 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02363 := $this;
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    $r12364 := $heap[r02363,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } $r12364 != $null;
    call $r22365, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12364);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } $r22365 != $null;
    call $l02366, $exception := long$com.codahale.metrics.Snapshot$getMax$3161($r22365);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    $d12368 := $l02366;
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    $d02367 := $heap[r02363,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    $d22369 := $realOp32086($d12368, $d02367);
    assert { :sourceloc "JmxReporter.java",424,-1,-1,-1 } true;
    $return := $d22369;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$getMean$4874($this:ref) returns ($return:int, $exception:ref){
    
var $r22372 : ref;    
var r02370 : ref;    
var $d12374 : int;    
var $d02373 : int;    
var $r12371 : ref;    
var $d22375 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02370 := $this;
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    $r12371 := $heap[r02370,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } $r12371 != $null;
    call $r22372, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12371);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } $r22372 != $null;
    call $d02373, $exception := double$com.codahale.metrics.Snapshot$getMean$3163($r22372);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    $d12374 := $heap[r02370,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    $d22375 := $realOp32086($d02373, $d12374);
    assert { :sourceloc "JmxReporter.java",429,-1,-1,-1 } true;
    $return := $d22375;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$getStdDev$4875($this:ref) returns ($return:int, $exception:ref){
    
var $d02379 : int;    
var $r22378 : ref;    
var $r12377 : ref;    
var $d22381 : int;    
var $d12380 : int;    
var r02376 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02376 := $this;
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    $r12377 := $heap[r02376,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } $r12377 != $null;
    call $r22378, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12377);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } $r22378 != $null;
    call $d02379, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164($r22378);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    $d12380 := $heap[r02376,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    $d22381 := $realOp32086($d02379, $d12380);
    assert { :sourceloc "JmxReporter.java",434,-1,-1,-1 } true;
    $return := $d22381;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get75thPercentile$4876($this:ref) returns ($return:int, $exception:ref){
    
var $r22384 : ref;    
var $r12383 : ref;    
var $d22387 : int;    
var $d12386 : int;    
var $d02385 : int;    
var r02382 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02382 := $this;
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    $r12383 := $heap[r02382,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } $r12383 != $null;
    call $r22384, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12383);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } $r22384 != $null;
    call $d02385, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155($r22384);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    $d12386 := $heap[r02382,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    $d22387 := $realOp32086($d02385, $d12386);
    assert { :sourceloc "JmxReporter.java",439,-1,-1,-1 } true;
    $return := $d22387;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get95thPercentile$4877($this:ref) returns ($return:int, $exception:ref){
    
var $d22393 : int;    
var $r22390 : ref;    
var $d12392 : int;    
var r02388 : ref;    
var $r12389 : ref;    
var $d02391 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02388 := $this;
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    $r12389 := $heap[r02388,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } $r12389 != $null;
    call $r22390, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12389);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } $r22390 != $null;
    call $d02391, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156($r22390);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    $d12392 := $heap[r02388,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    $d22393 := $realOp32086($d02391, $d12392);
    assert { :sourceloc "JmxReporter.java",444,-1,-1,-1 } true;
    $return := $d22393;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get98thPercentile$4878($this:ref) returns ($return:int, $exception:ref){
    
var r02394 : ref;    
var $d22399 : int;    
var $d12398 : int;    
var $d02397 : int;    
var $r22396 : ref;    
var $r12395 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02394 := $this;
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    $r12395 := $heap[r02394,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } $r12395 != $null;
    call $r22396, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12395);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } $r22396 != $null;
    call $d02397, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157($r22396);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    $d12398 := $heap[r02394,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    $d22399 := $realOp32086($d02397, $d12398);
    assert { :sourceloc "JmxReporter.java",449,-1,-1,-1 } true;
    $return := $d22399;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get99thPercentile$4879($this:ref) returns ($return:int, $exception:ref){
    
var $d22405 : int;    
var $d12404 : int;    
var $r12401 : ref;    
var $d02403 : int;    
var $r22402 : ref;    
var r02400 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02400 := $this;
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    $r12401 := $heap[r02400,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } $r12401 != $null;
    call $r22402, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12401);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } $r22402 != $null;
    call $d02403, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158($r22402);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    $d12404 := $heap[r02400,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    $d22405 := $realOp32086($d02403, $d12404);
    assert { :sourceloc "JmxReporter.java",454,-1,-1,-1 } true;
    $return := $d22405;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxTimer$get999thPercentile$4880($this:ref) returns ($return:int, $exception:ref){
    
var $d02409 : int;    
var $d12410 : int;    
var r02406 : ref;    
var $r12407 : ref;    
var $d22411 : int;    
var $r22408 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02406 := $this;
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    $r12407 := $heap[r02406,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } $r12407 != $null;
    call $r22408, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12407);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } $r22408 != $null;
    call $d02409, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159($r22408);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    $d12410 := $heap[r02406,double$com.codahale.metrics.JmxReporter$JmxTimer$durationFactor0];
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    $d22411 := $realOp32086($d02409, $d12410);
    assert { :sourceloc "JmxReporter.java",459,-1,-1,-1 } true;
    $return := $d22411;
    return;
}


implementation long$lp$$rp$$com.codahale.metrics.JmxReporter$JmxTimer$values$4881($this:ref) returns ($return:ref, $exception:ref){
    
var $r12413 : ref;    
var $r32415 : ref;    
var r02412 : ref;    
var $r22414 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02412 := $this;
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } true;
    $r12413 := $heap[r02412,com.codahale.metrics.Timer$com.codahale.metrics.JmxReporter$JmxTimer$metric645];
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } $r12413 != $null;
    call $r22414, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663($r12413);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } $r22414 != $null;
    call $r32415, $exception := long$lp$$rp$$com.codahale.metrics.Snapshot$getValues$3160($r22414);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",464,-1,-1,-1 } true;
    $return := $r32415;
    return;
}


implementation java.lang.String$com.codahale.metrics.JmxReporter$JmxTimer$getDurationUnit$4882($this:ref) returns ($return:ref, $exception:ref){
    
var r02416 : ref;    
var $r12417 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02416 := $this;
    assert { :sourceloc "JmxReporter.java",469,-1,-1,-1 } true;
    $r12417 := $heap[r02416,java.lang.String$com.codahale.metrics.JmxReporter$JmxTimer$durationUnit646];
    assert { :sourceloc "JmxReporter.java",469,-1,-1,-1 } true;
    $return := $r12417;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4883($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var r52423 : ref;    
var r12419 : ref;    
var r42422 : ref;    
var r32421 : ref;    
var r02418 : ref;    
var r22420 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assume $heap[$in_parameter__4,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Timer;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02418 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12419 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22420 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32421 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42422 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r52423 := $in_parameter__4;
    assert { :sourceloc "JmxReporter.java",397,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxTimer$$la$init$ra$$4870(r02418, r12419, r22420, r32421, r42422);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",397,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4901($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var r02424 : ref;    
var $l02428 : int;    
var r32427 : ref;    
var $r42430 : ref;    
var r12426 : ref;    
var $r72433 : ref;    
var $r82434 : ref;    
var r22425 : ref;    
var $r52431 : ref;    
var $r62432 : ref;    
var $d02429 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metered;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02424 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12426 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22425 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32427 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",327,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$AbstractBean$$la$init$ra$$4726(r02424, r22425);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",328,-1,-1,-1 } true;
    $heap := $heap[r02424,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648 := r12426];
    assert { :sourceloc "JmxReporter.java",329,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",329,-1,-1,-1 } r32427 != $null;
    call $l02428, $exception := long$java.util.concurrent.TimeUnit$toSeconds$1929(r32427, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",329,-1,-1,-1 } true;
    $d02429 := $l02428;
    assert { :sourceloc "JmxReporter.java",329,-1,-1,-1 } true;
    $heap := $heap[r02424,double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0 := $d02429];
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.StringBuilder);
    $r42430 := $fakelocal_0;
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r42430);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    call $r52431, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r42430, $StringConst80);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    call $r62432, $exception := java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$calculateRateUnit$4908(r02424, r32427);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } $r52431 != $null;
    call $r72433, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r52431, $r62432);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } $r72433 != $null;
    call $r82434, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r72433);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",330,-1,-1,-1 } true;
    $heap := $heap[r02424,java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$rateUnit649 := $r82434];
    assert { :sourceloc "JmxReporter.java",331,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.JmxReporter$JmxMeter$getCount$4902($this:ref) returns ($return:int, $exception:ref){
    
var r02435 : ref;    
var $l02437 : int;    
var $r12436 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02435 := $this;
    assert { :sourceloc "JmxReporter.java",335,-1,-1,-1 } true;
    $r12436 := $heap[r02435,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648];
    assert { :sourceloc "JmxReporter.java",335,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",335,-1,-1,-1 } $r12436 != $null;
    call $l02437, $exception := long$com.codahale.metrics.Metered$getCount$2681($r12436);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",335,-1,-1,-1 } true;
    $return := $l02437;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxMeter$getMeanRate$4903($this:ref) returns ($return:int, $exception:ref){
    
var r02438 : ref;    
var $d22442 : int;    
var $d02440 : int;    
var $r12439 : ref;    
var $d12441 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02438 := $this;
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } true;
    $r12439 := $heap[r02438,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648];
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } $r12439 != $null;
    call $d02440, $exception := double$com.codahale.metrics.Metered$getMeanRate$2684($r12439);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } true;
    $d12441 := $heap[r02438,double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0];
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } true;
    $d22442 := $realOp32086($d02440, $d12441);
    assert { :sourceloc "JmxReporter.java",340,-1,-1,-1 } true;
    $return := $d22442;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxMeter$getOneMinuteRate$4904($this:ref) returns ($return:int, $exception:ref){
    
var $d02445 : int;    
var $r12444 : ref;    
var r02443 : ref;    
var $d22447 : int;    
var $d12446 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02443 := $this;
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } true;
    $r12444 := $heap[r02443,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648];
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } $r12444 != $null;
    call $d02445, $exception := double$com.codahale.metrics.Metered$getOneMinuteRate$2685($r12444);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } true;
    $d12446 := $heap[r02443,double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0];
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } true;
    $d22447 := $realOp32086($d02445, $d12446);
    assert { :sourceloc "JmxReporter.java",345,-1,-1,-1 } true;
    $return := $d22447;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxMeter$getFiveMinuteRate$4905($this:ref) returns ($return:int, $exception:ref){
    
var $r12449 : ref;    
var $d22452 : int;    
var $d12451 : int;    
var r02448 : ref;    
var $d02450 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02448 := $this;
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } true;
    $r12449 := $heap[r02448,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648];
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } $r12449 != $null;
    call $d02450, $exception := double$com.codahale.metrics.Metered$getFiveMinuteRate$2683($r12449);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } true;
    $d12451 := $heap[r02448,double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0];
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } true;
    $d22452 := $realOp32086($d02450, $d12451);
    assert { :sourceloc "JmxReporter.java",350,-1,-1,-1 } true;
    $return := $d22452;
    return;
}


implementation double$com.codahale.metrics.JmxReporter$JmxMeter$getFifteenMinuteRate$4906($this:ref) returns ($return:int, $exception:ref){
    
var $d12456 : int;    
var $d22457 : int;    
var $d02455 : int;    
var $r12454 : ref;    
var r02453 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02453 := $this;
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } true;
    $r12454 := $heap[r02453,com.codahale.metrics.Metered$com.codahale.metrics.JmxReporter$JmxMeter$metric648];
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } $r12454 != $null;
    call $d02455, $exception := double$com.codahale.metrics.Metered$getFifteenMinuteRate$2682($r12454);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } true;
    $d12456 := $heap[r02453,double$com.codahale.metrics.JmxReporter$JmxMeter$rateFactor0];
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } true;
    $d22457 := $realOp32086($d02455, $d12456);
    assert { :sourceloc "JmxReporter.java",355,-1,-1,-1 } true;
    $return := $d22457;
    return;
}


implementation java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$getRateUnit$4907($this:ref) returns ($return:ref, $exception:ref){
    
var r02458 : ref;    
var $r12459 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02458 := $this;
    assert { :sourceloc "JmxReporter.java",360,-1,-1,-1 } true;
    $r12459 := $heap[r02458,java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$rateUnit649];
    assert { :sourceloc "JmxReporter.java",360,-1,-1,-1 } true;
    $return := $r12459;
    return;
}


implementation java.lang.String$com.codahale.metrics.JmxReporter$JmxMeter$calculateRateUnit$4908($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02469 : ref;    
var r22464 : ref;    
var r12460 : ref;    
var $r42462 : ref;    
var $i02466 : int;    
var $r52468 : ref;    
var $r32461 : ref;    
var $i12467 : int;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02469 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12460 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",364,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",364,-1,-1,-1 } r12460 != $null;
    call $r32461, $exception := java.lang.String$java.lang.Enum$toString$1942(r12460);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",364,-1,-1,-1 } true;
    $r42462 := java.util.Locale$java.util.Locale$US331;
    assert { :sourceloc "JmxReporter.java",364,-1,-1,-1 } true;
    assert { :sourceloc "JmxReporter.java",364,-1,-1,-1 } $r32461 != $null;
    call r22464, $exception := java.lang.String$java.lang.String$toLowerCase$119($r32461, $r42462);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",365,-1,-1,-1 } true;
    $i02466 := $stringSizeHeap[r22464];
    assert { :sourceloc "JmxReporter.java",365,-1,-1,-1 } true;
    $i12467 := $i02466 - 1;
    assert { :sourceloc "JmxReporter.java",365,-1,-1,-1 } true;
    call $r52468, $exception := java.lang.String$java.lang.String$substring$108(r22464, 0, $i12467);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",365,-1,-1,-1 } true;
    $return := $r52468;
    return;
}


implementation void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4909($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref) returns ($exception:ref){
    
var r32473 : ref;    
var r12471 : ref;    
var r22472 : ref;    
var r02470 : ref;    
var r42474 : ref;
    assume { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metered;
    assume $heap[$in_parameter__2,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__3,$type] <: com.codahale.metrics.JmxReporter$1;
    assume $heap[$in_parameter__1,$type] <: javax.management.ObjectName;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r02470 := $this;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r12471 := $in_parameter__0;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r22472 := $in_parameter__1;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r32473 := $in_parameter__2;
    assert { :sourceloc "JmxReporter.java",-1,-1,-1,-1 } true;
    r42474 := $in_parameter__3;
    assert { :sourceloc "JmxReporter.java",321,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JmxReporter$JmxMeter$$la$init$ra$$4901(r02470, r12471, r22472, r32473);
    if ($exception != $null) {
    }
    assert { :sourceloc "JmxReporter.java",321,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JvmAttributeGaugeSet$1$$la$init$ra$$4974($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02475 : ref;    
var r12476 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.JvmAttributeGaugeSet;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02475 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r12476 := $in_parameter__0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    $heap := $heap[r02475,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$1$this$0653 := r12476];
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02475);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$1$getValue$4975($this:ref) returns ($return:ref, $exception:ref){
    
var r02477 : ref;    
var $r12478 : ref;    
var $r32480 : ref;    
var $r22479 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02477 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",37,-1,-1,-1 } true;
    $r12478 := $heap[r02477,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$1$this$0653];
    assert { :sourceloc "JvmAttributeGaugeSet.java",37,-1,-1,-1 } true;
    call $r22479, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r12478);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",37,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",37,-1,-1,-1 } $r22479 != $null;
    call $r32480, $exception := java.lang.String$java.lang.management.RuntimeMXBean$getName$2193($r22479);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",37,-1,-1,-1 } true;
    $return := $r32480;
    return;
}


implementation java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$1$getValue$4976($this:ref) returns ($return:ref, $exception:ref){
    
var $r12482 : ref;    
var r02481 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02481 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    call $r12482, $exception := java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$1$getValue$4975(r02481);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    $return := $r12482;
    return;
}


implementation void$com.codahale.metrics.JvmAttributeGaugeSet$$la$init$ra$$4977($this:ref) returns ($exception:ref){
    
var $r12484 : ref;    
var r02483 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02483 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",20,-1,-1,-1 } true;
    call $r12484, $exception := java.lang.management.RuntimeMXBean$java.lang.management.ManagementFactory$getRuntimeMXBean$2109();
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",20,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JvmAttributeGaugeSet$$la$init$ra$$4978(r02483, $r12484);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",21,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.JvmAttributeGaugeSet$$la$init$ra$$4978($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02485 : ref;    
var r12486 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.management.RuntimeMXBean;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02485 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r12486 := $in_parameter__0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",26,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02485);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",27,-1,-1,-1 } true;
    $heap := $heap[r02485,java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$runtime654 := r12486];
    assert { :sourceloc "JvmAttributeGaugeSet.java",28,-1,-1,-1 } true;
    return;
}


implementation java.util.Map$com.codahale.metrics.JvmAttributeGaugeSet$getMetrics$4979($this:ref) returns ($return:ref, $exception:ref){
    
var $r92499 : ref;    
var $fakelocal_5 : ref;    
var $fakelocal_3 : ref;    
var r02490 : ref;    
var $r72496 : ref;    
var $fakelocal_4 : ref;    
var $fakelocal_0 : ref;    
var $fakelocal_6 : ref;    
var $r32489 : ref;    
var $r52493 : ref;    
var $fakelocal_2 : ref;    
var $fakelocal_1 : ref;    
var r12488 : ref;    
var $r22487 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.util.Map;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02490 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",32,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.HashMap);
    $r22487 := $fakelocal_0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",32,-1,-1,-1 } true;
    call $exception := void$java.util.HashMap$$la$init$ra$$4989($r22487);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",32,-1,-1,-1 } true;
    r12488 := $r22487;
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.JvmAttributeGaugeSet$1);
    $r32489 := $fakelocal_1;
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JvmAttributeGaugeSet$1$$la$init$ra$$4974($r32489, r02490);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",34,-1,-1,-1 } true;
    call $fakelocal_2, $exception := java.lang.Object$java.util.Map$put$1161(r12488, $StringConst77, $r32489);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    call $fakelocal_3 := $new(com.codahale.metrics.JvmAttributeGaugeSet$2);
    $r52493 := $fakelocal_3;
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JvmAttributeGaugeSet$2$$la$init$ra$$4981($r52493, r02490);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    call $fakelocal_4, $exception := java.lang.Object$java.util.Map$put$1161(r12488, $StringConst81, $r52493);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    call $fakelocal_5 := $new(com.codahale.metrics.JvmAttributeGaugeSet$3);
    $r72496 := $fakelocal_5;
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.JvmAttributeGaugeSet$3$$la$init$ra$$4984($r72496, r02490);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    call $fakelocal_6, $exception := java.lang.Object$java.util.Map$put$1161(r12488, $StringConst82, $r72496);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",60,-1,-1,-1 } true;
    call $r92499, $exception := java.util.Map$java.util.Collections$unmodifiableMap$4760(r12488);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",60,-1,-1,-1 } true;
    $return := $r92499;
    return;
}


implementation java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02500 : ref;    
var $r12501 : ref;
    assume $heap[$return,$type] <: java.lang.management.RuntimeMXBean;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.JvmAttributeGaugeSet;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02500 := $in_parameter__0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",13,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",13,-1,-1,-1 } r02500 != $null;
    $r12501 := $heap[r02500,java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$runtime654];
    assert { :sourceloc "JvmAttributeGaugeSet.java",13,-1,-1,-1 } true;
    $return := $r12501;
    return;
}


implementation void$com.codahale.metrics.JvmAttributeGaugeSet$2$$la$init$ra$$4981($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12503 : ref;    
var r02502 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.JvmAttributeGaugeSet;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02502 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r12503 := $in_parameter__0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    $heap := $heap[r02502,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655 := r12503];
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02502);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$2$getValue$4982($this:ref) returns ($return:ref, $exception:ref){
    
var $r22506 : ref;    
var $r142522 : ref;    
var $r12504 : ref;    
var r02505 : ref;    
var $r32507 : ref;    
var $r72514 : ref;    
var $r52511 : ref;    
var $r102518 : ref;    
var $r122520 : ref;    
var $r152524 : ref;    
var $r132523 : ref;    
var $r62512 : ref;    
var $r42510 : ref;    
var $r82515 : ref;    
var $fakelocal_0 : ref;    
var $r112519 : ref;    
var $r92516 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02505 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $r32507 := java.util.Locale$java.util.Locale$US331;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 4];
    $r12504 := $fakelocal_0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $r22506 := $heap[r02505,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $r42510, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r22506);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } $r42510 != $null;
    call $r52511, $exception := java.lang.String$java.lang.management.RuntimeMXBean$getVmVendor$2195($r42510);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } 0 < $arrSizeHeap[$r12504] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r12504 := $refArrHeap[$r12504][0 := $r52511]];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $r62512 := $heap[r02505,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $r72514, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r62512);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } $r72514 != $null;
    call $r82515, $exception := java.lang.String$java.lang.management.RuntimeMXBean$getVmName$2194($r72514);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } 1 < $arrSizeHeap[$r12504] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r12504 := $refArrHeap[$r12504][1 := $r82515]];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $r92516 := $heap[r02505,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $r102518, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r92516);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } $r102518 != $null;
    call $r112519, $exception := java.lang.String$java.lang.management.RuntimeMXBean$getVmVersion$2196($r102518);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } 2 < $arrSizeHeap[$r12504] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r12504 := $refArrHeap[$r12504][2 := $r112519]];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $r122520 := $heap[r02505,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$2$this$0655];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $r142522, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r122520);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } $r142522 != $null;
    call $r132523, $exception := java.lang.String$java.lang.management.RuntimeMXBean$getSpecVersion$2199($r142522);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } 3 < $arrSizeHeap[$r12504] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r12504 := $refArrHeap[$r12504][3 := $r132523]];
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    call $r152524, $exception := java.lang.String$java.lang.String$format$127($r32507, $StringConst83, $r12504);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",44,-1,-1,-1 } true;
    $return := $r152524;
    return;
}


implementation java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$2$getValue$4983($this:ref) returns ($return:ref, $exception:ref){
    
var $r12526 : ref;    
var r02525 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02525 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    call $r12526, $exception := java.lang.String$com.codahale.metrics.JvmAttributeGaugeSet$2$getValue$4982(r02525);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",41,-1,-1,-1 } true;
    $return := $r12526;
    return;
}


implementation void$com.codahale.metrics.JvmAttributeGaugeSet$3$$la$init$ra$$4984($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02527 : ref;    
var r12528 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.JvmAttributeGaugeSet;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02527 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r12528 := $in_parameter__0;
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    $heap := $heap[r02527,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$3$this$0656 := r12528];
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02527);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    return;
}


implementation java.lang.Long$com.codahale.metrics.JvmAttributeGaugeSet$3$getValue$4985($this:ref) returns ($return:ref, $exception:ref){
    
var $r32533 : ref;    
var r02529 : ref;    
var $l02532 : int;    
var $r12530 : ref;    
var $r22531 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Long;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02529 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } true;
    $r12530 := $heap[r02529,com.codahale.metrics.JvmAttributeGaugeSet$com.codahale.metrics.JvmAttributeGaugeSet$3$this$0656];
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } true;
    call $r22531, $exception := java.lang.management.RuntimeMXBean$com.codahale.metrics.JvmAttributeGaugeSet$access$000$4980($r12530);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } true;
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } $r22531 != $null;
    call $l02532, $exception := long$java.lang.management.RuntimeMXBean$getUptime$2206($r22531);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } true;
    call $r32533, $exception := java.lang.Long$java.lang.Long$valueOf$878($l02532);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",56,-1,-1,-1 } true;
    $return := $r32533;
    return;
}


implementation java.lang.Object$com.codahale.metrics.JvmAttributeGaugeSet$3$getValue$4986($this:ref) returns ($return:ref, $exception:ref){
    
var $r12535 : ref;    
var r02534 : ref;
    assume { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "JvmAttributeGaugeSet.java",-1,-1,-1,-1 } true;
    r02534 := $this;
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    call $r12535, $exception := java.lang.Long$com.codahale.metrics.JvmAttributeGaugeSet$3$getValue$4985(r02534);
    if ($exception != $null) {
    }
    assert { :sourceloc "JvmAttributeGaugeSet.java",53,-1,-1,-1 } true;
    $return := $r12535;
    return;
}


implementation void$com.codahale.metrics.MetricFilter$1$$la$init$ra$$5359($this:ref) returns ($exception:ref){
    
var r02536 : ref;
    assume { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } true;
    r02536 := $this;
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02536);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricFilter.java",10,-1,-1,-1 } true;
    return;
}


implementation boolean$com.codahale.metrics.MetricFilter$1$matches$5360($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($return:int, $exception:ref){
    
var r12538 : ref;    
var r02537 : ref;    
var r22539 : ref;
    assume { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } true;
    r02537 := $this;
    assert { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } true;
    r12538 := $in_parameter__0;
    assert { :sourceloc "MetricFilter.java",-1,-1,-1,-1 } true;
    r22539 := $in_parameter__1;
    assert { :sourceloc "MetricFilter.java",13,-1,-1,-1 } true;
    $return := 1;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$MetricBuilder$1$$la$init$ra$$5361($this:ref) returns ($exception:ref){
    
var r02540 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02540 := $this;
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02540);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Counter$com.codahale.metrics.MetricRegistry$MetricBuilder$1$newMetric$5362($this:ref) returns ($return:ref, $exception:ref){
    
var $r12541 : ref;    
var r02542 : ref;    
var $fakelocal_0 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02542 := $this;
    assert { :sourceloc "MetricRegistry.java",400,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Counter);
    $r12541 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",400,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Counter$$la$init$ra$$2842($r12541);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",400,-1,-1,-1 } true;
    $return := $r12541;
    return;
}


implementation boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$1$isInstance$5363($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var $r22544 : ref;    
var $z02545 : int;    
var r02546 : ref;    
var r12543 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02546 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r12543 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",405,-1,-1,-1 } true;
    $r22544 := CC$com$_$codahale$_$metrics$_$Counter;
    assert { :sourceloc "MetricRegistry.java",405,-1,-1,-1 } true;
    call $z02545, $exception := boolean$java.lang.Class$isInstance$451($r22544, r12543);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",405,-1,-1,-1 } true;
    $return := $z02545;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$1$newMetric$5364($this:ref) returns ($return:ref, $exception:ref){
    
var r02547 : ref;    
var $r12548 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02547 := $this;
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    call $r12548, $exception := com.codahale.metrics.Counter$com.codahale.metrics.MetricRegistry$MetricBuilder$1$newMetric$5362(r02547);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",397,-1,-1,-1 } true;
    $return := $r12548;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$MetricBuilder$2$$la$init$ra$$5365($this:ref) returns ($exception:ref){
    
var r02549 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02549 := $this;
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02549);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Histogram$com.codahale.metrics.MetricRegistry$MetricBuilder$2$newMetric$5366($this:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var $r12550 : ref;    
var $r22551 : ref;    
var $fakelocal_1 : ref;    
var r02552 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Histogram;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02552 := $this;
    assert { :sourceloc "MetricRegistry.java",412,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Histogram);
    $r12550 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",412,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.ExponentiallyDecayingReservoir);
    $r22551 := $fakelocal_1;
    assert { :sourceloc "MetricRegistry.java",412,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ExponentiallyDecayingReservoir$$la$init$ra$$4116($r22551);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",412,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Histogram$$la$init$ra$$2647($r12550, $r22551);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",412,-1,-1,-1 } true;
    $return := $r12550;
    return;
}


implementation boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$2$isInstance$5367($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var $z02555 : int;    
var $r22554 : ref;    
var r12553 : ref;    
var r02556 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02556 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r12553 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",417,-1,-1,-1 } true;
    $r22554 := CC$com$_$codahale$_$metrics$_$Histogram;
    assert { :sourceloc "MetricRegistry.java",417,-1,-1,-1 } true;
    call $z02555, $exception := boolean$java.lang.Class$isInstance$451($r22554, r12553);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",417,-1,-1,-1 } true;
    $return := $z02555;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$2$newMetric$5368($this:ref) returns ($return:ref, $exception:ref){
    
var $r12558 : ref;    
var r02557 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02557 := $this;
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    call $r12558, $exception := com.codahale.metrics.Histogram$com.codahale.metrics.MetricRegistry$MetricBuilder$2$newMetric$5366(r02557);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",409,-1,-1,-1 } true;
    $return := $r12558;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$MetricBuilder$3$$la$init$ra$$5369($this:ref) returns ($exception:ref){
    
var r02559 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02559 := $this;
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02559);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Meter$com.codahale.metrics.MetricRegistry$MetricBuilder$3$newMetric$5370($this:ref) returns ($return:ref, $exception:ref){
    
var $r12560 : ref;    
var r02561 : ref;    
var $fakelocal_0 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Meter;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02561 := $this;
    assert { :sourceloc "MetricRegistry.java",424,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Meter);
    $r12560 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",424,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Meter$$la$init$ra$$2631($r12560);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",424,-1,-1,-1 } true;
    $return := $r12560;
    return;
}


implementation boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$3$isInstance$5371($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var $z02564 : int;    
var r02565 : ref;    
var $r22563 : ref;    
var r12562 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02565 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r12562 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",429,-1,-1,-1 } true;
    $r22563 := CC$com$_$codahale$_$metrics$_$Meter;
    assert { :sourceloc "MetricRegistry.java",429,-1,-1,-1 } true;
    call $z02564, $exception := boolean$java.lang.Class$isInstance$451($r22563, r12562);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",429,-1,-1,-1 } true;
    $return := $z02564;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$3$newMetric$5372($this:ref) returns ($return:ref, $exception:ref){
    
var r02566 : ref;    
var $r12567 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02566 := $this;
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    call $r12567, $exception := com.codahale.metrics.Meter$com.codahale.metrics.MetricRegistry$MetricBuilder$3$newMetric$5370(r02566);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",421,-1,-1,-1 } true;
    $return := $r12567;
    return;
}


implementation void$com.codahale.metrics.MetricRegistry$MetricBuilder$4$$la$init$ra$$5373($this:ref) returns ($exception:ref){
    
var r02568 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02568 := $this;
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02568);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Timer$com.codahale.metrics.MetricRegistry$MetricBuilder$4$newMetric$5374($this:ref) returns ($return:ref, $exception:ref){
    
var $r12569 : ref;    
var $fakelocal_0 : ref;    
var r02570 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Timer;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02570 := $this;
    assert { :sourceloc "MetricRegistry.java",436,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Timer);
    $r12569 := $fakelocal_0;
    assert { :sourceloc "MetricRegistry.java",436,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Timer$$la$init$ra$$2652($r12569);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",436,-1,-1,-1 } true;
    $return := $r12569;
    return;
}


implementation boolean$com.codahale.metrics.MetricRegistry$MetricBuilder$4$isInstance$5375($this:ref, $in_parameter__0:ref) returns ($return:int, $exception:ref){
    
var r12571 : ref;    
var r02574 : ref;    
var $z02573 : int;    
var $r22572 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02574 := $this;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r12571 := $in_parameter__0;
    assert { :sourceloc "MetricRegistry.java",441,-1,-1,-1 } true;
    $r22572 := CC$com$_$codahale$_$metrics$_$Timer;
    assert { :sourceloc "MetricRegistry.java",441,-1,-1,-1 } true;
    call $z02573, $exception := boolean$java.lang.Class$isInstance$451($r22572, r12571);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",441,-1,-1,-1 } true;
    $return := $z02573;
    return;
}


implementation com.codahale.metrics.Metric$com.codahale.metrics.MetricRegistry$MetricBuilder$4$newMetric$5376($this:ref) returns ($return:ref, $exception:ref){
    
var r02575 : ref;    
var $r12576 : ref;
    assume { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Metric;
    assert { :sourceloc "MetricRegistry.java",-1,-1,-1,-1 } true;
    r02575 := $this;
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    call $r12576, $exception := com.codahale.metrics.Timer$com.codahale.metrics.MetricRegistry$MetricBuilder$4$newMetric$5374(r02575);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistry.java",433,-1,-1,-1 } true;
    $return := $r12576;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$$la$init$ra$$5596($this:ref) returns ($exception:ref){
    
var r02577 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02577 := $this;
    assert { :sourceloc "MetricRegistryListener.java",12,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02577);
    if ($exception != $null) {
    }
    assert { :sourceloc "MetricRegistryListener.java",12,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onGaugeAdded$5597($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22580 : ref;    
var r12579 : ref;    
var r02578 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Gauge;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02578 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12579 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r22580 := $in_parameter__1;
    assert { :sourceloc "MetricRegistryListener.java",15,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onGaugeRemoved$5598($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02581 : ref;    
var r12582 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02581 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12582 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",19,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onCounterAdded$5599($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r12584 : ref;    
var r02583 : ref;    
var r22585 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02583 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12584 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r22585 := $in_parameter__1;
    assert { :sourceloc "MetricRegistryListener.java",23,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onCounterRemoved$5600($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02586 : ref;    
var r12587 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02586 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12587 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",27,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onHistogramAdded$5601($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r02588 : ref;    
var r12589 : ref;    
var r22590 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Histogram;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02588 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12589 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r22590 := $in_parameter__1;
    assert { :sourceloc "MetricRegistryListener.java",31,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onHistogramRemoved$5602($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12592 : ref;    
var r02591 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02591 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12592 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",35,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onMeterAdded$5603($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22595 : ref;    
var r12594 : ref;    
var r02593 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Meter;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02593 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12594 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r22595 := $in_parameter__1;
    assert { :sourceloc "MetricRegistryListener.java",39,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onMeterRemoved$5604($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12597 : ref;    
var r02596 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02596 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12597 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",43,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onTimerAdded$5605($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r12599 : ref;    
var r02598 : ref;    
var r22600 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Timer;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02598 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12599 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r22600 := $in_parameter__1;
    assert { :sourceloc "MetricRegistryListener.java",47,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.MetricRegistryListener$Base$onTimerRemoved$5606($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12602 : ref;    
var r02601 : ref;
    assume { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r02601 := $this;
    assert { :sourceloc "MetricRegistryListener.java",-1,-1,-1,-1 } true;
    r12602 := $in_parameter__0;
    assert { :sourceloc "MetricRegistryListener.java",51,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.RatioGauge$Ratio$com.codahale.metrics.RatioGauge$Ratio$of$5607($in_parameter__0:int, $in_parameter__1:int) returns ($return:ref, $exception:ref){
    
var $r02603 : ref;    
var $fakelocal_0 : ref;    
var d12605 : int;    
var d02604 : int;
    assume $heap[$return,$type] <: com.codahale.metrics.RatioGauge$Ratio;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    d02604 := $in_parameter__0;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    d12605 := $in_parameter__1;
    assert { :sourceloc "RatioGauge.java",24,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.RatioGauge$Ratio);
    $r02603 := $fakelocal_0;
    assert { :sourceloc "RatioGauge.java",24,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.RatioGauge$Ratio$$la$init$ra$$5608($r02603, d02604, d12605);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",24,-1,-1,-1 } true;
    $return := $r02603;
    return;
}


implementation void$com.codahale.metrics.RatioGauge$Ratio$$la$init$ra$$5608($this:ref, $in_parameter__0:int, $in_parameter__1:int) returns ($exception:ref){
    
var d12608 : int;    
var d02607 : int;    
var r02606 : ref;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02606 := $this;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    d02607 := $in_parameter__0;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    d12608 := $in_parameter__1;
    assert { :sourceloc "RatioGauge.java",30,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02606);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",31,-1,-1,-1 } true;
    $heap := $heap[r02606,double$com.codahale.metrics.RatioGauge$Ratio$numerator0 := d02607];
    assert { :sourceloc "RatioGauge.java",32,-1,-1,-1 } true;
    $heap := $heap[r02606,double$com.codahale.metrics.RatioGauge$Ratio$denominator0 := d12608];
    assert { :sourceloc "RatioGauge.java",33,-1,-1,-1 } true;
    return;
}


implementation double$com.codahale.metrics.RatioGauge$Ratio$getValue$5609($this:ref) returns ($return:int, $exception:ref){
    
var $b02614 : int;    
var $z02611 : int;    
var d02610 : int;    
var r02609 : ref;    
var $d22616 : int;    
var $d12615 : int;    
var $z12612 : int;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02609 := $this;
    assert { :sourceloc "RatioGauge.java",42,-1,-1,-1 } true;
    d02610 := $heap[r02609,double$com.codahale.metrics.RatioGauge$Ratio$denominator0];
    assert { :sourceloc "RatioGauge.java",43,-1,-1,-1 } true;
    call $z02611, $exception := boolean$java.lang.Double$isNaN$1059(d02610);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",43,-1,-1,-1 } true;
    if ($z02611 != 0) {
        assert { :sourceloc "RatioGauge.java",43,-1,-1,-1 } { :comment "thenblock" } true;
        goto block277;
    } else {
        assert { :sourceloc "RatioGauge.java",43,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } true;
    call $z12612, $exception := boolean$java.lang.Double$isInfinite$1060(d02610);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } true;
    if ($z12612 != 0) {
        assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } { :comment "thenblock" } true;
        goto block277;
    } else {
        assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } true;
    $b02614 := $cmpInt(d02610, $DoubleConst1);
    assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } true;
    if ($b02614 != 0) {
        assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } { :comment "thenblock" } true;
        goto block278;
    } else {
        assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } { :comment "elseblock" } true;
    }
  block277:
    assert { :sourceloc "RatioGauge.java",44,-1,-1,-1 } true;
    $return := $DoubleConst12;
    return;
  block278:
    assert { :sourceloc "RatioGauge.java",46,-1,-1,-1 } true;
    $d12615 := $heap[r02609,double$com.codahale.metrics.RatioGauge$Ratio$numerator0];
    assert { :sourceloc "RatioGauge.java",46,-1,-1,-1 } true;
    $d22616 := $realOp32241($d12615, d02610);
    assert { :sourceloc "RatioGauge.java",46,-1,-1,-1 } true;
    $return := $d22616;
    return;
}


implementation java.lang.String$com.codahale.metrics.RatioGauge$Ratio$toString$5610($this:ref) returns ($return:ref, $exception:ref){
    
var $d12622 : int;    
var $r22620 : ref;    
var $d02619 : int;    
var $r52624 : ref;    
var $r32621 : ref;    
var r02618 : ref;    
var $r12617 : ref;    
var $fakelocal_0 : ref;    
var $r42623 : ref;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02618 := $this;
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.StringBuilder);
    $r12617 := $fakelocal_0;
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r12617);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    $d02619 := $heap[r02618,double$com.codahale.metrics.RatioGauge$Ratio$numerator0];
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    call $r22620, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2769($r12617, $d02619);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } $r22620 != $null;
    call $r32621, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r22620, $StringConst84);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    $d12622 := $heap[r02618,double$com.codahale.metrics.RatioGauge$Ratio$denominator0];
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } $r32621 != $null;
    call $r42623, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2769($r32621, $d12622);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } $r42623 != $null;
    call $r52624, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r42623);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",51,-1,-1,-1 } true;
    $return := $r52624;
    return;
}


implementation void$com.codahale.metrics.RatioGauge$$la$init$ra$$5611($this:ref) returns ($exception:ref){
    
var r02625 : ref;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02625 := $this;
    assert { :sourceloc "RatioGauge.java",11,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02625);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",15,-1,-1,-1 } true;
    return;
}


implementation java.lang.Double$com.codahale.metrics.RatioGauge$getValue$5613($this:ref) returns ($return:ref, $exception:ref){
    
var $r22629 : ref;    
var $d02628 : int;    
var $r12627 : ref;    
var r02626 : ref;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Double;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02626 := $this;
    assert { :sourceloc "RatioGauge.java",64,-1,-1,-1 } true;
    call $r12627, $exception := com.codahale.metrics.RatioGauge$Ratio$com.codahale.metrics.RatioGauge$getRatio$5612(r02626);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",64,-1,-1,-1 } true;
    assert { :sourceloc "RatioGauge.java",64,-1,-1,-1 } $r12627 != $null;
    call $d02628, $exception := double$com.codahale.metrics.RatioGauge$Ratio$getValue$5609($r12627);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",64,-1,-1,-1 } true;
    call $r22629, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d02628);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",64,-1,-1,-1 } true;
    $return := $r22629;
    return;
}


implementation java.lang.Object$com.codahale.metrics.RatioGauge$getValue$5614($this:ref) returns ($return:ref, $exception:ref){
    
var $r12631 : ref;    
var r02630 : ref;
    assume { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "RatioGauge.java",-1,-1,-1,-1 } true;
    r02630 := $this;
    assert { :sourceloc "RatioGauge.java",11,-1,-1,-1 } true;
    call $r12631, $exception := java.lang.Double$com.codahale.metrics.RatioGauge$getValue$5613(r02630);
    if ($exception != $null) {
    }
    assert { :sourceloc "RatioGauge.java",11,-1,-1,-1 } true;
    $return := $r12631;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$1$$la$init$ra$$5615($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r02632 : ref;    
var r12633 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.ScheduledReporter;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r02632 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r12633 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    $heap := $heap[r02632,com.codahale.metrics.ScheduledReporter$com.codahale.metrics.ScheduledReporter$1$this$0743 := r12633];
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02632);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",83,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$1$run$5616($this:ref) returns ($exception:ref){
    
var $r12635 : ref;    
var r02634 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r02634 := $this;
    assert { :sourceloc "ScheduledReporter.java",86,-1,-1,-1 } true;
    $r12635 := $heap[r02634,com.codahale.metrics.ScheduledReporter$com.codahale.metrics.ScheduledReporter$1$this$0743];
    assert { :sourceloc "ScheduledReporter.java",86,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",86,-1,-1,-1 } $r12635 != $null;
    call $exception := void$com.codahale.metrics.ScheduledReporter$report$2443($r12635);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",87,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5617($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var $r62642 : ref;    
var $r32637 : ref;    
var r02636 : ref;    
var r22639 : ref;    
var $fakelocal_0 : ref;    
var $r42640 : ref;    
var $r82645 : ref;    
var $r92646 : ref;    
var $fakelocal_1 : ref;    
var $r102647 : ref;    
var $r52641 : ref;    
var r12644 : ref;    
var $r72643 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r02636 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r12644 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",29,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02636);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",26,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.atomic.AtomicInteger);
    $r32637 := $fakelocal_0;
    assert { :sourceloc "ScheduledReporter.java",26,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicInteger$$la$init$ra$$5300($r32637, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",26,-1,-1,-1 } true;
    $heap := $heap[r02636,java.util.concurrent.atomic.AtomicInteger$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$threadNumber745 := $r32637];
    assert { :sourceloc "ScheduledReporter.java",30,-1,-1,-1 } true;
    call r22639, $exception := java.lang.SecurityManager$java.lang.System$getSecurityManager$2304();
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } true;
    if (r22639 == $null) {
        assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } { :comment "thenblock" } true;
        goto block279;
    } else {
        assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ScheduledReporter.java",33,-1,-1,-1 } true;
    call $r52641, $exception := java.lang.ThreadGroup$java.lang.SecurityManager$getThreadGroup$1488(r22639);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",33,-1,-1,-1 } true;
    goto block280;
  block279:
    assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } true;
    call $r42640, $exception := java.lang.Thread$java.lang.Thread$currentThread$1785();
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } $r42640 != $null;
    call $r52641, $exception := java.lang.ThreadGroup$java.lang.Thread$getThreadGroup$1819($r42640);
    if ($exception != $null) {
    }
  block280:
    assert { :sourceloc "ScheduledReporter.java",31,-1,-1,-1 } true;
    $heap := $heap[r02636,java.lang.ThreadGroup$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$group744 := $r52641];
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r62642 := $fakelocal_1;
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r62642);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    call $r72643, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r62642, $StringConst85);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } $r72643 != $null;
    call $r82645, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r72643, r12644);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } $r82645 != $null;
    call $r92646, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r82645, $StringConst86);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } $r92646 != $null;
    call $r102647, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r92646);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",32,-1,-1,-1 } true;
    $heap := $heap[r02636,java.lang.String$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$namePrefix746 := $r102647];
    assert { :sourceloc "ScheduledReporter.java",33,-1,-1,-1 } true;
    return;
}


implementation java.lang.Thread$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$newThread$5618($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02650 : ref;    
var r22660 : ref;    
var $i02657 : int;    
var $r102659 : ref;    
var $r32649 : ref;    
var $fakelocal_1 : ref;    
var $fakelocal_0 : ref;    
var $r62654 : ref;    
var $i12661 : int;    
var $r52653 : ref;    
var $r72655 : ref;    
var $r42652 : ref;    
var $r82656 : ref;    
var r12651 : ref;    
var $r92658 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.Runnable;
    assume $heap[$return,$type] <: java.lang.Thread;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r02650 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r12651 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.Thread);
    $r32649 := $fakelocal_0;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    $r52653 := $heap[r02650,java.lang.ThreadGroup$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$group744];
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.lang.StringBuilder);
    $r42652 := $fakelocal_1;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r42652);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    $r62654 := $heap[r02650,java.lang.String$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$namePrefix746];
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    call $r72655, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r42652, $r62654);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    $r82656 := $heap[r02650,java.util.concurrent.atomic.AtomicInteger$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$threadNumber745];
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } $r82656 != $null;
    call $i02657, $exception := int$java.util.concurrent.atomic.AtomicInteger$getAndIncrement$5308($r82656);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } $r72655 != $null;
    call $r92658, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2766($r72655, $i02657);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } $r92658 != $null;
    call $r102659, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r92658);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    call $exception := void$java.lang.Thread$$la$init$ra$$1800($r32649, $r52653, r12651, $r102659, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",37,-1,-1,-1 } true;
    r22660 := $r32649;
    assert { :sourceloc "ScheduledReporter.java",38,-1,-1,-1 } true;
    call $exception := void$java.lang.Thread$setDaemon$1827(r22660, 1);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",39,-1,-1,-1 } true;
    call $i12661, $exception := int$java.lang.Thread$getPriority$1816(r22660);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",39,-1,-1,-1 } true;
    if ($i12661 == 5) {
        assert { :sourceloc "ScheduledReporter.java",39,-1,-1,-1 } { :comment "thenblock" } true;
        goto block281;
    } else {
        assert { :sourceloc "ScheduledReporter.java",39,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "ScheduledReporter.java",40,-1,-1,-1 } true;
    call $exception := void$java.lang.Thread$setPriority$1815(r22660, 5);
    if ($exception != $null) {
    }
  block281:
    assert { :sourceloc "ScheduledReporter.java",42,-1,-1,-1 } true;
    $return := r22660;
    return;
}


implementation void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5619($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22664 : ref;    
var r02662 : ref;    
var r12663 : ref;
    assume { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.ScheduledReporter$1;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r02662 := $this;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r12663 := $in_parameter__0;
    assert { :sourceloc "ScheduledReporter.java",-1,-1,-1,-1 } true;
    r22664 := $in_parameter__1;
    assert { :sourceloc "ScheduledReporter.java",24,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$NamedThreadFactory$$la$init$ra$$5617(r02662, r12663);
    if ($exception != $null) {
    }
    assert { :sourceloc "ScheduledReporter.java",24,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.SharedMetricRegistries$$la$init$ra$$5778($this:ref) returns ($exception:ref){
    
var r02665 : ref;
    assume { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } true;
    r02665 := $this;
    assert { :sourceloc "SharedMetricRegistries.java",14,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02665);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",14,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.SharedMetricRegistries$clear$5779() returns ($exception:ref){
    
var $r02666 : ref;
    assert { :sourceloc "SharedMetricRegistries.java",17,-1,-1,-1 } true;
    $r02666 := java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;
    assert { :sourceloc "SharedMetricRegistries.java",17,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",17,-1,-1,-1 } $r02666 != $null;
    call $exception := void$java.util.Map$clear$1164($r02666);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",18,-1,-1,-1 } true;
    return;
}


implementation java.util.Set$com.codahale.metrics.SharedMetricRegistries$names$5780() returns ($return:ref, $exception:ref){
    
var $r12668 : ref;    
var $r02667 : ref;
    assume $heap[$return,$type] <: java.util.Set;
    assert { :sourceloc "SharedMetricRegistries.java",21,-1,-1,-1 } true;
    $r02667 := java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;
    assert { :sourceloc "SharedMetricRegistries.java",21,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",21,-1,-1,-1 } $r02667 != $null;
    call $r12668, $exception := java.util.Set$java.util.Map$keySet$1165($r02667);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",21,-1,-1,-1 } true;
    $return := $r12668;
    return;
}


implementation void$com.codahale.metrics.SharedMetricRegistries$remove$5781($in_parameter__0:ref) returns ($exception:ref){
    
var $r12670 : ref;    
var r02669 : ref;    
var $fakelocal_0 : ref;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } true;
    r02669 := $in_parameter__0;
    assert { :sourceloc "SharedMetricRegistries.java",25,-1,-1,-1 } true;
    $r12670 := java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;
    assert { :sourceloc "SharedMetricRegistries.java",25,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",25,-1,-1,-1 } $r12670 != $null;
    call $fakelocal_0, $exception := java.lang.Object$java.util.Map$remove$1162($r12670, r02669);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",26,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.MetricRegistry$com.codahale.metrics.SharedMetricRegistries$add$5782($in_parameter__0:ref, $in_parameter__1:ref) returns ($return:ref, $exception:ref){
    
var $r42676 : ref;    
var r02672 : ref;    
var r12673 : ref;    
var $r22674 : ref;    
var $r32675 : ref;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } true;
    r02672 := $in_parameter__0;
    assert { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } true;
    r12673 := $in_parameter__1;
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } true;
    $r22674 := java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } $r22674 != $null;
    call $r32675, $exception := java.lang.Object$java.util.concurrent.ConcurrentMap$putIfAbsent$2748($r22674, r02672, r12673);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } $heap[$r32675,$type] <: com.codahale.metrics.MetricRegistry;
    $r42676 := $r32675;
    assert { :sourceloc "SharedMetricRegistries.java",29,-1,-1,-1 } true;
    $return := $r42676;
    return;
}


implementation com.codahale.metrics.MetricRegistry$com.codahale.metrics.SharedMetricRegistries$getOrCreate$5783($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var r32684 : ref;    
var $r42678 : ref;    
var r12680 : ref;    
var $r52679 : ref;    
var $r62681 : ref;    
var r22682 : ref;    
var r02677 : ref;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$return,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "SharedMetricRegistries.java",-1,-1,-1,-1 } true;
    r02677 := $in_parameter__0;
    assert { :sourceloc "SharedMetricRegistries.java",33,-1,-1,-1 } true;
    $r42678 := java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778;
    assert { :sourceloc "SharedMetricRegistries.java",33,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",33,-1,-1,-1 } $r42678 != $null;
    call $r52679, $exception := java.lang.Object$java.util.Map$get$1160($r42678, r02677);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",33,-1,-1,-1 } true;
    assert { :sourceloc "SharedMetricRegistries.java",33,-1,-1,-1 } $heap[$r52679,$type] <: com.codahale.metrics.MetricRegistry;
    r12680 := $r52679;
    assert { :sourceloc "SharedMetricRegistries.java",34,-1,-1,-1 } true;
    if (r12680 != $null) {
        assert { :sourceloc "SharedMetricRegistries.java",34,-1,-1,-1 } { :comment "thenblock" } true;
        goto block282;
    } else {
        assert { :sourceloc "SharedMetricRegistries.java",34,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SharedMetricRegistries.java",35,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.MetricRegistry);
    $r62681 := $fakelocal_0;
    assert { :sourceloc "SharedMetricRegistries.java",35,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.MetricRegistry$$la$init$ra$$2555($r62681);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",35,-1,-1,-1 } true;
    r22682 := $r62681;
    assert { :sourceloc "SharedMetricRegistries.java",36,-1,-1,-1 } true;
    call r32684, $exception := com.codahale.metrics.MetricRegistry$com.codahale.metrics.SharedMetricRegistries$add$5782(r02677, r22682);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",37,-1,-1,-1 } true;
    if (r32684 != $null) {
        assert { :sourceloc "SharedMetricRegistries.java",37,-1,-1,-1 } { :comment "thenblock" } true;
        goto block283;
    } else {
        assert { :sourceloc "SharedMetricRegistries.java",37,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SharedMetricRegistries.java",38,-1,-1,-1 } true;
    $return := r22682;
    return;
  block283:
    assert { :sourceloc "SharedMetricRegistries.java",40,-1,-1,-1 } true;
    $return := r32684;
    return;
  block282:
    assert { :sourceloc "SharedMetricRegistries.java",42,-1,-1,-1 } true;
    $return := r12680;
    return;
}


implementation void$com.codahale.metrics.SharedMetricRegistries$$la$clinit$ra$$5784() returns ($exception:ref){
    
var $r02685 : ref;    
var $fakelocal_0 : ref;
    assert { :sourceloc "SharedMetricRegistries.java",11,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.ConcurrentHashMap);
    $r02685 := $fakelocal_0;
    assert { :sourceloc "SharedMetricRegistries.java",11,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.ConcurrentHashMap$$la$init$ra$$5501($r02685);
    if ($exception != $null) {
    }
    assert { :sourceloc "SharedMetricRegistries.java",11,-1,-1,-1 } true;
    java.util.concurrent.ConcurrentMap$com.codahale.metrics.SharedMetricRegistries$REGISTRIES778 := $r02685;
    assert { :sourceloc "SharedMetricRegistries.java",11,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$forRegistry$5785($in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var r02687 : ref;    
var $r12686 : ref;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02687 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",25,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Slf4jReporter$Builder);
    $r12686 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",25,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5802($r12686, r02687, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",25,-1,-1,-1 } true;
    $return := $r12686;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5786($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref) returns ($exception:ref){
    
var r32694 : ref;    
var r62690 : ref;    
var r12689 : ref;    
var r52692 : ref;    
var r02688 : ref;    
var r22693 : ref;    
var r42691 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__2,$type] <: org.slf4j.Marker;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__5,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__4,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__1,$type] <: org.slf4j.Logger;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02688 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12689 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22693 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r32694 := $in_parameter__2;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r42691 := $in_parameter__3;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r52692 := $in_parameter__4;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r62690 := $in_parameter__5;
    assert { :sourceloc "Slf4jReporter.java",124,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ScheduledReporter$$la$init$ra$$2440(r02688, r12689, $StringConst87, r62690, r42691, r52692);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",125,-1,-1,-1 } true;
    $heap := $heap[r02688,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779 := r22693];
    assert { :sourceloc "Slf4jReporter.java",126,-1,-1,-1 } true;
    $heap := $heap[r02688,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780 := r32694];
    assert { :sourceloc "Slf4jReporter.java",127,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$report$5787($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref) returns ($exception:ref){
    
var $r362739 : ref;    
var $r122713 : ref;    
var $r372740 : ref;    
var $r202726 : ref;    
var r402745 : ref;    
var $r342741 : ref;    
var $z12703 : int;    
var $z02699 : int;    
var $r272734 : ref;    
var r432748 : ref;    
var r392744 : ref;    
var r72717 : ref;    
var r32704 : ref;    
var $z42715 : int;    
var $r322735 : ref;    
var r52712 : ref;    
var $r232730 : ref;    
var r412746 : ref;    
var $r142720 : ref;    
var $r192723 : ref;    
var $r162722 : ref;    
var $r212725 : ref;    
var $z22707 : int;    
var $r282731 : ref;    
var $r172721 : ref;    
var $r242727 : ref;    
var $r112709 : ref;    
var $r352742 : ref;    
var $r152719 : ref;    
var $r102705 : ref;    
var r442749 : ref;    
var r22700 : ref;    
var r02718 : ref;    
var $r92701 : ref;    
var r12695 : ref;    
var $r132716 : ref;    
var $r252728 : ref;    
var r62698 : ref;    
var r382743 : ref;    
var r42708 : ref;    
var $r222729 : ref;    
var $z32711 : int;    
var $r312738 : ref;    
var $r302737 : ref;    
var $r82696 : ref;    
var $r332736 : ref;    
var $r292732 : ref;    
var r452750 : ref;    
var r422747 : ref;    
var $r262733 : ref;    
var $r182724 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__3,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__4,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__1,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__2,$type] <: java.util.SortedMap;
    assume $heap[$in_parameter__0,$type] <: java.util.SortedMap;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02718 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12695 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22700 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r32704 := $in_parameter__2;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r42708 := $in_parameter__3;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r52712 := $in_parameter__4;
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } r12695 != $null;
    call $r82696, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r12695);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } $r82696 != $null;
    call r62698, $exception := java.util.Iterator$java.util.Set$iterator$236($r82696);
    if ($exception != $null) {
    }
  block284:
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } r62698 != $null;
    call $z02699, $exception := boolean$java.util.Iterator$hasNext$1051(r62698);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } true;
    if ($z02699 == 0) {
        assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } { :comment "thenblock" } true;
        goto block285;
    } else {
        assert { :sourceloc "Slf4jReporter.java",135,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Slf4jReporter.java",141,-1,-1,-1 } true;
    call $r312738, $exception := java.lang.Object$java.util.Iterator$next$1052(r62698);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",141,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",141,-1,-1,-1 } $heap[$r312738,$type] <: java.util.Map$Entry;
    r72717 := $r312738;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } r72717 != $null;
    call $r362739, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r72717);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } $heap[$r362739,$type] <: java.lang.String;
    $r372740 := $r362739;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } true;
    call $r342741, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r72717);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } $heap[$r342741,$type] <: com.codahale.metrics.Gauge;
    $r352742 := $r342741;
    assert { :sourceloc "Slf4jReporter.java",136,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$logGauge$5792(r02718, $r372740, $r352742);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",137,-1,-1,-1 } true;
    goto block284;
  block285:
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } r22700 != $null;
    call $r92701, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r22700);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } $r92701 != $null;
    call r382743, $exception := java.util.Iterator$java.util.Set$iterator$236($r92701);
    if ($exception != $null) {
    }
  block286:
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } r382743 != $null;
    call $z12703, $exception := boolean$java.util.Iterator$hasNext$1051(r382743);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } true;
    if ($z12703 == 0) {
        assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } { :comment "thenblock" } true;
        goto block287;
    } else {
        assert { :sourceloc "Slf4jReporter.java",139,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Slf4jReporter.java",145,-1,-1,-1 } true;
    call $r262733, $exception := java.lang.Object$java.util.Iterator$next$1052(r382743);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",145,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",145,-1,-1,-1 } $heap[$r262733,$type] <: java.util.Map$Entry;
    r392744 := $r262733;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } r392744 != $null;
    call $r272734, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r392744);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } $heap[$r272734,$type] <: java.lang.String;
    $r322735 := $r272734;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } true;
    call $r332736, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r392744);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } $heap[$r332736,$type] <: com.codahale.metrics.Counter;
    $r302737 := $r332736;
    assert { :sourceloc "Slf4jReporter.java",140,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$logCounter$5791(r02718, $r322735, $r302737);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",141,-1,-1,-1 } true;
    goto block286;
  block287:
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } r32704 != $null;
    call $r102705, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r32704);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } $r102705 != $null;
    call r402745, $exception := java.util.Iterator$java.util.Set$iterator$236($r102705);
    if ($exception != $null) {
    }
  block288:
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } r402745 != $null;
    call $z22707, $exception := boolean$java.util.Iterator$hasNext$1051(r402745);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } true;
    if ($z22707 == 0) {
        assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } { :comment "thenblock" } true;
        goto block289;
    } else {
        assert { :sourceloc "Slf4jReporter.java",143,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Slf4jReporter.java",149,-1,-1,-1 } true;
    call $r252728, $exception := java.lang.Object$java.util.Iterator$next$1052(r402745);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",149,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",149,-1,-1,-1 } $heap[$r252728,$type] <: java.util.Map$Entry;
    r412746 := $r252728;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } r412746 != $null;
    call $r222729, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r412746);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } $heap[$r222729,$type] <: java.lang.String;
    $r232730 := $r222729;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } true;
    call $r282731, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r412746);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } $heap[$r282731,$type] <: com.codahale.metrics.Histogram;
    $r292732 := $r282731;
    assert { :sourceloc "Slf4jReporter.java",144,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$logHistogram$5790(r02718, $r232730, $r292732);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",145,-1,-1,-1 } true;
    goto block288;
  block289:
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } r42708 != $null;
    call $r112709, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r42708);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } $r112709 != $null;
    call r422747, $exception := java.util.Iterator$java.util.Set$iterator$236($r112709);
    if ($exception != $null) {
    }
  block290:
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } r422747 != $null;
    call $z32711, $exception := boolean$java.util.Iterator$hasNext$1051(r422747);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } true;
    if ($z32711 == 0) {
        assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } { :comment "thenblock" } true;
        goto block291;
    } else {
        assert { :sourceloc "Slf4jReporter.java",147,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Slf4jReporter.java",153,-1,-1,-1 } true;
    call $r192723, $exception := java.lang.Object$java.util.Iterator$next$1052(r422747);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",153,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",153,-1,-1,-1 } $heap[$r192723,$type] <: java.util.Map$Entry;
    r432748 := $r192723;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } r432748 != $null;
    call $r182724, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r432748);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } $heap[$r182724,$type] <: java.lang.String;
    $r212725 := $r182724;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } true;
    call $r202726, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r432748);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } $heap[$r202726,$type] <: com.codahale.metrics.Meter;
    $r242727 := $r202726;
    assert { :sourceloc "Slf4jReporter.java",148,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$logMeter$5789(r02718, $r212725, $r242727);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",149,-1,-1,-1 } true;
    goto block290;
  block291:
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } r52712 != $null;
    call $r122713, $exception := java.util.Set$java.util.SortedMap$entrySet$2630(r52712);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } $r122713 != $null;
    call r442749, $exception := java.util.Iterator$java.util.Set$iterator$236($r122713);
    if ($exception != $null) {
    }
  block292:
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } r442749 != $null;
    call $z42715, $exception := boolean$java.util.Iterator$hasNext$1051(r442749);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } true;
    if ($z42715 == 0) {
        assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } { :comment "thenblock" } true;
        goto block293;
    } else {
        assert { :sourceloc "Slf4jReporter.java",151,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Slf4jReporter.java",154,-1,-1,-1 } true;
    call $r132716, $exception := java.lang.Object$java.util.Iterator$next$1052(r442749);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",154,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",154,-1,-1,-1 } $heap[$r132716,$type] <: java.util.Map$Entry;
    r452750 := $r132716;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } r452750 != $null;
    call $r152719, $exception := java.lang.Object$java.util.Map$Entry$getKey$2642(r452750);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } $heap[$r152719,$type] <: java.lang.String;
    $r142720 := $r152719;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } true;
    call $r172721, $exception := java.lang.Object$java.util.Map$Entry$getValue$2643(r452750);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } $heap[$r172721,$type] <: com.codahale.metrics.Timer;
    $r162722 := $r172721;
    assert { :sourceloc "Slf4jReporter.java",152,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$logTimer$5788(r02718, $r142720, $r162722);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",153,-1,-1,-1 } true;
    goto block292;
  block293:
    assert { :sourceloc "Slf4jReporter.java",154,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$logTimer$5788($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r202820 : ref;    
var $d62778 : int;    
var $d82782 : int;    
var $d162795 : int;    
var $d32771 : int;    
var $d182799 : int;    
var $r62758 : ref;    
var $r222816 : ref;    
var $d92786 : int;    
var $r152796 : ref;    
var $d242811 : int;    
var $r182808 : ref;    
var $r72762 : ref;    
var r32753 : ref;    
var $d122787 : int;    
var $d72779 : int;    
var r22751 : ref;    
var $r42755 : ref;    
var r02754 : ref;    
var $d22770 : int;    
var $fakelocal_0 : ref;    
var $d132794 : int;    
var $d02765 : int;    
var $r162800 : ref;    
var $r112780 : ref;    
var $d262815 : int;    
var $r92772 : ref;    
var $d42774 : int;    
var $d212810 : int;    
var $l02761 : int;    
var $d202803 : int;    
var $d192806 : int;    
var $d252819 : int;    
var $r132788 : ref;    
var $d112790 : int;    
var $d172802 : int;    
var $d12766 : int;    
var $r82767 : ref;    
var $d232814 : int;    
var $d102783 : int;    
var $l12764 : int;    
var r12756 : ref;    
var $d152798 : int;    
var $d272818 : int;    
var $r192812 : ref;    
var $r102776 : ref;    
var $d222807 : int;    
var $r122784 : ref;    
var $r212822 : ref;    
var $d142791 : int;    
var $l22769 : int;    
var $r172804 : ref;    
var $d52775 : int;    
var $r52757 : ref;    
var $r142792 : ref;    
var $r232824 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Timer;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02754 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12756 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22751 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",157,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",157,-1,-1,-1 } r22751 != $null;
    call r32753, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Timer$getSnapshot$2663(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    $r52757 := $heap[r02754,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    $r62758 := $heap[r02754,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 18];
    $r42755 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 0 < $arrSizeHeap[$r42755] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][0 := r12756]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $l02761, $exception := long$com.codahale.metrics.Timer$getCount$2658(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r72762, $exception := java.lang.Long$java.lang.Long$valueOf$878($l02761);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 1 < $arrSizeHeap[$r42755] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][1 := $r72762]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } r32753 != $null;
    call $l12764, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    $d02765 := $l12764;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d12766, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d02765);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r82767, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d12766);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 2 < $arrSizeHeap[$r42755] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][2 := $r82767]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $l22769, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    $d22770 := $l22769;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d32771, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d22770);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r92772, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d32771);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 3 < $arrSizeHeap[$r42755] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][3 := $r92772]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d42774, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d52775, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d42774);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r102776, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d52775);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 4 < $arrSizeHeap[$r42755] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][4 := $r102776]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d62778, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d72779, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d62778);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r112780, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d72779);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 5 < $arrSizeHeap[$r42755] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][5 := $r112780]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d82782, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d102783, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d82782);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r122784, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d102783);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 6 < $arrSizeHeap[$r42755] && 6 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][6 := $r122784]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d92786, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d122787, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d92786);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r132788, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d122787);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 7 < $arrSizeHeap[$r42755] && 7 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][7 := $r132788]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d112790, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d142791, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d112790);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r142792, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d142791);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 8 < $arrSizeHeap[$r42755] && 8 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][8 := $r142792]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d132794, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d162795, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d132794);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r152796, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d162795);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 9 < $arrSizeHeap[$r42755] && 9 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][9 := $r152796]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d152798, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d182799, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d152798);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r162800, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d182799);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 10 < $arrSizeHeap[$r42755] && 10 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][10 := $r162800]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d172802, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r32753);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d202803, $exception := double$com.codahale.metrics.ScheduledReporter$convertDuration$2447(r02754, $d172802);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r172804, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d202803);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 11 < $arrSizeHeap[$r42755] && 11 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][11 := $r172804]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d192806, $exception := double$com.codahale.metrics.Timer$getMeanRate$2661(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d222807, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02754, $d192806);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r182808, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d222807);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 12 < $arrSizeHeap[$r42755] && 12 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][12 := $r182808]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d212810, $exception := double$com.codahale.metrics.Timer$getOneMinuteRate$2662(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d242811, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02754, $d212810);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r192812, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d242811);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 13 < $arrSizeHeap[$r42755] && 13 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][13 := $r192812]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d232814, $exception := double$com.codahale.metrics.Timer$getFiveMinuteRate$2660(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d262815, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02754, $d232814);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r222816, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d262815);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 14 < $arrSizeHeap[$r42755] && 14 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][14 := $r222816]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d272818, $exception := double$com.codahale.metrics.Timer$getFifteenMinuteRate$2659(r22751);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $d252819, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02754, $d272818);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r202820, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d252819);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 15 < $arrSizeHeap[$r42755] && 15 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][15 := $r202820]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r212822, $exception := java.lang.String$com.codahale.metrics.Slf4jReporter$getRateUnit$5793(r02754);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 16 < $arrSizeHeap[$r42755] && 16 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][16 := $r212822]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    call $r232824, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getDurationUnit$2446(r02754);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } 17 < $arrSizeHeap[$r42755] && 17 >= 0;
    $refArrHeap := $refArrHeap[$r42755 := $refArrHeap[$r42755][17 := $r232824]];
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",158,-1,-1,-1 } $r52757 != $null;
    call $exception := void$org.slf4j.Logger$info$6061($r52757, $r62758, $StringConst88, $r42755);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",180,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$logMeter$5789($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $l02833 : int;    
var $r52830 : ref;    
var $d42844 : int;    
var $r102850 : ref;    
var r02825 : ref;    
var $d22840 : int;    
var r22828 : ref;    
var $fakelocal_0 : ref;    
var r12827 : ref;    
var $d02836 : int;    
var $r32826 : ref;    
var $r112852 : ref;    
var $r92846 : ref;    
var $d62848 : int;    
var $d32841 : int;    
var $r72838 : ref;    
var $d72849 : int;    
var $d52845 : int;    
var $d12837 : int;    
var $r82842 : ref;    
var $r42829 : ref;    
var $r62834 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Meter;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02825 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12827 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22828 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    $r42829 := $heap[r02825,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    $r52830 := $heap[r02825,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 7];
    $r32826 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 0 < $arrSizeHeap[$r32826] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][0 := r12827]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } r22828 != $null;
    call $l02833, $exception := long$com.codahale.metrics.Meter$getCount$2636(r22828);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r62834, $exception := java.lang.Long$java.lang.Long$valueOf$878($l02833);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 1 < $arrSizeHeap[$r32826] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][1 := $r62834]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d02836, $exception := double$com.codahale.metrics.Meter$getMeanRate$2639(r22828);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d12837, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02825, $d02836);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r72838, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d12837);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 2 < $arrSizeHeap[$r32826] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][2 := $r72838]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d22840, $exception := double$com.codahale.metrics.Meter$getOneMinuteRate$2640(r22828);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d32841, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02825, $d22840);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r82842, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d32841);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 3 < $arrSizeHeap[$r32826] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][3 := $r82842]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d42844, $exception := double$com.codahale.metrics.Meter$getFiveMinuteRate$2638(r22828);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d52845, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02825, $d42844);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r92846, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d52845);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 4 < $arrSizeHeap[$r32826] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][4 := $r92846]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d62848, $exception := double$com.codahale.metrics.Meter$getFifteenMinuteRate$2637(r22828);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $d72849, $exception := double$com.codahale.metrics.ScheduledReporter$convertRate$2448(r02825, $d62848);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r102850, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d72849);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 5 < $arrSizeHeap[$r32826] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][5 := $r102850]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    call $r112852, $exception := java.lang.String$com.codahale.metrics.Slf4jReporter$getRateUnit$5793(r02825);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } 6 < $arrSizeHeap[$r32826] && 6 >= 0;
    $refArrHeap := $refArrHeap[$r32826 := $refArrHeap[$r32826][6 := $r112852]];
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",183,-1,-1,-1 } $r42829 != $null;
    call $exception := void$org.slf4j.Logger$info$6061($r42829, $r52830, $StringConst89, $r32826);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",192,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$logHistogram$5790($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r02856 : ref;    
var $d72893 : int;    
var $d62890 : int;    
var $l22869 : int;    
var r32855 : ref;    
var $r62860 : ref;    
var $d12875 : int;    
var $d32881 : int;    
var $r152885 : ref;    
var $r122879 : ref;    
var r22853 : ref;    
var r12858 : ref;    
var $l12866 : int;    
var $d52887 : int;    
var $r52859 : ref;    
var $r162891 : ref;    
var $d42884 : int;    
var $r42857 : ref;    
var $r82867 : ref;    
var $r112876 : ref;    
var $r102873 : ref;    
var $r92870 : ref;    
var $r132882 : ref;    
var $r72864 : ref;    
var $r142888 : ref;    
var $d22878 : int;    
var $r172894 : ref;    
var $d02872 : int;    
var $l02863 : int;    
var $fakelocal_0 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Histogram;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02856 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12858 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22853 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",195,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",195,-1,-1,-1 } r22853 != $null;
    call r32855, $exception := com.codahale.metrics.Snapshot$com.codahale.metrics.Histogram$getSnapshot$2651(r22853);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    $r52859 := $heap[r02856,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    $r62860 := $heap[r02856,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $fakelocal_0 := $new($arrayType(java.lang.Object));
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := 12];
    $r42857 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 0 < $arrSizeHeap[$r42857] && 0 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][0 := r12858]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $l02863, $exception := long$com.codahale.metrics.Histogram$getCount$2650(r22853);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r72864, $exception := java.lang.Long$java.lang.Long$valueOf$878($l02863);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 1 < $arrSizeHeap[$r42857] && 1 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][1 := $r72864]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } r32855 != $null;
    call $l12866, $exception := long$com.codahale.metrics.Snapshot$getMin$3162(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r82867, $exception := java.lang.Long$java.lang.Long$valueOf$878($l12866);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 2 < $arrSizeHeap[$r42857] && 2 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][2 := $r82867]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $l22869, $exception := long$com.codahale.metrics.Snapshot$getMax$3161(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r92870, $exception := java.lang.Long$java.lang.Long$valueOf$878($l22869);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 3 < $arrSizeHeap[$r42857] && 3 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][3 := $r92870]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d02872, $exception := double$com.codahale.metrics.Snapshot$getMean$3163(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r102873, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d02872);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 4 < $arrSizeHeap[$r42857] && 4 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][4 := $r102873]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d12875, $exception := double$com.codahale.metrics.Snapshot$getStdDev$3164(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r112876, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d12875);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 5 < $arrSizeHeap[$r42857] && 5 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][5 := $r112876]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d22878, $exception := double$com.codahale.metrics.Snapshot$getMedian$3154(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r122879, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d22878);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 6 < $arrSizeHeap[$r42857] && 6 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][6 := $r122879]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d32881, $exception := double$com.codahale.metrics.Snapshot$get75thPercentile$3155(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r132882, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d32881);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 7 < $arrSizeHeap[$r42857] && 7 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][7 := $r132882]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d42884, $exception := double$com.codahale.metrics.Snapshot$get95thPercentile$3156(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r152885, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d42884);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 8 < $arrSizeHeap[$r42857] && 8 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][8 := $r152885]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d52887, $exception := double$com.codahale.metrics.Snapshot$get98thPercentile$3157(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r142888, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d52887);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 9 < $arrSizeHeap[$r42857] && 9 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][9 := $r142888]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d62890, $exception := double$com.codahale.metrics.Snapshot$get99thPercentile$3158(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r162891, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d62890);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 10 < $arrSizeHeap[$r42857] && 10 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][10 := $r162891]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $d72893, $exception := double$com.codahale.metrics.Snapshot$get999thPercentile$3159(r32855);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    call $r172894, $exception := java.lang.Double$java.lang.Double$valueOf$1057($d72893);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } 11 < $arrSizeHeap[$r42857] && 11 >= 0;
    $refArrHeap := $refArrHeap[$r42857 := $refArrHeap[$r42857][11 := $r172894]];
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",196,-1,-1,-1 } $r52859 != $null;
    call $exception := void$org.slf4j.Logger$info$6061($r52859, $r62860, $StringConst90, $r42857);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",211,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$logCounter$5791($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r42899 : ref;    
var r02895 : ref;    
var $l02901 : int;    
var $r52902 : ref;    
var r22897 : ref;    
var r12896 : ref;    
var $r32898 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Counter;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02895 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12896 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22897 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } true;
    $r32898 := $heap[r02895,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779];
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } true;
    $r42899 := $heap[r02895,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780];
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } r22897 != $null;
    call $l02901, $exception := long$com.codahale.metrics.Counter$getCount$2847(r22897);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } true;
    call $r52902, $exception := java.lang.Long$java.lang.Long$valueOf$878($l02901);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",214,-1,-1,-1 } $r32898 != $null;
    call $exception := void$org.slf4j.Logger$info$6062($r32898, $r42899, $StringConst91, r12896, $r52902);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",215,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$logGauge$5792($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var $r42907 : ref;    
var r12904 : ref;    
var r22905 : ref;    
var r02903 : ref;    
var $r32906 : ref;    
var $r52909 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Gauge;
    assume $heap[$in_parameter__0,$type] <: java.lang.String;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02903 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12904 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22905 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } true;
    $r32906 := $heap[r02903,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$logger779];
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } true;
    $r42907 := $heap[r02903,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$marker780];
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } r22905 != $null;
    call $r52909, $exception := java.lang.Object$com.codahale.metrics.Gauge$getValue$1894(r22905);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",218,-1,-1,-1 } $r32906 != $null;
    call $exception := void$org.slf4j.Logger$info$6062($r32906, $r42907, $StringConst92, r12904, $r52909);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",219,-1,-1,-1 } true;
    return;
}


implementation java.lang.String$com.codahale.metrics.Slf4jReporter$getRateUnit$5793($this:ref) returns ($return:ref, $exception:ref){
    
var $fakelocal_0 : ref;    
var $r22911 : ref;    
var r02912 : ref;    
var $r32913 : ref;    
var $r52915 : ref;    
var $r12910 : ref;    
var $r42914 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.String;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02912 := $this;
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.StringBuilder);
    $r12910 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    call $exception := void$java.lang.StringBuilder$$la$init$ra$$2752($r12910);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    call $r22911, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r12910, $StringConst80);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    call $r32913, $exception := java.lang.String$com.codahale.metrics.ScheduledReporter$getRateUnit$2445(r02912);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } $r22911 != $null;
    call $r42914, $exception := java.lang.StringBuilder$java.lang.StringBuilder$append$2757($r22911, $r32913);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } $r42914 != $null;
    call $r52915, $exception := java.lang.String$java.lang.StringBuilder$toString$2791($r42914);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",223,-1,-1,-1 } true;
    $return := $r52915;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5794($this:ref, $in_parameter__0:ref, $in_parameter__1:ref, $in_parameter__2:ref, $in_parameter__3:ref, $in_parameter__4:ref, $in_parameter__5:ref, $in_parameter__6:ref) returns ($exception:ref){
    
var r42920 : ref;    
var r22918 : ref;    
var r32919 : ref;    
var r12917 : ref;    
var r72923 : ref;    
var r52921 : ref;    
var r02916 : ref;    
var r62922 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__3,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__1,$type] <: org.slf4j.Logger;
    assume $heap[$in_parameter__5,$type] <: com.codahale.metrics.MetricFilter;
    assume $heap[$in_parameter__2,$type] <: org.slf4j.Marker;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assume $heap[$in_parameter__6,$type] <: com.codahale.metrics.Slf4jReporter$1;
    assume $heap[$in_parameter__4,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02916 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12917 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22918 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r32919 := $in_parameter__2;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r42920 := $in_parameter__3;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r52921 := $in_parameter__4;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r62922 := $in_parameter__5;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r72923 := $in_parameter__6;
    assert { :sourceloc "Slf4jReporter.java",17,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5786(r02916, r12917, r22918, r32919, r42920, r52921, r62922);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",17,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5795($this:ref, $in_parameter__0:ref) returns ($exception:ref){
    
var r12925 : ref;    
var $r52929 : ref;    
var $r42928 : ref;    
var r02924 : ref;    
var $r22926 : ref;    
var $r32927 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02924 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12925 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",41,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02924);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",42,-1,-1,-1 } true;
    $heap := $heap[r02924,com.codahale.metrics.MetricRegistry$com.codahale.metrics.Slf4jReporter$Builder$registry781 := r12925];
    assert { :sourceloc "Slf4jReporter.java",43,-1,-1,-1 } true;
    call $r22926, $exception := org.slf4j.Logger$org.slf4j.LoggerFactory$getLogger$6063($StringConst93);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",43,-1,-1,-1 } true;
    $heap := $heap[r02924,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$Builder$logger782 := $r22926];
    assert { :sourceloc "Slf4jReporter.java",44,-1,-1,-1 } true;
    $heap := $heap[r02924,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$Builder$marker783 := $null];
    assert { :sourceloc "Slf4jReporter.java",45,-1,-1,-1 } true;
    $r32927 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$SECONDS242;
    assert { :sourceloc "Slf4jReporter.java",45,-1,-1,-1 } true;
    $heap := $heap[r02924,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$rateUnit784 := $r32927];
    assert { :sourceloc "Slf4jReporter.java",46,-1,-1,-1 } true;
    $r42928 := java.util.concurrent.TimeUnit$java.util.concurrent.TimeUnit$MILLISECONDS241;
    assert { :sourceloc "Slf4jReporter.java",46,-1,-1,-1 } true;
    $heap := $heap[r02924,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$durationUnit785 := $r42928];
    assert { :sourceloc "Slf4jReporter.java",47,-1,-1,-1 } true;
    $r52929 := com.codahale.metrics.MetricFilter$com.codahale.metrics.MetricFilter$ALL360;
    assert { :sourceloc "Slf4jReporter.java",47,-1,-1,-1 } true;
    $heap := $heap[r02924,com.codahale.metrics.MetricFilter$com.codahale.metrics.Slf4jReporter$Builder$filter786 := $r52929];
    assert { :sourceloc "Slf4jReporter.java",48,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$outputTo$5796($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12931 : ref;    
var r02930 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: org.slf4j.Logger;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02930 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12931 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",57,-1,-1,-1 } true;
    $heap := $heap[r02930,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$Builder$logger782 := r12931];
    assert { :sourceloc "Slf4jReporter.java",58,-1,-1,-1 } true;
    $return := r02930;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$markWith$5797($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12933 : ref;    
var r02932 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: org.slf4j.Marker;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02932 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12933 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",68,-1,-1,-1 } true;
    $heap := $heap[r02932,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$Builder$marker783 := r12933];
    assert { :sourceloc "Slf4jReporter.java",69,-1,-1,-1 } true;
    $return := r02932;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$convertRatesTo$5798($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r02934 : ref;    
var r12935 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02934 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12935 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",79,-1,-1,-1 } true;
    $heap := $heap[r02934,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$rateUnit784 := r12935];
    assert { :sourceloc "Slf4jReporter.java",80,-1,-1,-1 } true;
    $return := r02934;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$convertDurationsTo$5799($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12937 : ref;    
var r02936 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__0,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02936 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12937 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",90,-1,-1,-1 } true;
    $heap := $heap[r02936,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$durationUnit785 := r12937];
    assert { :sourceloc "Slf4jReporter.java",91,-1,-1,-1 } true;
    $return := r02936;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$Builder$com.codahale.metrics.Slf4jReporter$Builder$filter$5800($this:ref, $in_parameter__0:ref) returns ($return:ref, $exception:ref){
    
var r12939 : ref;    
var r02938 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter$Builder;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricFilter;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02938 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12939 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",101,-1,-1,-1 } true;
    $heap := $heap[r02938,com.codahale.metrics.MetricFilter$com.codahale.metrics.Slf4jReporter$Builder$filter786 := r12939];
    assert { :sourceloc "Slf4jReporter.java",102,-1,-1,-1 } true;
    $return := r02938;
    return;
}


implementation com.codahale.metrics.Slf4jReporter$com.codahale.metrics.Slf4jReporter$Builder$build$5801($this:ref) returns ($return:ref, $exception:ref){
    
var $r72947 : ref;    
var $r62946 : ref;    
var r02941 : ref;    
var $r52945 : ref;    
var $r12940 : ref;    
var $r22942 : ref;    
var $r32943 : ref;    
var $fakelocal_0 : ref;    
var $r42944 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Slf4jReporter;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02941 := $this;
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Slf4jReporter);
    $r12940 := $fakelocal_0;
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r72947 := $heap[r02941,com.codahale.metrics.MetricRegistry$com.codahale.metrics.Slf4jReporter$Builder$registry781];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r62946 := $heap[r02941,org.slf4j.Logger$com.codahale.metrics.Slf4jReporter$Builder$logger782];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r52945 := $heap[r02941,org.slf4j.Marker$com.codahale.metrics.Slf4jReporter$Builder$marker783];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r42944 := $heap[r02941,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$rateUnit784];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r32943 := $heap[r02941,java.util.concurrent.TimeUnit$com.codahale.metrics.Slf4jReporter$Builder$durationUnit785];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $r22942 := $heap[r02941,com.codahale.metrics.MetricFilter$com.codahale.metrics.Slf4jReporter$Builder$filter786];
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$$la$init$ra$$5794($r12940, $r72947, $r62946, $r52945, $r42944, $r32943, $r22942, $null);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",111,-1,-1,-1 } true;
    $return := $r12940;
    return;
}


implementation void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5802($this:ref, $in_parameter__0:ref, $in_parameter__1:ref) returns ($exception:ref){
    
var r22950 : ref;    
var r12949 : ref;    
var r02948 : ref;
    assume { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: com.codahale.metrics.Slf4jReporter$1;
    assume $heap[$in_parameter__0,$type] <: com.codahale.metrics.MetricRegistry;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r02948 := $this;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r12949 := $in_parameter__0;
    assert { :sourceloc "Slf4jReporter.java",-1,-1,-1,-1 } true;
    r22950 := $in_parameter__1;
    assert { :sourceloc "Slf4jReporter.java",33,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Slf4jReporter$Builder$$la$init$ra$$5795(r02948, r12949);
    if ($exception != $null) {
    }
    assert { :sourceloc "Slf4jReporter.java",33,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.SlidingTimeWindowReservoir$$la$init$ra$$5803($this:ref, $in_parameter__0:int, $in_parameter__1:ref) returns ($exception:ref){
    
var l02952 : int;    
var r02951 : ref;    
var r12953 : ref;    
var $r22954 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02951 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    l02952 := $in_parameter__0;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r12953 := $in_parameter__1;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",30,-1,-1,-1 } true;
    call $r22954, $exception := com.codahale.metrics.Clock$com.codahale.metrics.Clock$defaultClock$1898();
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",30,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.SlidingTimeWindowReservoir$$la$init$ra$$5804(r02951, l02952, r12953, $r22954);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",31,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.SlidingTimeWindowReservoir$$la$init$ra$$5804($this:ref, $in_parameter__0:int, $in_parameter__1:ref, $in_parameter__2:ref) returns ($exception:ref){
    
var $fakelocal_2 : ref;    
var $l22961 : int;    
var $fakelocal_1 : ref;    
var $fakelocal_0 : ref;    
var $r42962 : ref;    
var r22956 : ref;    
var $l12960 : int;    
var r02955 : ref;    
var l02959 : int;    
var r12958 : ref;    
var $r52963 : ref;    
var $r32957 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$in_parameter__1,$type] <: java.util.concurrent.TimeUnit;
    assume $heap[$in_parameter__2,$type] <: com.codahale.metrics.Clock;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02955 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    l02959 := $in_parameter__0;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r12958 := $in_parameter__1;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r22956 := $in_parameter__2;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",40,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r02955);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",41,-1,-1,-1 } true;
    $heap := $heap[r02955,com.codahale.metrics.Clock$com.codahale.metrics.SlidingTimeWindowReservoir$clock787 := r22956];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",42,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.ConcurrentSkipListMap);
    $r32957 := $fakelocal_0;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",42,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.ConcurrentSkipListMap$$la$init$ra$$4155($r32957);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",42,-1,-1,-1 } true;
    $heap := $heap[r02955,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788 := $r32957];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",43,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",43,-1,-1,-1 } r12958 != $null;
    call $l12960, $exception := long$java.util.concurrent.TimeUnit$toNanos$1926(r12958, l02959);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",43,-1,-1,-1 } true;
    $l22961 := $l12960 * 256;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",43,-1,-1,-1 } true;
    $heap := $heap[r02955,long$com.codahale.metrics.SlidingTimeWindowReservoir$window0 := $l22961];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",44,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.util.concurrent.atomic.AtomicLong);
    $r42962 := $fakelocal_1;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",44,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1902($r42962);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",44,-1,-1,-1 } true;
    $heap := $heap[r02955,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$lastTick789 := $r42962];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",45,-1,-1,-1 } true;
    call $fakelocal_2 := $new(java.util.concurrent.atomic.AtomicLong);
    $r52963 := $fakelocal_2;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",45,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1902($r52963);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",45,-1,-1,-1 } true;
    $heap := $heap[r02955,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$count790 := $r52963];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",46,-1,-1,-1 } true;
    return;
}


implementation int$com.codahale.metrics.SlidingTimeWindowReservoir$size$5805($this:ref) returns ($return:int, $exception:ref){
    
var $i02966 : int;    
var r02964 : ref;    
var $r12965 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02964 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",50,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.SlidingTimeWindowReservoir$trim$5809(r02964);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",51,-1,-1,-1 } true;
    $r12965 := $heap[r02964,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",51,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",51,-1,-1,-1 } $r12965 != $null;
    call $i02966, $exception := int$java.util.concurrent.ConcurrentSkipListMap$size$4168($r12965);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",51,-1,-1,-1 } true;
    $return := $i02966;
    return;
}


implementation void$com.codahale.metrics.SlidingTimeWindowReservoir$update$5806($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $l42973 : int;    
var $l12969 : int;    
var $r22972 : ref;    
var $b32971 : int;    
var r02967 : ref;    
var $r32974 : ref;    
var $l22970 : int;    
var $r42976 : ref;    
var $r12968 : ref;    
var $fakelocal_0 : ref;    
var l02975 : int;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02967 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    l02975 := $in_parameter__0;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } true;
    $r12968 := $heap[r02967,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$count790];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } $r12968 != $null;
    call $l12969, $exception := long$java.util.concurrent.atomic.AtomicLong$incrementAndGet$1912($r12968);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } 256 != 0;
    $l22970 := $l12969 mod 256;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } true;
    $b32971 := $cmpInt($l22970, 0);
    assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } true;
    if ($b32971 != 0) {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } { :comment "thenblock" } true;
        goto block294;
    } else {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",56,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",57,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.SlidingTimeWindowReservoir$trim$5809(r02967);
    if ($exception != $null) {
    }
  block294:
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } true;
    $r22972 := $heap[r02967,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } true;
    call $l42973, $exception := long$com.codahale.metrics.SlidingTimeWindowReservoir$getTick$5808(r02967);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } true;
    call $r32974, $exception := java.lang.Long$java.lang.Long$valueOf$878($l42973);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } true;
    call $r42976, $exception := java.lang.Long$java.lang.Long$valueOf$878(l02975);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",59,-1,-1,-1 } $r22972 != $null;
    call $fakelocal_0, $exception := java.lang.Object$java.util.concurrent.ConcurrentSkipListMap$put$4165($r22972, $r32974, $r42976);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",60,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.SlidingTimeWindowReservoir$getSnapshot$5807($this:ref) returns ($return:ref, $exception:ref){
    
var $r12979 : ref;    
var $r32981 : ref;    
var $fakelocal_0 : ref;    
var $r22980 : ref;    
var r02978 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02978 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",64,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.SlidingTimeWindowReservoir$trim$5809(r02978);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.Snapshot);
    $r12979 := $fakelocal_0;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } true;
    $r22980 := $heap[r02978,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } $r22980 != $null;
    call $r32981, $exception := java.util.Collection$java.util.concurrent.ConcurrentSkipListMap$values$4173($r22980);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Snapshot$$la$init$ra$$3150($r12979, $r32981);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",65,-1,-1,-1 } true;
    $return := $r12979;
    return;
}


implementation long$com.codahale.metrics.SlidingTimeWindowReservoir$getTick$5808($this:ref) returns ($return:int, $exception:ref){
    
var $l52993 : int;    
var l12988 : int;    
var r02982 : ref;    
var $r32991 : ref;    
var $l32987 : int;    
var l02985 : int;    
var l22990 : int;    
var $z02992 : int;    
var $r22986 : ref;    
var $b42989 : int;    
var $r12983 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02982 := $this;
  block295:
    assert { :sourceloc "SlidingTimeWindowReservoir.java",70,-1,-1,-1 } true;
    $r12983 := $heap[r02982,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$lastTick789];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",70,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",70,-1,-1,-1 } $r12983 != $null;
    call l02985, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r12983);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",71,-1,-1,-1 } true;
    $r22986 := $heap[r02982,com.codahale.metrics.Clock$com.codahale.metrics.SlidingTimeWindowReservoir$clock787];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",71,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",71,-1,-1,-1 } $r22986 != $null;
    call $l32987, $exception := long$com.codahale.metrics.Clock$getTick$1896($r22986);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",71,-1,-1,-1 } true;
    l12988 := $l32987 * 256;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",73,-1,-1,-1 } true;
    $b42989 := $cmpInt(l12988, l02985);
    assert { :sourceloc "SlidingTimeWindowReservoir.java",73,-1,-1,-1 } true;
    if ($b42989 <= 0) {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",73,-1,-1,-1 } { :comment "thenblock" } true;
        goto block296;
    } else {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",73,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",75,-1,-1,-1 } true;
    $l52993 := l12988;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",75,-1,-1,-1 } true;
    goto block297;
  block296:
    assert { :sourceloc "SlidingTimeWindowReservoir.java",75,-1,-1,-1 } true;
    $l52993 := l02985 + 1;
  block297:
    assert { :sourceloc "SlidingTimeWindowReservoir.java",73,-1,-1,-1 } true;
    l22990 := $l52993;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } true;
    $r32991 := $heap[r02982,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.SlidingTimeWindowReservoir$lastTick789];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } $r32991 != $null;
    call $z02992, $exception := boolean$java.util.concurrent.atomic.AtomicLong$compareAndSet$1907($r32991, l02985, l22990);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } true;
    if ($z02992 == 0) {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } { :comment "thenblock" } true;
        goto block298;
    } else {
        assert { :sourceloc "SlidingTimeWindowReservoir.java",74,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",75,-1,-1,-1 } true;
    $return := l22990;
    return;
  block298:
    assert { :sourceloc "SlidingTimeWindowReservoir.java",77,-1,-1,-1 } true;
    goto block295;
}


implementation void$com.codahale.metrics.SlidingTimeWindowReservoir$trim$5809($this:ref) returns ($exception:ref){
    
var $l22998 : int;    
var r02994 : ref;    
var $r22999 : ref;    
var $l02996 : int;    
var $l12997 : int;    
var $r12995 : ref;    
var $r33000 : ref;
    assume { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",-1,-1,-1,-1 } true;
    r02994 := $this;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    $r12995 := $heap[r02994,java.util.concurrent.ConcurrentSkipListMap$com.codahale.metrics.SlidingTimeWindowReservoir$measurements788];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    call $l02996, $exception := long$com.codahale.metrics.SlidingTimeWindowReservoir$getTick$5808(r02994);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    $l12997 := $heap[r02994,long$com.codahale.metrics.SlidingTimeWindowReservoir$window0];
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    $l22998 := $l02996 - $l12997;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    call $r22999, $exception := java.lang.Long$java.lang.Long$valueOf$878($l22998);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } $r12995 != $null;
    call $r33000, $exception := java.util.concurrent.ConcurrentNavigableMap$java.util.concurrent.ConcurrentSkipListMap$headMap$4189($r12995, $r22999);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } true;
    assert { :sourceloc "SlidingTimeWindowReservoir.java",81,-1,-1,-1 } $r33000 != $null;
    call $exception := void$java.util.Map$clear$1164($r33000);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingTimeWindowReservoir.java",82,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.SlidingWindowReservoir$$la$init$ra$$5810($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $fakelocal_0 : ref;    
var $r13003 : ref;    
var r03001 : ref;    
var i03002 : int;
    assume { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    r03001 := $this;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    i03002 := $in_parameter__0;
    assert { :sourceloc "SlidingWindowReservoir.java",18,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r03001);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingWindowReservoir.java",19,-1,-1,-1 } true;
    call $fakelocal_0 := $new($intArrayType);
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := i03002];
    $r13003 := $fakelocal_0;
    assert { :sourceloc "SlidingWindowReservoir.java",19,-1,-1,-1 } true;
    $heap := $heap[r03001,long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791 := $r13003];
    assert { :sourceloc "SlidingWindowReservoir.java",20,-1,-1,-1 } true;
    $heap := $heap[r03001,long$com.codahale.metrics.SlidingWindowReservoir$count0 := 0];
    assert { :sourceloc "SlidingWindowReservoir.java",21,-1,-1,-1 } true;
    return;
}


implementation int$com.codahale.metrics.SlidingWindowReservoir$size$5811($this:ref) returns ($return:int, $exception:ref){
    
var $l13007 : int;    
var $l23008 : int;    
var $r13005 : ref;    
var r03004 : ref;    
var $l33009 : int;    
var $i43010 : int;    
var $i03006 : int;
    assume { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    r03004 := $this;
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    $l23008 := $heap[r03004,long$com.codahale.metrics.SlidingWindowReservoir$count0];
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    $r13005 := $heap[r03004,long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791];
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } $r13005 != $null;
    $i03006 := $arrSizeHeap[$r13005];
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    $l13007 := $i03006;
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    call $l33009, $exception := long$java.lang.Math$min$4074($l23008, $l13007);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    $i43010 := $l33009;
    assert { :sourceloc "SlidingWindowReservoir.java",25,-1,-1,-1 } true;
    $return := $i43010;
    return;
}


implementation void$com.codahale.metrics.SlidingWindowReservoir$update$5812($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $i53019 : int;    
var $l13012 : int;    
var $i43017 : int;    
var r03011 : ref;    
var $i33016 : int;    
var $l23013 : int;    
var $r13014 : ref;    
var l03018 : int;    
var $r23015 : ref;
    assume { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    r03011 := $this;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    l03018 := $in_parameter__0;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $r13014 := $heap[r03011,long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791];
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $l13012 := $heap[r03011,long$com.codahale.metrics.SlidingWindowReservoir$count0];
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $l23013 := $l13012 + 1;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $heap := $heap[r03011,long$com.codahale.metrics.SlidingWindowReservoir$count0 := $l23013];
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $i43017 := $l13012;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    $r23015 := $heap[r03011,long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791];
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } $r23015 != $null;
    $i33016 := $arrSizeHeap[$r23015];
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } $i33016 != 0;
    $i53019 := $i43017 mod $i33016;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } true;
    assert { :sourceloc "SlidingWindowReservoir.java",30,-1,-1,-1 } $i53019 < $arrSizeHeap[$r13014] && $i53019 >= 0;
    $intArrHeap := $intArrHeap[$r13014 := $intArrHeap[$r13014][$i53019 := l03018]];
    assert { :sourceloc "SlidingWindowReservoir.java",31,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.SlidingWindowReservoir$getSnapshot$5813($this:ref) returns ($return:ref, $exception:ref){
    
var $l33029 : int;    
var r03020 : ref;    
var i03023 : int;    
var $fakelocal_1 : ref;    
var $i23024 : int;    
var $i13021 : int;    
var $r43025 : ref;    
var $r73031 : ref;    
var r33032 : ref;    
var $r63028 : ref;    
var $fakelocal_0 : ref;    
var r23026 : ref;    
var r13022 : ref;
    assume { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "SlidingWindowReservoir.java",-1,-1,-1,-1 } true;
    r03020 := $this;
    assert { :sourceloc "SlidingWindowReservoir.java",35,-1,-1,-1 } true;
    call $i13021, $exception := int$com.codahale.metrics.SlidingWindowReservoir$size$5811(r03020);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingWindowReservoir.java",35,-1,-1,-1 } true;
    call $fakelocal_0 := $new($intArrayType);
    $arrSizeHeap := $arrSizeHeap[$fakelocal_0 := $i13021];
    r13022 := $fakelocal_0;
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    i03023 := 0;
  block299:
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } r13022 != $null;
    $i23024 := $arrSizeHeap[r13022];
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    if (i03023 >= $i23024) {
        assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } { :comment "thenblock" } true;
        goto block300;
    } else {
        assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "SlidingWindowReservoir.java",37,-1,-1,-1 } true;
    r23026 := r03020;
    assert { :sourceloc "SlidingWindowReservoir.java",37,-1,-1,-1 } true;
    havoc r03020, i03023, $i23024, $i13021, $fakelocal_0, r23026, r13022, $return, $exception, $heap;
  block301:
    assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
    $r63028 := $heap[r03020,long$lp$$rp$$com.codahale.metrics.SlidingWindowReservoir$measurements791];
    assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
    if (i03023 < $arrSizeHeap[$r63028] && i03023 >= 0) {
        assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block302;
    }
    $l33029 := $intArrHeap[$r63028][i03023];
    assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
    if (i03023 < $arrSizeHeap[r13022] && i03023 >= 0) {
        assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
    } else {
        assert { :sourceloc "SlidingWindowReservoir.java",38,-1,-1,-1 } true;
        assert { :noverify } true;
        call $exception := $new(java.lang.ArrayIndexOutOfBoundsException);
        goto block302;
    }
    $intArrHeap := $intArrHeap[r13022 := $intArrHeap[r13022][i03023 := $l33029]];
    assert { :sourceloc "SlidingWindowReservoir.java",39,-1,-1,-1 } true;
  block303:
    assert { :sourceloc "SlidingWindowReservoir.java",39,-1,-1,-1 } true;
    goto block304;
  block302:
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    assume $heap[$exception,$type] <: java.lang.Throwable;
    $r73031 := $exception;
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    r33032 := $r73031;
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
  block305:
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    $exception := r33032;
    return;
  block304:
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    i03023 := i03023 + 1;
    assert { :sourceloc "SlidingWindowReservoir.java",36,-1,-1,-1 } true;
    goto block299;
  block300:
    assert { :sourceloc "SlidingWindowReservoir.java",41,-1,-1,-1 } true;
    call $fakelocal_1 := $new(com.codahale.metrics.Snapshot);
    $r43025 := $fakelocal_1;
    assert { :sourceloc "SlidingWindowReservoir.java",41,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Snapshot$$la$init$ra$$3151($r43025, r13022);
    if ($exception != $null) {
    }
    assert { :sourceloc "SlidingWindowReservoir.java",41,-1,-1,-1 } true;
    $return := $r43025;
    return;
}


implementation void$com.codahale.metrics.Striped64$1$$la$init$ra$$5940($this:ref) returns ($exception:ref){
    
var r03034 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r03034 := $this;
    assert { :sourceloc "Striped64.java",336,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r03034);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",336,-1,-1,-1 } true;
    return;
}


implementation sun.misc.Unsafe$com.codahale.metrics.Striped64$1$run$5941($this:ref) returns ($return:ref, $exception:ref){
    
var $r73046 : ref;    
var $r63045 : ref;    
var $z03044 : int;    
var i03038 : int;    
var $fakelocal_0 : ref;    
var r13035 : ref;    
var $r53040 : ref;    
var r03047 : ref;    
var r23037 : ref;    
var r43043 : ref;    
var r33041 : ref;    
var i13039 : int;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: sun.misc.Unsafe;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r03047 := $this;
    assert { :sourceloc "Striped64.java",338,-1,-1,-1 } true;
    r13035 := CC$sun$_$misc$_$Unsafe;
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    call r23037, $exception := java.lang.reflect.Field$lp$$rp$$java.lang.Class$getDeclaredFields$496(r13035);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } r23037 != $null;
    i03038 := $arrSizeHeap[r23037];
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    i13039 := 0;
  block306:
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    if (i13039 >= i03038) {
        assert { :sourceloc "Striped64.java",339,-1,-1,-1 } { :comment "thenblock" } true;
        goto block307;
    } else {
        assert { :sourceloc "Striped64.java",339,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",345,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",345,-1,-1,-1 } i13039 < $arrSizeHeap[r23037] && i13039 >= 0;
    r33041 := $refArrHeap[r23037][i13039];
    assert { :sourceloc "Striped64.java",340,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",340,-1,-1,-1 } r33041 != $null;
    call $exception := void$java.lang.reflect.AccessibleObject$setAccessible$1540(r33041, 1);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.SecurityException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",341,-1,-1,-1 } true;
    call r43043, $exception := java.lang.Object$java.lang.reflect.Field$get$1371(r33041, $null);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.IllegalAccessException) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",342,-1,-1,-1 } true;
    call $z03044, $exception := boolean$java.lang.Class$isInstance$451(r13035, r43043);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",342,-1,-1,-1 } true;
    if ($z03044 == 0) {
        assert { :sourceloc "Striped64.java",342,-1,-1,-1 } { :comment "thenblock" } true;
        goto block308;
    } else {
        assert { :sourceloc "Striped64.java",342,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "Striped64.java",343,-1,-1,-1 } true;
    call $r63045, $exception := java.lang.Object$java.lang.Class$cast$546(r13035, r43043);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",343,-1,-1,-1 } true;
    assert { :sourceloc "Striped64.java",343,-1,-1,-1 } $heap[$r63045,$type] <: sun.misc.Unsafe;
    $r73046 := $r63045;
    assert { :sourceloc "Striped64.java",343,-1,-1,-1 } true;
    $return := $r73046;
    return;
  block308:
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    i13039 := i13039 + 1;
    assert { :sourceloc "Striped64.java",339,-1,-1,-1 } true;
    goto block306;
  block307:
    assert { :sourceloc "Striped64.java",345,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.lang.NoSuchFieldError);
    $r53040 := $fakelocal_0;
    assert { :sourceloc "Striped64.java",345,-1,-1,-1 } true;
    call $exception := void$java.lang.NoSuchFieldError$$la$init$ra$$1776($r53040, $StringConst94);
    if ($exception != $null) {
    }
    assert { :sourceloc "Striped64.java",345,-1,-1,-1 } true;
    $exception := $r53040;
    return;
}


implementation java.lang.Object$com.codahale.metrics.Striped64$1$run$5942($this:ref) returns ($return:ref, $exception:ref){
    
var $r13049 : ref;    
var r03048 : ref;
    assume { :sourceloc "Striped64.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "Striped64.java",-1,-1,-1,-1 } true;
    r03048 := $this;
    assert { :sourceloc "Striped64.java",336,-1,-1,-1 } true;
    call $r13049, $exception := sun.misc.Unsafe$com.codahale.metrics.Striped64$1$run$5941(r03048);
    if ($exception != $null) {
        if ($heap[$exception,$type] <: java.lang.Exception) {
            return;
        } else {
            assert { :clone } true;
        }
    }
    assert { :sourceloc "Striped64.java",336,-1,-1,-1 } true;
    $return := $r13049;
    return;
}


implementation void$com.codahale.metrics.ThreadLocalRandom$1$$la$init$ra$$6022($this:ref) returns ($exception:ref){
    
var r03050 : ref;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r03050 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",45,-1,-1,-1 } true;
    call $exception := void$java.lang.ThreadLocal$$la$init$ra$$3528(r03050);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",45,-1,-1,-1 } true;
    return;
}


implementation com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$1$initialValue$6023($this:ref) returns ($return:ref, $exception:ref){
    
var r03052 : ref;    
var $r13051 : ref;    
var $fakelocal_0 : ref;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.ThreadLocalRandom;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r03052 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",47,-1,-1,-1 } true;
    call $fakelocal_0 := $new(com.codahale.metrics.ThreadLocalRandom);
    $r13051 := $fakelocal_0;
    assert { :sourceloc "ThreadLocalRandom.java",47,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.ThreadLocalRandom$$la$init$ra$$4344($r13051);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",47,-1,-1,-1 } true;
    $return := $r13051;
    return;
}


implementation java.lang.Object$com.codahale.metrics.ThreadLocalRandom$1$initialValue$6024($this:ref) returns ($return:ref, $exception:ref){
    
var $r13054 : ref;    
var r03053 : ref;
    assume { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: java.lang.Object;
    assert { :sourceloc "ThreadLocalRandom.java",-1,-1,-1,-1 } true;
    r03053 := $this;
    assert { :sourceloc "ThreadLocalRandom.java",45,-1,-1,-1 } true;
    call $r13054, $exception := com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$1$initialValue$6023(r03053);
    if ($exception != $null) {
    }
    assert { :sourceloc "ThreadLocalRandom.java",45,-1,-1,-1 } true;
    $return := $r13054;
    return;
}


implementation void$com.codahale.metrics.UniformReservoir$$la$init$ra$$6029($this:ref) returns ($exception:ref){
    
var r03055 : ref;
    assume { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    r03055 := $this;
    assert { :sourceloc "UniformReservoir.java",25,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.UniformReservoir$$la$init$ra$$6030(r03055, 1028);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",26,-1,-1,-1 } true;
    return;
}


implementation void$com.codahale.metrics.UniformReservoir$$la$init$ra$$6030($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $r43063 : ref;    
var $fakelocal_0 : ref;    
var i03059 : int;    
var $r33061 : ref;    
var $r13057 : ref;    
var $r53064 : ref;    
var i13060 : int;    
var $fakelocal_1 : ref;    
var $r23058 : ref;    
var r03056 : ref;    
var $i23062 : int;
    assume { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    r03056 := $this;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    i03059 := $in_parameter__0;
    assert { :sourceloc "UniformReservoir.java",33,-1,-1,-1 } true;
    call $exception := void$java.lang.Object$$la$init$ra$$38(r03056);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",17,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.concurrent.atomic.AtomicLong);
    $r13057 := $fakelocal_0;
    assert { :sourceloc "UniformReservoir.java",17,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$$la$init$ra$$1902($r13057);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",17,-1,-1,-1 } true;
    $heap := $heap[r03056,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.UniformReservoir$count796 := $r13057];
    assert { :sourceloc "UniformReservoir.java",34,-1,-1,-1 } true;
    call $fakelocal_1 := $new(java.util.concurrent.atomic.AtomicLongArray);
    $r23058 := $fakelocal_1;
    assert { :sourceloc "UniformReservoir.java",34,-1,-1,-1 } true;
    call $exception := void$java.util.concurrent.atomic.AtomicLongArray$$la$init$ra$$6037($r23058, i03059);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",34,-1,-1,-1 } true;
    $heap := $heap[r03056,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797 := $r23058];
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    i13060 := 0;
  block309:
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    $r33061 := $heap[r03056,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } $r33061 != $null;
    call $i23062, $exception := int$java.util.concurrent.atomic.AtomicLongArray$length$6039($r33061);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    if (i13060 >= $i23062) {
        assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } { :comment "thenblock" } true;
        goto block310;
    } else {
        assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",36,-1,-1,-1 } true;
    $r53064 := $heap[r03056,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",36,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",36,-1,-1,-1 } $r53064 != $null;
    call $exception := void$java.util.concurrent.atomic.AtomicLongArray$set$6042($r53064, i13060, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    i13060 := i13060 + 1;
    assert { :sourceloc "UniformReservoir.java",35,-1,-1,-1 } true;
    goto block309;
  block310:
    assert { :sourceloc "UniformReservoir.java",38,-1,-1,-1 } true;
    $r43063 := $heap[r03056,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.UniformReservoir$count796];
    assert { :sourceloc "UniformReservoir.java",38,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",38,-1,-1,-1 } $r43063 != $null;
    call $exception := void$java.util.concurrent.atomic.AtomicLong$set$1904($r43063, 0);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",39,-1,-1,-1 } true;
    return;
}


implementation int$com.codahale.metrics.UniformReservoir$size$6031($this:ref) returns ($return:int, $exception:ref){
    
var $b33072 : int;    
var l03068 : int;    
var $r33074 : ref;    
var r03065 : ref;    
var $i43073 : int;    
var $l23071 : int;    
var $i13070 : int;    
var $i53075 : int;    
var $r23069 : ref;    
var $r13066 : ref;
    assume { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    r03065 := $this;
    assert { :sourceloc "UniformReservoir.java",43,-1,-1,-1 } true;
    $r13066 := $heap[r03065,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.UniformReservoir$count796];
    assert { :sourceloc "UniformReservoir.java",43,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",43,-1,-1,-1 } $r13066 != $null;
    call l03068, $exception := long$java.util.concurrent.atomic.AtomicLong$get$1903($r13066);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } true;
    $r23069 := $heap[r03065,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } $r23069 != $null;
    call $i13070, $exception := int$java.util.concurrent.atomic.AtomicLongArray$length$6039($r23069);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } true;
    $l23071 := $i13070;
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } true;
    $b33072 := $cmpInt(l03068, $l23071);
    assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } true;
    if ($b33072 <= 0) {
        assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } { :comment "thenblock" } true;
        goto block311;
    } else {
        assert { :sourceloc "UniformReservoir.java",44,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",45,-1,-1,-1 } true;
    $r33074 := $heap[r03065,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",45,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",45,-1,-1,-1 } $r33074 != $null;
    call $i53075, $exception := int$java.util.concurrent.atomic.AtomicLongArray$length$6039($r33074);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",45,-1,-1,-1 } true;
    $return := $i53075;
    return;
  block311:
    assert { :sourceloc "UniformReservoir.java",47,-1,-1,-1 } true;
    $i43073 := l03068;
    assert { :sourceloc "UniformReservoir.java",47,-1,-1,-1 } true;
    $return := $i43073;
    return;
}


implementation void$com.codahale.metrics.UniformReservoir$update$6032($this:ref, $in_parameter__0:int) returns ($exception:ref){
    
var $b53083 : int;    
var $i63087 : int;    
var $l83088 : int;    
var $i93091 : int;    
var $r43092 : ref;    
var $l43082 : int;    
var $r33086 : ref;    
var l23085 : int;    
var $i33081 : int;    
var l13079 : int;    
var $b73089 : int;    
var $i113093 : int;    
var r03076 : ref;    
var $r53095 : ref;    
var $r23080 : ref;    
var $r13077 : ref;    
var $i103094 : int;    
var l03090 : int;
    assume { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } $this != $null;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    r03076 := $this;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    l03090 := $in_parameter__0;
    assert { :sourceloc "UniformReservoir.java",52,-1,-1,-1 } true;
    $r13077 := $heap[r03076,java.util.concurrent.atomic.AtomicLong$com.codahale.metrics.UniformReservoir$count796];
    assert { :sourceloc "UniformReservoir.java",52,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",52,-1,-1,-1 } $r13077 != $null;
    call l13079, $exception := long$java.util.concurrent.atomic.AtomicLong$incrementAndGet$1912($r13077);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } true;
    $r23080 := $heap[r03076,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } $r23080 != $null;
    call $i33081, $exception := int$java.util.concurrent.atomic.AtomicLongArray$length$6039($r23080);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } true;
    $l43082 := $i33081;
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } true;
    $b53083 := $cmpInt(l13079, $l43082);
    assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } true;
    if ($b53083 > 0) {
        assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } { :comment "thenblock" } true;
        goto block312;
    } else {
        assert { :sourceloc "UniformReservoir.java",53,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } true;
    $r53095 := $heap[r03076,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } true;
    $i113093 := l13079;
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } true;
    $i103094 := $i113093 - 1;
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } $r53095 != $null;
    call $exception := void$java.util.concurrent.atomic.AtomicLongArray$set$6042($r53095, $i103094, l03090);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",54,-1,-1,-1 } true;
    goto block313;
  block312:
    assert { :sourceloc "UniformReservoir.java",56,-1,-1,-1 } true;
    call l23085, $exception := long$com.codahale.metrics.UniformReservoir$nextLong$6033(l13079);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } true;
    $r33086 := $heap[r03076,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } $r33086 != $null;
    call $i63087, $exception := int$java.util.concurrent.atomic.AtomicLongArray$length$6039($r33086);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } true;
    $l83088 := $i63087;
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } true;
    $b73089 := $cmpInt(l23085, $l83088);
    assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } true;
    if ($b73089 >= 0) {
        assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } { :comment "thenblock" } true;
        goto block313;
    } else {
        assert { :sourceloc "UniformReservoir.java",57,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",58,-1,-1,-1 } true;
    $r43092 := $heap[r03076,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",58,-1,-1,-1 } true;
    $i93091 := l23085;
    assert { :sourceloc "UniformReservoir.java",58,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",58,-1,-1,-1 } $r43092 != $null;
    call $exception := void$java.util.concurrent.atomic.AtomicLongArray$set$6042($r43092, $i93091, l03090);
    if ($exception != $null) {
    }
  block313:
    assert { :sourceloc "UniformReservoir.java",61,-1,-1,-1 } true;
    return;
}


implementation long$com.codahale.metrics.UniformReservoir$nextLong$6033($in_parameter__0:int) returns ($return:int, $exception:ref){
    
var $r03096 : ref;    
var l13098 : int;    
var $b73104 : int;    
var $l33097 : int;    
var l03099 : int;    
var $l63103 : int;    
var l23100 : int;    
var $l43101 : int;    
var $l53102 : int;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    l03099 := $in_parameter__0;
  block314:
    assert { :sourceloc "UniformReservoir.java",73,-1,-1,-1 } true;
    call $r03096, $exception := com.codahale.metrics.ThreadLocalRandom$com.codahale.metrics.ThreadLocalRandom$current$4345();
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",73,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",73,-1,-1,-1 } $r03096 != $null;
    call $l33097, $exception := long$java.util.Random$nextLong$4107($r03096);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",73,-1,-1,-1 } true;
    l13098 := $bitAnd($l33097, $LongConst3);
    assert { :sourceloc "UniformReservoir.java",74,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",74,-1,-1,-1 } l03099 != 0;
    l23100 := l13098 mod l03099;
    assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } true;
    $l53102 := l13098 - l23100;
    assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } true;
    $l43101 := l03099 - 1;
    assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } true;
    $l63103 := $l53102 + $l43101;
    assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } true;
    $b73104 := $cmpInt($l63103, 0);
    assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } true;
    if ($b73104 < 0) {
        assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } { :comment "thenblock" } true;
        goto block314;
    } else {
        assert { :sourceloc "UniformReservoir.java",75,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",76,-1,-1,-1 } true;
    $return := l23100;
    return;
}


implementation com.codahale.metrics.Snapshot$com.codahale.metrics.UniformReservoir$getSnapshot$6034($this:ref) returns ($return:ref, $exception:ref){
    
var $r43112 : ref;    
var $fakelocal_1 : int;    
var $r33111 : ref;    
var $fakelocal_0 : ref;    
var $fakelocal_2 : ref;    
var i03107 : int;    
var r13109 : ref;    
var $r53114 : ref;    
var r03105 : ref;    
var $l23113 : int;    
var $r23108 : ref;    
var i13110 : int;
    assume { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } $this != $null;
    assume $heap[$return,$type] <: com.codahale.metrics.Snapshot;
    assert { :sourceloc "UniformReservoir.java",-1,-1,-1,-1 } true;
    r03105 := $this;
    assert { :sourceloc "UniformReservoir.java",81,-1,-1,-1 } true;
    call i03107, $exception := int$com.codahale.metrics.UniformReservoir$size$6031(r03105);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",82,-1,-1,-1 } true;
    call $fakelocal_0 := $new(java.util.ArrayList);
    $r23108 := $fakelocal_0;
    assert { :sourceloc "UniformReservoir.java",82,-1,-1,-1 } true;
    call $exception := void$java.util.ArrayList$$la$init$ra$$4274($r23108, i03107);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",82,-1,-1,-1 } true;
    r13109 := $r23108;
    assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } true;
    i13110 := 0;
  block315:
    assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } true;
    if (i13110 >= i03107) {
        assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } { :comment "thenblock" } true;
        goto block316;
    } else {
        assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } { :comment "elseblock" } true;
    }
    assert { :sourceloc "UniformReservoir.java",84,-1,-1,-1 } true;
    $r43112 := $heap[r03105,java.util.concurrent.atomic.AtomicLongArray$com.codahale.metrics.UniformReservoir$values797];
    assert { :sourceloc "UniformReservoir.java",84,-1,-1,-1 } true;
    assert { :sourceloc "UniformReservoir.java",84,-1,-1,-1 } $r43112 != $null;
    call $l23113, $exception := long$java.util.concurrent.atomic.AtomicLongArray$get$6040($r43112, i13110);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",84,-1,-1,-1 } true;
    call $r53114, $exception := java.lang.Long$java.lang.Long$valueOf$878($l23113);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",84,-1,-1,-1 } true;
    call $fakelocal_1, $exception := boolean$java.util.List$add$158(r13109, $r53114);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } true;
    i13110 := i13110 + 1;
    assert { :sourceloc "UniformReservoir.java",83,-1,-1,-1 } true;
    goto block315;
  block316:
    assert { :sourceloc "UniformReservoir.java",86,-1,-1,-1 } true;
    call $fakelocal_2 := $new(com.codahale.metrics.Snapshot);
    $r33111 := $fakelocal_2;
    assert { :sourceloc "UniformReservoir.java",86,-1,-1,-1 } true;
    call $exception := void$com.codahale.metrics.Snapshot$$la$init$ra$$3150($r33111, r13109);
    if ($exception != $null) {
    }
    assert { :sourceloc "UniformReservoir.java",86,-1,-1,-1 } true;
    $return := $r33111;
    return;
}


